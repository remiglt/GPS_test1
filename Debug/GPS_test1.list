
GPS_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009560  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08009740  08009740  00019740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c9c  08009c9c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c9c  08009c9c  00019c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca4  08009ca4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ca8  08009ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009cac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  200001f0  08009e9c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08009e9c  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dffd  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd1  00000000  00000000  0002e21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000301f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9e3  00000000  00000000  00031688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2c5  00000000  00000000  0004f06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b82be  00000000  00000000  0005c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001145ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa8  00000000  00000000  00114640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009728 	.word	0x08009728

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08009728 	.word	0x08009728

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff5b 	bl	8000b2c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fcd1 	bl	8000648 <__aeabi_dmul>
 8000ca6:	f7ff ffa7 	bl	8000bf8 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc52 	bl	8000554 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fcc8 	bl	8000648 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fb0a 	bl	80002d8 <__aeabi_dsub>
 8000cc4:	f7ff ff98 	bl	8000bf8 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <Perimetre>:
//lat  49.039566040039062
//long 2.0719516277313232



void Perimetre(void){
 8000fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af02      	add	r7, sp, #8

	DistanceMilesCarre = (((latENSEA - latitude)*(latENSEA - latitude)) + ((longiENSEA - longitude)*(longiENSEA - longitude))); //Distance en miles nautiques au carré pour ne pas avoir à calculer de racine carrée
 8000fb0:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <Perimetre+0x110>)
 8000fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <Perimetre+0x114>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff f98c 	bl	80002d8 <__aeabi_dsub>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4614      	mov	r4, r2
 8000fc6:	461d      	mov	r5, r3
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <Perimetre+0x110>)
 8000fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <Perimetre+0x114>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff f980 	bl	80002d8 <__aeabi_dsub>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff fb32 	bl	8000648 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4614      	mov	r4, r2
 8000fea:	461d      	mov	r5, r3
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <Perimetre+0x118>)
 8000fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <Perimetre+0x11c>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff f96e 	bl	80002d8 <__aeabi_dsub>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4690      	mov	r8, r2
 8001002:	4699      	mov	r9, r3
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <Perimetre+0x118>)
 8001006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <Perimetre+0x11c>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff f962 	bl	80002d8 <__aeabi_dsub>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4640      	mov	r0, r8
 800101a:	4649      	mov	r1, r9
 800101c:	f7ff fb14 	bl	8000648 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f958 	bl	80002dc <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4925      	ldr	r1, [pc, #148]	; (80010c8 <Perimetre+0x120>)
 8001032:	e9c1 2300 	strd	r2, r3, [r1]
	DistanceCarre = (DistanceMilesCarre/3.429904); //Conversion de mile nautique à Km
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <Perimetre+0x120>)
 8001038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103c:	a31a      	add	r3, pc, #104	; (adr r3, 80010a8 <Perimetre+0x100>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fc2b 	bl	800089c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4920      	ldr	r1, [pc, #128]	; (80010cc <Perimetre+0x124>)
 800104c:	e9c1 2300 	strd	r2, r3, [r1]

	if(DistanceCarre >= 0.0000012){ //Si le porteur du badge se déplace à plus de ... distance
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <Perimetre+0x124>)
 8001052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001056:	a316      	add	r3, pc, #88	; (adr r3, 80010b0 <Perimetre+0x108>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fd7a 	bl	8000b54 <__aeabi_dcmpge>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <Perimetre+0xc0>
		//Distance choisie pour déclencher le "if" si on part à la distance de l'arrêt de bus.
		HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
		sprintf(uart_tx_buffer,"Je suis perdu, venez me chercher. Je suis en lat : %lf, long : %lf \r\n", latitude, longitude);

	}
}
 8001066:	e018      	b.n	800109a <Perimetre+0xf2>
		HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
 8001068:	4819      	ldr	r0, [pc, #100]	; (80010d0 <Perimetre+0x128>)
 800106a:	f7ff f8d9 	bl	8000220 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001076:	4916      	ldr	r1, [pc, #88]	; (80010d0 <Perimetre+0x128>)
 8001078:	4816      	ldr	r0, [pc, #88]	; (80010d4 <Perimetre+0x12c>)
 800107a:	f002 f949 	bl	8003310 <HAL_UART_Transmit>
		sprintf(uart_tx_buffer,"Je suis perdu, venez me chercher. Je suis en lat : %lf, long : %lf \r\n", latitude, longitude);
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <Perimetre+0x114>)
 8001080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <Perimetre+0x11c>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	e9cd 2300 	strd	r2, r3, [sp]
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4911      	ldr	r1, [pc, #68]	; (80010d8 <Perimetre+0x130>)
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <Perimetre+0x128>)
 8001096:	f004 fdd1 	bl	8005c3c <siprintf>
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	82235b4f 	.word	0x82235b4f
 80010ac:	400b7071 	.word	0x400b7071
 80010b0:	f40d8376 	.word	0xf40d8376
 80010b4:	3eb421f5 	.word	0x3eb421f5
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000768 	.word	0x20000768
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000770 	.word	0x20000770
 80010c8:	20000800 	.word	0x20000800
 80010cc:	20000808 	.word	0x20000808
 80010d0:	20000780 	.word	0x20000780
 80010d4:	2000029c 	.word	0x2000029c
 80010d8:	08009740 	.word	0x08009740

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f000 fd12 	bl	8001b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f96f 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f000 fa51 	bl	8001590 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ee:	f000 f9b7 	bl	8001460 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010f2:	f000 fa01 	bl	80014f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, uart_gps_rx, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	499c      	ldr	r1, [pc, #624]	; (800136c <main+0x290>)
 80010fa:	489d      	ldr	r0, [pc, #628]	; (8001370 <main+0x294>)
 80010fc:	f002 f99e 	bl	800343c <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */

		//Partie "Extraction des coordonnees de la trame que le GPS nous envoie

		if(it_rx_gps){
 8001100:	4b9c      	ldr	r3, [pc, #624]	; (8001374 <main+0x298>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0fb      	beq.n	8001100 <main+0x24>
			if(data_rdy == 1){
 8001108:	4b9b      	ldr	r3, [pc, #620]	; (8001378 <main+0x29c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	f040 80d6 	bne.w	80012be <main+0x1e2>
				for(int j = 0; j<=23;j++){
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
 8001116:	e00b      	b.n	8001130 <main+0x54>
					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude telles que sur la trame reçue
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	3312      	adds	r3, #18
 800111c:	4a97      	ldr	r2, [pc, #604]	; (800137c <main+0x2a0>)
 800111e:	5cd1      	ldrb	r1, [r2, r3]
 8001120:	4a97      	ldr	r2, [pc, #604]	; (8001380 <main+0x2a4>)
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	4413      	add	r3, r2
 8001126:	460a      	mov	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j<=23;j++){
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	3301      	adds	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	2b17      	cmp	r3, #23
 8001134:	ddf0      	ble.n	8001118 <main+0x3c>
					//En effet, les coordonnes sont d'abord de cette forme : "$GNGGA,121933.000,4902.36627,N,00204.31287,E,1,05,13.3,0.0,M,0.0,M,,*4D"
					//On sélectionne donc la partie qui est après l'identifieur et l'heure mais avant le ",E,".
				}

				for(int k = 0; k<=9;k++){
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
 800113a:	e00b      	b.n	8001154 <main+0x78>
					latitude_data[k] = position[k]; //latitude non convertie
 800113c:	4a90      	ldr	r2, [pc, #576]	; (8001380 <main+0x2a4>)
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	4413      	add	r3, r2
 8001142:	7819      	ldrb	r1, [r3, #0]
 8001144:	4a8f      	ldr	r2, [pc, #572]	; (8001384 <main+0x2a8>)
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	4413      	add	r3, r2
 800114a:	460a      	mov	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
				for(int k = 0; k<=9;k++){
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	3301      	adds	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	2b09      	cmp	r3, #9
 8001158:	ddf0      	ble.n	800113c <main+0x60>
				}
				for(int l = 0; l<=10;l++){
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e00b      	b.n	8001178 <main+0x9c>
					longitude_data[l] = position[l+13]; //longitude non convertie
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	330d      	adds	r3, #13
 8001164:	4a86      	ldr	r2, [pc, #536]	; (8001380 <main+0x2a4>)
 8001166:	5cd1      	ldrb	r1, [r2, r3]
 8001168:	4a87      	ldr	r2, [pc, #540]	; (8001388 <main+0x2ac>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4413      	add	r3, r2
 800116e:	460a      	mov	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
				for(int l = 0; l<=10;l++){
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	2b0a      	cmp	r3, #10
 800117c:	ddf0      	ble.n	8001160 <main+0x84>
				}

				lat2[0] = latitude_data[0];
 800117e:	4b81      	ldr	r3, [pc, #516]	; (8001384 <main+0x2a8>)
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	4b82      	ldr	r3, [pc, #520]	; (800138c <main+0x2b0>)
 8001184:	701a      	strb	r2, [r3, #0]
				lat2[1] = latitude_data[1]; //lat2 -> les deux digits avant la virgue du degré de la lat.
 8001186:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <main+0x2a8>)
 8001188:	785a      	ldrb	r2, [r3, #1]
 800118a:	4b80      	ldr	r3, [pc, #512]	; (800138c <main+0x2b0>)
 800118c:	705a      	strb	r2, [r3, #1]

				for(int m = 0; m<=6;m++){
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	e00b      	b.n	80011ac <main+0xd0>
					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste après la virgule de la lat.
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	3302      	adds	r3, #2
 8001198:	4a7a      	ldr	r2, [pc, #488]	; (8001384 <main+0x2a8>)
 800119a:	5cd1      	ldrb	r1, [r2, r3]
 800119c:	4a7c      	ldr	r2, [pc, #496]	; (8001390 <main+0x2b4>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4413      	add	r3, r2
 80011a2:	460a      	mov	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
				for(int m = 0; m<=6;m++){
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	ddf0      	ble.n	8001194 <main+0xb8>
				}

				long3[0] = longitude_data[0];
 80011b2:	4b75      	ldr	r3, [pc, #468]	; (8001388 <main+0x2ac>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b77      	ldr	r3, [pc, #476]	; (8001394 <main+0x2b8>)
 80011b8:	701a      	strb	r2, [r3, #0]
				long3[1] = longitude_data[1];
 80011ba:	4b73      	ldr	r3, [pc, #460]	; (8001388 <main+0x2ac>)
 80011bc:	785a      	ldrb	r2, [r3, #1]
 80011be:	4b75      	ldr	r3, [pc, #468]	; (8001394 <main+0x2b8>)
 80011c0:	705a      	strb	r2, [r3, #1]
				long3[2] = longitude_data[2]; //long3 -> les trois digits avant la virgule du degré de la long.
 80011c2:	4b71      	ldr	r3, [pc, #452]	; (8001388 <main+0x2ac>)
 80011c4:	789a      	ldrb	r2, [r3, #2]
 80011c6:	4b73      	ldr	r3, [pc, #460]	; (8001394 <main+0x2b8>)
 80011c8:	709a      	strb	r2, [r3, #2]

				for(int n = 0; n<=6;n++){
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e00b      	b.n	80011e8 <main+0x10c>
					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste après la virgule de la long.
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3303      	adds	r3, #3
 80011d4:	4a6c      	ldr	r2, [pc, #432]	; (8001388 <main+0x2ac>)
 80011d6:	5cd1      	ldrb	r1, [r2, r3]
 80011d8:	4a6f      	ldr	r2, [pc, #444]	; (8001398 <main+0x2bc>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	4413      	add	r3, r2
 80011de:	460a      	mov	r2, r1
 80011e0:	701a      	strb	r2, [r3, #0]
				for(int n = 0; n<=6;n++){
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	ddf0      	ble.n	80011d0 <main+0xf4>
				}

				float deg_lat = atof(lat2);
 80011ee:	4867      	ldr	r0, [pc, #412]	; (800138c <main+0x2b0>)
 80011f0:	f004 f884 	bl	80052fc <atof>
 80011f4:	ee07 0a90 	vmov	s15, r0
 80011f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fc:	edc7 7a04 	vstr	s15, [r7, #16]
				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001200:	4863      	ldr	r0, [pc, #396]	; (8001390 <main+0x2b4>)
 8001202:	f004 f87b 	bl	80052fc <atof>
 8001206:	ee07 0a90 	vmov	s15, r0
 800120a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120e:	edc7 7a03 	vstr	s15, [r7, #12]

				float deg_long = atof(long3);
 8001212:	4860      	ldr	r0, [pc, #384]	; (8001394 <main+0x2b8>)
 8001214:	f004 f872 	bl	80052fc <atof>
 8001218:	ee07 0a90 	vmov	s15, r0
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	edc7 7a02 	vstr	s15, [r7, #8]
				float reste_long = atof(long7); //conversion du char[long] en float[long]
 8001224:	485c      	ldr	r0, [pc, #368]	; (8001398 <main+0x2bc>)
 8001226:	f004 f869 	bl	80052fc <atof>
 800122a:	ee07 0a90 	vmov	s15, r0
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	edc7 7a01 	vstr	s15, [r7, #4]

				latitude = deg_lat + (reste_lat/60); //latitude convertie
 8001236:	edd7 7a03 	vldr	s15, [r7, #12]
 800123a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800139c <main+0x2c0>
 800123e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001242:	edd7 7a04 	vldr	s15, [r7, #16]
 8001246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124a:	ee17 0a90 	vmov	r0, s15
 800124e:	f7ff f9a3 	bl	8000598 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4952      	ldr	r1, [pc, #328]	; (80013a0 <main+0x2c4>)
 8001258:	e9c1 2300 	strd	r2, r3, [r1]
				longitude = deg_long + (reste_long/60); //longitude convertie
 800125c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001260:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800139c <main+0x2c0>
 8001264:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001268:	edd7 7a02 	vldr	s15, [r7, #8]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	ee17 0a90 	vmov	r0, s15
 8001274:	f7ff f990 	bl	8000598 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4949      	ldr	r1, [pc, #292]	; (80013a4 <main+0x2c8>)
 800127e:	e9c1 2300 	strd	r2, r3, [r1]


				HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
 8001282:	4849      	ldr	r0, [pc, #292]	; (80013a8 <main+0x2cc>)
 8001284:	f7fe ffcc 	bl	8000220 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001290:	4945      	ldr	r1, [pc, #276]	; (80013a8 <main+0x2cc>)
 8001292:	4846      	ldr	r0, [pc, #280]	; (80013ac <main+0x2d0>)
 8001294:	f002 f83c 	bl	8003310 <HAL_UART_Transmit>
				sprintf(uart_tx_buffer,"latitude : %lf,\r\n longitude : %lf \r\n", latitude, longitude);
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <main+0x2c4>)
 800129a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <main+0x2c8>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	e9cd 2300 	strd	r2, r3, [sp]
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4940      	ldr	r1, [pc, #256]	; (80013b0 <main+0x2d4>)
 80012ae:	483e      	ldr	r0, [pc, #248]	; (80013a8 <main+0x2cc>)
 80012b0:	f004 fcc4 	bl	8005c3c <siprintf>
				//Nous a permis de voir si les variables latitude et longitude fonctionnaient bien lorsqu'on se déplaçait dehors.




				Perimetre(); // Permet de savoir si on est toujours dans le perimetre autorisé ou pas.
 80012b4:	f7ff fe78 	bl	8000fa8 <Perimetre>

				data_rdy = 0;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <main+0x29c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

			}
			if(uart_gps_rx[0]==10){
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <main+0x290>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d107      	bne.n	80012d6 <main+0x1fa>
				HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ca:	2202      	movs	r2, #2
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <main+0x2d8>)
 80012ce:	4837      	ldr	r0, [pc, #220]	; (80013ac <main+0x2d0>)
 80012d0:	f002 f81e 	bl	8003310 <HAL_UART_Transmit>
 80012d4:	e045      	b.n	8001362 <main+0x286>
			}
			else{
				uart_pc_tx[0]=uart_gps_rx[0];
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <main+0x290>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <main+0x2dc>)
 80012dc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uart_pc_tx, 1, HAL_MAX_DELAY);
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	2201      	movs	r2, #1
 80012e4:	4934      	ldr	r1, [pc, #208]	; (80013b8 <main+0x2dc>)
 80012e6:	4831      	ldr	r0, [pc, #196]	; (80013ac <main+0x2d0>)
 80012e8:	f002 f812 	bl	8003310 <HAL_UART_Transmit>
				coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 80012ec:	4b33      	ldr	r3, [pc, #204]	; (80013bc <main+0x2e0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <main+0x2dc>)
 80012f2:	7811      	ldrb	r1, [r2, #0]
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <main+0x2a0>)
 80012f6:	54d1      	strb	r1, [r2, r3]
				if(i >= 4){
 80012f8:	4b30      	ldr	r3, [pc, #192]	; (80013bc <main+0x2e0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	dd2b      	ble.n	8001358 <main+0x27c>
					if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <main+0x2e0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b04      	subs	r3, #4
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <main+0x2a0>)
 8001308:	4413      	add	r3, r2
 800130a:	2205      	movs	r2, #5
 800130c:	4619      	mov	r1, r3
 800130e:	482c      	ldr	r0, [pc, #176]	; (80013c0 <main+0x2e4>)
 8001310:	f004 fcb4 	bl	8005c7c <strncmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10e      	bne.n	8001338 <main+0x25c>
						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <main+0x2e0>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
						if(first_data == 1){
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <main+0x2e8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d103      	bne.n	8001330 <main+0x254>
							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <main+0x29c>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e018      	b.n	8001362 <main+0x286>
						}
						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <main+0x2e8>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e014      	b.n	8001362 <main+0x286>
					}
					else{
						if(i == GPS_TRAME_SIZE-1){
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <main+0x2e0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001340:	4293      	cmp	r3, r2
 8001342:	d103      	bne.n	800134c <main+0x270>
							i = 0;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <main+0x2e0>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00a      	b.n	8001362 <main+0x286>
						}
						else{
							i++;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <main+0x2e0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <main+0x2e0>)
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e004      	b.n	8001362 <main+0x286>
						}

					}

				}
				else i++;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <main+0x2e0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <main+0x2e0>)
 8001360:	6013      	str	r3, [r2, #0]
			}

			it_rx_gps = 0;
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <main+0x298>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
		if(it_rx_gps){
 8001368:	e6ca      	b.n	8001100 <main+0x24>
 800136a:	bf00      	nop
 800136c:	2000032c 	.word	0x2000032c
 8001370:	2000020c 	.word	0x2000020c
 8001374:	20000331 	.word	0x20000331
 8001378:	2000077c 	.word	0x2000077c
 800137c:	20000338 	.word	0x20000338
 8001380:	20000738 	.word	0x20000738
 8001384:	2000072c 	.word	0x2000072c
 8001388:	20000720 	.word	0x20000720
 800138c:	20000750 	.word	0x20000750
 8001390:	20000754 	.word	0x20000754
 8001394:	2000075c 	.word	0x2000075c
 8001398:	20000760 	.word	0x20000760
 800139c:	42700000 	.word	0x42700000
 80013a0:	20000768 	.word	0x20000768
 80013a4:	20000770 	.word	0x20000770
 80013a8:	20000780 	.word	0x20000780
 80013ac:	2000029c 	.word	0x2000029c
 80013b0:	08009788 	.word	0x08009788
 80013b4:	080097b0 	.word	0x080097b0
 80013b8:	20000330 	.word	0x20000330
 80013bc:	20000334 	.word	0x20000334
 80013c0:	080097b4 	.word	0x080097b4
 80013c4:	20000778 	.word	0x20000778

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0318 	add.w	r3, r7, #24
 80013d2:	2238      	movs	r2, #56	; 0x38
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 ffbe 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 ff68 	bl	80022c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fa:	2340      	movs	r3, #64	; 0x40
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001402:	2302      	movs	r3, #2
 8001404:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001406:	2304      	movs	r3, #4
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800140a:	2355      	movs	r3, #85	; 0x55
 800140c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f802 	bl	8002428 <HAL_RCC_OscConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800142a:	f000 f93f 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142e:	230f      	movs	r3, #15
 8001430:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001432:	2303      	movs	r3, #3
 8001434:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2104      	movs	r1, #4
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fb06 	bl	8002a58 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001452:	f000 f92b 	bl	80016ac <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3750      	adds	r7, #80	; 0x50
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <MX_USART1_UART_Init+0x94>)
 8001468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 800146c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a8:	4811      	ldr	r0, [pc, #68]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 80014aa:	f001 fee1 	bl	8003270 <HAL_UART_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014b4:	f000 f8fa 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 80014bc:	f003 fe53 	bl	8005166 <HAL_UARTEx_SetTxFifoThreshold>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014c6:	f000 f8f1 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 80014ce:	f003 fe88 	bl	80051e2 <HAL_UARTEx_SetRxFifoThreshold>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014d8:	f000 f8e8 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_USART1_UART_Init+0x90>)
 80014de:	f003 fe09 	bl	80050f4 <HAL_UARTEx_DisableFifoMode>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014e8:	f000 f8e0 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000020c 	.word	0x2000020c
 80014f4:	40013800 	.word	0x40013800

080014f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_USART2_UART_Init+0x90>)
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <MX_USART2_UART_Init+0x94>)
 8001500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_USART2_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_USART2_UART_Init+0x90>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_USART2_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART2_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001540:	4811      	ldr	r0, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001542:	f001 fe95 	bl	8003270 <HAL_UART_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800154c:	f000 f8ae 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001554:	f003 fe07 	bl	8005166 <HAL_UARTEx_SetTxFifoThreshold>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800155e:	f000 f8a5 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001562:	2100      	movs	r1, #0
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001566:	f003 fe3c 	bl	80051e2 <HAL_UARTEx_SetRxFifoThreshold>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001570:	f000 f89c 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_USART2_UART_Init+0x90>)
 8001576:	f003 fdbd 	bl	80050f4 <HAL_UARTEx_DisableFifoMode>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001580:	f000 f894 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000029c 	.word	0x2000029c
 800158c:	40004400 	.word	0x40004400

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a33      	ldr	r2, [pc, #204]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a27      	ldr	r2, [pc, #156]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a21      	ldr	r2, [pc, #132]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_GPIO_Init+0xe8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2120      	movs	r1, #32
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f000 fe3f 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001618:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4814      	ldr	r0, [pc, #80]	; (800167c <MX_GPIO_Init+0xec>)
 800162a:	f000 fcaf 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800162e:	230c      	movs	r3, #12
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800163e:	230c      	movs	r3, #12
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f000 fc9e 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001650:	2320      	movs	r3, #32
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f000 fc8f 	bl	8001f8c <HAL_GPIO_Init>

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	48000800 	.word	0x48000800

08001680 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	it_rx_gps = 1;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_UART_RxCpltCallback+0x20>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_gps_rx, 1);
 800168e:	2201      	movs	r2, #1
 8001690:	4904      	ldr	r1, [pc, #16]	; (80016a4 <HAL_UART_RxCpltCallback+0x24>)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_UART_RxCpltCallback+0x28>)
 8001694:	f001 fed2 	bl	800343c <HAL_UART_Receive_IT>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000331 	.word	0x20000331
 80016a4:	2000032c 	.word	0x2000032c
 80016a8:	2000020c 	.word	0x2000020c

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x44>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ee:	f000 fe8b 	bl	8002408 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b09e      	sub	sp, #120	; 0x78
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	2244      	movs	r2, #68	; 0x44
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fe19 	bl	8005358 <memset>
  if(huart->Instance==USART1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a53      	ldr	r2, [pc, #332]	; (8001878 <HAL_UART_MspInit+0x178>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d13e      	bne.n	80017ae <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fba7 	bl	8002e90 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001748:	f7ff ffb0 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_UART_MspInit+0x17c>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001750:	4a4a      	ldr	r2, [pc, #296]	; (800187c <HAL_UART_MspInit+0x17c>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001756:	6613      	str	r3, [r2, #96]	; 0x60
 8001758:	4b48      	ldr	r3, [pc, #288]	; (800187c <HAL_UART_MspInit+0x17c>)
 800175a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001764:	4b45      	ldr	r3, [pc, #276]	; (800187c <HAL_UART_MspInit+0x17c>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	4a44      	ldr	r2, [pc, #272]	; (800187c <HAL_UART_MspInit+0x17c>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001770:	4b42      	ldr	r3, [pc, #264]	; (800187c <HAL_UART_MspInit+0x17c>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800177c:	2330      	movs	r3, #48	; 0x30
 800177e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178c:	2307      	movs	r3, #7
 800178e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001794:	4619      	mov	r1, r3
 8001796:	483a      	ldr	r0, [pc, #232]	; (8001880 <HAL_UART_MspInit+0x180>)
 8001798:	f000 fbf8 	bl	8001f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2025      	movs	r0, #37	; 0x25
 80017a2:	f000 fafe 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a6:	2025      	movs	r0, #37	; 0x25
 80017a8:	f000 fb15 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ac:	e060      	b.n	8001870 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a34      	ldr	r2, [pc, #208]	; (8001884 <HAL_UART_MspInit+0x184>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d15b      	bne.n	8001870 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fb63 	bl	8002e90 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80017d0:	f7ff ff6c 	bl	80016ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_UART_MspInit+0x17c>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	4a28      	ldr	r2, [pc, #160]	; (800187c <HAL_UART_MspInit+0x17c>)
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	6593      	str	r3, [r2, #88]	; 0x58
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_UART_MspInit+0x17c>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_UART_MspInit+0x17c>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_UART_MspInit+0x17c>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_UART_MspInit+0x17c>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_UART_MspInit+0x17c>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	4a1c      	ldr	r2, [pc, #112]	; (800187c <HAL_UART_MspInit+0x17c>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_UART_MspInit+0x17c>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800181c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001820:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800182e:	2307      	movs	r3, #7
 8001830:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f000 fba6 	bl	8001f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001840:	2308      	movs	r3, #8
 8001842:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001850:	2307      	movs	r3, #7
 8001852:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001858:	4619      	mov	r1, r3
 800185a:	480b      	ldr	r0, [pc, #44]	; (8001888 <HAL_UART_MspInit+0x188>)
 800185c:	f000 fb96 	bl	8001f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2026      	movs	r0, #38	; 0x26
 8001866:	f000 fa9c 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800186a:	2026      	movs	r0, #38	; 0x26
 800186c:	f000 fab3 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 8001870:	bf00      	nop
 8001872:	3778      	adds	r7, #120	; 0x78
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013800 	.word	0x40013800
 800187c:	40021000 	.word	0x40021000
 8001880:	48000800 	.word	0x48000800
 8001884:	40004400 	.word	0x40004400
 8001888:	48000400 	.word	0x48000400

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 f96a 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <USART1_IRQHandler+0x10>)
 80018e6:	f001 fdff 	bl	80034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000020c 	.word	0x2000020c

080018f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USART2_IRQHandler+0x10>)
 80018fa:	f001 fdf5 	bl	80034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000029c 	.word	0x2000029c

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001922:	f003 fcef 	bl	8005304 <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
	return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
	while (1) {}		/* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
	}

return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e009      	b.n	80019ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf1      	blt.n	8001998 <_write+0x12>
	}
	return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_close>:

int _close(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f003 fc54 	bl	8005304 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20008000 	.word	0x20008000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	20000810 	.word	0x20000810
 8001a90:	20000828 	.word	0x20000828

08001a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001abe:	490e      	ldr	r1, [pc, #56]	; (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad4:	4c0b      	ldr	r4, [pc, #44]	; (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ae2:	f7ff ffd7 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f003 fc13 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff faf7 	bl	80010dc <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
  ldr   r0, =_estack
 8001af0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001afc:	08009cac 	.word	0x08009cac
  ldr r2, =_sbss
 8001b00:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001b04:	20000828 	.word	0x20000828

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>

08001b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f939 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f80e 	bl	8001b3c <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e001      	b.n	8001b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2c:	f7ff fdc4 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b30:	79fb      	ldrb	r3, [r7, #7]

}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_InitTick+0x68>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d022      	beq.n	8001b96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_InitTick+0x6c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_InitTick+0x68>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f944 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10f      	bne.n	8001b90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d809      	bhi.n	8001b8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b76:	2200      	movs	r2, #0
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b7e:	f000 f910 	bl	8001da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_InitTick+0x70>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e007      	b.n	8001b9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	e004      	b.n	8001b9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e001      	b.n	8001b9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000018 	.word	0x20000018
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	20000014 	.word	0x20000014

08001bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bc0:	6013      	str	r3, [r2, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	20000814 	.word	0x20000814
 8001bd0:	20000018 	.word	0x20000018

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000814 	.word	0x20000814

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff40 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff33 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa4 	bl	8001d48 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d005      	beq.n	8001e2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e037      	b.n	8001e9e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 020e 	bic.w	r2, r2, #14
 8001e3c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f003 021f 	and.w	r2, r3, #31
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e7a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00c      	beq.n	8001e9e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e92:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e9c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e047      	b.n	8001f80 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020e 	bic.w	r2, r2, #14
 8001efe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
    }
  }
  return status;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f9a:	e15a      	b.n	8002252 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 814c 	beq.w	800224c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d005      	beq.n	8001fcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d130      	bne.n	800202e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002002:	2201      	movs	r2, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 0201 	and.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b03      	cmp	r3, #3
 8002038:	d017      	beq.n	800206a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d123      	bne.n	80020be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0203 	and.w	r2, r3, #3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80a6 	beq.w	800224c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002100:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	4a5a      	ldr	r2, [pc, #360]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6613      	str	r3, [r2, #96]	; 0x60
 800210c:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002118:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002142:	d01f      	beq.n	8002184 <HAL_GPIO_Init+0x1f8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d019      	beq.n	8002180 <HAL_GPIO_Init+0x1f4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a4b      	ldr	r2, [pc, #300]	; (800227c <HAL_GPIO_Init+0x2f0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_GPIO_Init+0x1f0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a4a      	ldr	r2, [pc, #296]	; (8002280 <HAL_GPIO_Init+0x2f4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00d      	beq.n	8002178 <HAL_GPIO_Init+0x1ec>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a49      	ldr	r2, [pc, #292]	; (8002284 <HAL_GPIO_Init+0x2f8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <HAL_GPIO_Init+0x1e8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a48      	ldr	r2, [pc, #288]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_GPIO_Init+0x1e4>
 800216c:	2305      	movs	r3, #5
 800216e:	e00a      	b.n	8002186 <HAL_GPIO_Init+0x1fa>
 8002170:	2306      	movs	r3, #6
 8002172:	e008      	b.n	8002186 <HAL_GPIO_Init+0x1fa>
 8002174:	2304      	movs	r3, #4
 8002176:	e006      	b.n	8002186 <HAL_GPIO_Init+0x1fa>
 8002178:	2303      	movs	r3, #3
 800217a:	e004      	b.n	8002186 <HAL_GPIO_Init+0x1fa>
 800217c:	2302      	movs	r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x1fa>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_GPIO_Init+0x1fa>
 8002184:	2300      	movs	r3, #0
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	f002 0203 	and.w	r2, r2, #3
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	4093      	lsls	r3, r2
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002196:	4937      	ldr	r1, [pc, #220]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_GPIO_Init+0x300>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021c8:	4a30      	ldr	r2, [pc, #192]	; (800228c <HAL_GPIO_Init+0x300>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_GPIO_Init+0x300>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021f2:	4a26      	ldr	r2, [pc, #152]	; (800228c <HAL_GPIO_Init+0x300>)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_GPIO_Init+0x300>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_GPIO_Init+0x300>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_GPIO_Init+0x300>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_GPIO_Init+0x300>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3301      	adds	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f ae9d 	bne.w	8001f9c <HAL_GPIO_Init+0x10>
  }
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40021000 	.word	0x40021000
 8002274:	40010000 	.word	0x40010000
 8002278:	48000400 	.word	0x48000400
 800227c:	48000800 	.word	0x48000800
 8002280:	48000c00 	.word	0x48000c00
 8002284:	48001000 	.word	0x48001000
 8002288:	48001400 	.word	0x48001400
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d141      	bne.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ce:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d131      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022dc:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e2:	4a46      	ldr	r2, [pc, #280]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022f4:	4a41      	ldr	r2, [pc, #260]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2232      	movs	r2, #50	; 0x32
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	4a3f      	ldr	r2, [pc, #252]	; (8002404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	0c9b      	lsrs	r3, r3, #18
 800230e:	3301      	adds	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002312:	e002      	b.n	800231a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3b01      	subs	r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002326:	d102      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f2      	bne.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233a:	d158      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e057      	b.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002346:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800234c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002350:	e04d      	b.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002358:	d141      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002366:	d131      	bne.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236e:	4a23      	ldr	r2, [pc, #140]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002380:	4a1e      	ldr	r2, [pc, #120]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002386:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2232      	movs	r2, #50	; 0x32
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	0c9b      	lsrs	r3, r3, #18
 800239a:	3301      	adds	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239e:	e002      	b.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b2:	d102      	bne.n	80023ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f2      	bne.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c6:	d112      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e011      	b.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023dc:	e007      	b.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40007000 	.word	0x40007000
 8002400:	20000010 	.word	0x20000010
 8002404:	431bde83 	.word	0x431bde83

08002408 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002416:	6093      	str	r3, [r2, #8]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40007000 	.word	0x40007000

08002428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e306      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d075      	beq.n	8002532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002446:	4b97      	ldr	r3, [pc, #604]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002450:	4b94      	ldr	r3, [pc, #592]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d102      	bne.n	8002466 <HAL_RCC_OscConfig+0x3e>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d002      	beq.n	800246c <HAL_RCC_OscConfig+0x44>
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d10b      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	4b8d      	ldr	r3, [pc, #564]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05b      	beq.n	8002530 <HAL_RCC_OscConfig+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d157      	bne.n	8002530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e2e1      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x74>
 800248e:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a84      	ldr	r2, [pc, #528]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x98>
 80024a6:	4b7f      	ldr	r3, [pc, #508]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a7e      	ldr	r2, [pc, #504]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b7c      	ldr	r3, [pc, #496]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a7b      	ldr	r2, [pc, #492]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a77      	ldr	r2, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a74      	ldr	r2, [pc, #464]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff fb78 	bl	8001bd4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff fb74 	bl	8001bd4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e2a6      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xc0>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fb64 	bl	8001bd4 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fb60 	bl	8001bd4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e292      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002522:	4b60      	ldr	r3, [pc, #384]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0xe8>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b0c      	cmp	r3, #12
 8002556:	d102      	bne.n	800255e <HAL_RCC_OscConfig+0x136>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d002      	beq.n	8002564 <HAL_RCC_OscConfig+0x13c>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d11f      	bne.n	80025a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x154>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e265      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4946      	ldr	r1, [pc, #280]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002590:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <HAL_RCC_OscConfig+0x280>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fad1 	bl	8001b3c <HAL_InitTick>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d043      	beq.n	8002628 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e251      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ac:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a3c      	ldr	r2, [pc, #240]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff fb0c 	bl	8001bd4 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7ff fb08 	bl	8001bd4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e23a      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	492d      	ldr	r1, [pc, #180]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
 80025f2:	e01a      	b.n	800262a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 80025fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff fae8 	bl	8001bd4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff fae4 	bl	8001bd4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e216      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1e0>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d041      	beq.n	80026ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01c      	beq.n	8002678 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002644:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff fac1 	bl	8001bd4 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff fabd 	bl	8001bd4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1ef      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0ef      	beq.n	8002656 <HAL_RCC_OscConfig+0x22e>
 8002676:	e020      	b.n	80026ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff faa4 	bl	8001bd4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800268e:	e00d      	b.n	80026ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002690:	f7ff faa0 	bl	8001bd4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d906      	bls.n	80026ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1d2      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ac:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ea      	bne.n	8002690 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a6 	beq.w	8002814 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026cc:	4b84      	ldr	r3, [pc, #528]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_OscConfig+0x2b4>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x2b6>
 80026dc:	2300      	movs	r3, #0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	4a7e      	ldr	r2, [pc, #504]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
 80026ee:	4b7c      	ldr	r3, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fe:	4b79      	ldr	r3, [pc, #484]	; (80028e4 <HAL_RCC_OscConfig+0x4bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800270a:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <HAL_RCC_OscConfig+0x4bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a75      	ldr	r2, [pc, #468]	; (80028e4 <HAL_RCC_OscConfig+0x4bc>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7ff fa5d 	bl	8001bd4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7ff fa59 	bl	8001bd4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e18b      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002730:	4b6c      	ldr	r3, [pc, #432]	; (80028e4 <HAL_RCC_OscConfig+0x4bc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d108      	bne.n	8002756 <HAL_RCC_OscConfig+0x32e>
 8002744:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	4a65      	ldr	r2, [pc, #404]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002754:	e024      	b.n	80027a0 <HAL_RCC_OscConfig+0x378>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d110      	bne.n	8002780 <HAL_RCC_OscConfig+0x358>
 800275e:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	4a5a      	ldr	r2, [pc, #360]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277e:	e00f      	b.n	80027a0 <HAL_RCC_OscConfig+0x378>
 8002780:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	4a52      	ldr	r2, [pc, #328]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d016      	beq.n	80027d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff fa14 	bl	8001bd4 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7ff fa10 	bl	8001bd4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e140      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ed      	beq.n	80027b0 <HAL_RCC_OscConfig+0x388>
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7ff f9fd 	bl	8001bd4 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7ff f9f9 	bl	8001bd4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e129      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ed      	bne.n	80027de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	4a34      	ldr	r2, [pc, #208]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d03c      	beq.n	800289a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01c      	beq.n	8002862 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 800282a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800282e:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7ff f9cc 	bl	8001bd4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002840:	f7ff f9c8 	bl	8001bd4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0fa      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <HAL_RCC_OscConfig+0x418>
 8002860:	e01b      	b.n	800289a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 8002864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7ff f9af 	bl	8001bd4 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287a:	f7ff f9ab 	bl	8001bd4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0dd      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 800288e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ef      	bne.n	800287a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80d1 	beq.w	8002a46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	f000 808b 	beq.w	80029c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d15e      	bne.n	8002978 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_RCC_OscConfig+0x4b8>)
 80028c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7ff f985 	bl	8001bd4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028cc:	e00c      	b.n	80028e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7ff f981 	bl	8001bd4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d905      	bls.n	80028e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0b3      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ec      	bne.n	80028ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f4:	4b56      	ldr	r3, [pc, #344]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_RCC_OscConfig+0x62c>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6a11      	ldr	r1, [r2, #32]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002904:	3a01      	subs	r2, #1
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800290e:	0212      	lsls	r2, r2, #8
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0552      	lsls	r2, r2, #21
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002922:	0852      	lsrs	r2, r2, #1
 8002924:	3a01      	subs	r2, #1
 8002926:	0652      	lsls	r2, r2, #25
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800292e:	06d2      	lsls	r2, r2, #27
 8002930:	430a      	orrs	r2, r1
 8002932:	4947      	ldr	r1, [pc, #284]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 8002934:	4313      	orrs	r3, r2
 8002936:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002944:	4b42      	ldr	r3, [pc, #264]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a41      	ldr	r2, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff f940 	bl	8001bd4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7ff f93c 	bl	8001bd4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e06e      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x530>
 8002976:	e066      	b.n	8002a46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 800297e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002982:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a31      	ldr	r2, [pc, #196]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002990:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 8002996:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff f918 	bl	8001bd4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f914 	bl	8001bd4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e046      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x580>
 80029c6:	e03e      	b.n	8002a46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e039      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_OscConfig+0x628>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d12c      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d123      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11b      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d113      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	3b01      	subs	r3, #1
 8002a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	019f800c 	.word	0x019f800c

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e11e      	b.n	8002cae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b91      	ldr	r3, [pc, #580]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b8e      	ldr	r3, [pc, #568]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 020f 	bic.w	r2, r3, #15
 8002a86:	498c      	ldr	r1, [pc, #560]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b8a      	ldr	r3, [pc, #552]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e106      	b.n	8002cae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d073      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d129      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab4:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0f4      	b.n	8002cae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ac4:	f000 f99e 	bl	8002e04 <RCC_GetSysClockFreqFromPLLSource>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4a7c      	ldr	r2, [pc, #496]	; (8002cc0 <HAL_RCC_ClockConfig+0x268>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d93f      	bls.n	8002b52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ad2:	4b7a      	ldr	r3, [pc, #488]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d033      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d12f      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002af2:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afa:	4a70      	ldr	r2, [pc, #448]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e024      	b.n	8002b52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0c6      	b.n	8002cae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b20:	4b66      	ldr	r3, [pc, #408]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0be      	b.n	8002cae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b30:	f000 f8ce 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4a61      	ldr	r2, [pc, #388]	; (8002cc0 <HAL_RCC_ClockConfig+0x268>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d909      	bls.n	8002b52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b46:	4a5d      	ldr	r2, [pc, #372]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b52:	4b5a      	ldr	r3, [pc, #360]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4957      	ldr	r1, [pc, #348]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7ff f836 	bl	8001bd4 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7ff f832 	bl	8001bd4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e095      	b.n	8002cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 020c 	and.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1eb      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a42      	ldr	r2, [pc, #264]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bcc:	4a3b      	ldr	r2, [pc, #236]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d105      	bne.n	8002bfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4a32      	ldr	r2, [pc, #200]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d21d      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 020f 	bic.w	r2, r3, #15
 8002c10:	4929      	ldr	r1, [pc, #164]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c18:	f7fe ffdc 	bl	8001bd4 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7fe ffd8 	bl	8001bd4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e03b      	b.n	8002cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x260>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1ed      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4917      	ldr	r1, [pc, #92]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490f      	ldr	r1, [pc, #60]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c82:	f000 f825 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_ClockConfig+0x264>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490c      	ldr	r1, [pc, #48]	; (8002cc4 <HAL_RCC_ClockConfig+0x26c>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x270>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe ff48 	bl	8001b3c <HAL_InitTick>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	04c4b400 	.word	0x04c4b400
 8002cc4:	080097bc 	.word	0x080097bc
 8002cc8:	20000010 	.word	0x20000010
 8002ccc:	20000014 	.word	0x20000014

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	e047      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d102      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf4:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e03e      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d136      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d10c      	bne.n	8002d3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d24:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d2e:	68d2      	ldr	r2, [r2, #12]
 8002d30:	0a12      	lsrs	r2, r2, #8
 8002d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
      break;
 8002d3c:	e00c      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	0a12      	lsrs	r2, r2, #8
 8002d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
      break;
 8002d56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0e5b      	lsrs	r3, r3, #25
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e001      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d78:	693b      	ldr	r3, [r7, #16]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	016e3600 	.word	0x016e3600

08002d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000010 	.word	0x20000010

08002dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db0:	f7ff fff0 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4904      	ldr	r1, [pc, #16]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	080097cc 	.word	0x080097cc

08002dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ddc:	f7ff ffda 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0adb      	lsrs	r3, r3, #11
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4904      	ldr	r1, [pc, #16]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	080097cc 	.word	0x080097cc

08002e04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d10c      	bne.n	8002e42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e32:	68d2      	ldr	r2, [r2, #12]
 8002e34:	0a12      	lsrs	r2, r2, #8
 8002e36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
    break;
 8002e40:	e00c      	b.n	8002e5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	0a12      	lsrs	r2, r2, #8
 8002e50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
    break;
 8002e5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0e5b      	lsrs	r3, r3, #25
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	3301      	adds	r3, #1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e76:	687b      	ldr	r3, [r7, #4]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40021000 	.word	0x40021000
 8002e88:	016e3600 	.word	0x016e3600
 8002e8c:	00f42400 	.word	0x00f42400

08002e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8098 	beq.w	8002fde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb2:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4a3f      	ldr	r2, [pc, #252]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a39      	ldr	r2, [pc, #228]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fe75 	bl	8001bd4 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eec:	e009      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fe fe71 	bl	8001bd4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d902      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	74fb      	strb	r3, [r7, #19]
        break;
 8002f00:	e005      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f02:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ef      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d159      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f14:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01e      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d019      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f5c:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fe31 	bl	8001bd4 <HAL_GetTick>
 8002f72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f74:	e00b      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fe2d 	bl	8001bd4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d902      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ec      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4903      	ldr	r1, [pc, #12]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fb8:	e008      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	74bb      	strb	r3, [r7, #18]
 8002fbe:	e005      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fcc:	7c7b      	ldrb	r3, [r7, #17]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd2:	4ba6      	ldr	r3, [pc, #664]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	4aa5      	ldr	r2, [pc, #660]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fea:	4ba0      	ldr	r3, [pc, #640]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f023 0203 	bic.w	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	499c      	ldr	r1, [pc, #624]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800300c:	4b97      	ldr	r3, [pc, #604]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f023 020c 	bic.w	r2, r3, #12
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4994      	ldr	r1, [pc, #592]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800302e:	4b8f      	ldr	r3, [pc, #572]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	498b      	ldr	r1, [pc, #556]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003050:	4b86      	ldr	r3, [pc, #536]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	4983      	ldr	r1, [pc, #524]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003072:	4b7e      	ldr	r3, [pc, #504]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	497a      	ldr	r1, [pc, #488]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003094:	4b75      	ldr	r3, [pc, #468]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	4972      	ldr	r1, [pc, #456]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030b6:	4b6d      	ldr	r3, [pc, #436]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4969      	ldr	r1, [pc, #420]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030d8:	4b64      	ldr	r3, [pc, #400]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4961      	ldr	r1, [pc, #388]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fa:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	4958      	ldr	r1, [pc, #352]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d015      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	4950      	ldr	r1, [pc, #320]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313a:	d105      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800313c:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a4a      	ldr	r2, [pc, #296]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003146:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003154:	4b45      	ldr	r3, [pc, #276]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	4942      	ldr	r1, [pc, #264]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003172:	d105      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003174:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a3c      	ldr	r2, [pc, #240]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800317e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031aa:	d105      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a2e      	ldr	r2, [pc, #184]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	4926      	ldr	r1, [pc, #152]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e2:	d105      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a20      	ldr	r2, [pc, #128]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4918      	ldr	r1, [pc, #96]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321a:	d105      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a12      	ldr	r2, [pc, #72]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003226:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d015      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	490a      	ldr	r1, [pc, #40]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003252:	d105      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003260:	7cbb      	ldrb	r3, [r7, #18]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e042      	b.n	8003308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fe fa33 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2224      	movs	r2, #36	; 0x24
 800329e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fc50 	bl	8003b58 <UART_SetConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e022      	b.n	8003308 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 ff10 	bl	80040f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 ff97 	bl	8004234 <UART_CheckIdleState>
 8003306:	4603      	mov	r3, r0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003326:	2b20      	cmp	r3, #32
 8003328:	f040 8083 	bne.w	8003432 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_UART_Transmit+0x28>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e07b      	b.n	8003434 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_UART_Transmit+0x3a>
 8003346:	2302      	movs	r3, #2
 8003348:	e074      	b.n	8003434 <HAL_UART_Transmit+0x124>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2221      	movs	r2, #33	; 0x21
 800335e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003362:	f7fe fc37 	bl	8001bd4 <HAL_GetTick>
 8003366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	88fa      	ldrh	r2, [r7, #6]
 8003374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d108      	bne.n	8003394 <HAL_UART_Transmit+0x84>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e003      	b.n	800339c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80033a4:	e02c      	b.n	8003400 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 ff8a 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e039      	b.n	8003434 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3302      	adds	r3, #2
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	e007      	b.n	80033ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1cc      	bne.n	80033a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 ff57 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e006      	b.n	8003434 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
  }
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	2b20      	cmp	r3, #32
 8003452:	d142      	bne.n	80034da <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_UART_Receive_IT+0x24>
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e03b      	b.n	80034dc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_UART_Receive_IT+0x36>
 800346e:	2302      	movs	r3, #2
 8003470:	e034      	b.n	80034dc <HAL_UART_Receive_IT+0xa0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_UART_Receive_IT+0xa8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01f      	beq.n	80034ca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d018      	beq.n	80034ca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	613b      	str	r3, [r7, #16]
   return(result);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	69f9      	ldr	r1, [r7, #28]
 80034bc:	6a3a      	ldr	r2, [r7, #32]
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e6      	bne.n	8003498 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 ffc3 	bl	800445c <UART_Start_Receive_IT>
 80034d6:	4603      	mov	r3, r0
 80034d8:	e000      	b.n	80034dc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034da:	2302      	movs	r3, #2
  }
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40008000 	.word	0x40008000

080034e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b0ba      	sub	sp, #232	; 0xe8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800350e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003512:	f640 030f 	movw	r3, #2063	; 0x80f
 8003516:	4013      	ands	r3, r2
 8003518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800351c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11b      	bne.n	800355c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800353c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 82d6 	beq.w	8003afe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
      }
      return;
 800355a:	e2d0      	b.n	8003afe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800355c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 811f 	beq.w	80037a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003566:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_UART_IRQHandler+0x2b0>)
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_UART_IRQHandler+0x2b4>)
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8112 	beq.w	80037a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d011      	beq.n	80035b0 <HAL_UART_IRQHandler+0xc8>
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d011      	beq.n	80035e0 <HAL_UART_IRQHandler+0xf8>
 80035bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2202      	movs	r2, #2
 80035ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d6:	f043 0204 	orr.w	r2, r3, #4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_UART_IRQHandler+0x128>
 80035ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2204      	movs	r2, #4
 80035fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800361c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003628:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800362c:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_UART_IRQHandler+0x2b0>)
 800362e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2208      	movs	r2, #8
 800363a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003642:	f043 0208 	orr.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <HAL_UART_IRQHandler+0x196>
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00c      	beq.n	800367e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800366c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 823c 	beq.w	8003b02 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04f      	beq.n	8003782 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ffe4 	bl	80046b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d141      	bne.n	800377a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800370c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800372e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800373a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1d9      	bne.n	80036f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d013      	beq.n	8003772 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374e:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <HAL_UART_IRQHandler+0x2b8>)
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fbb0 	bl	8001ebc <HAL_DMA_Abort_IT>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d017      	beq.n	8003792 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800376c:	4610      	mov	r0, r2
 800376e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00f      	b.n	8003792 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9da 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e00b      	b.n	8003792 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9d6 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e007      	b.n	8003792 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9d2 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003790:	e1b7      	b.n	8003b02 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003792:	bf00      	nop
    return;
 8003794:	e1b5      	b.n	8003b02 <HAL_UART_IRQHandler+0x61a>
 8003796:	bf00      	nop
 8003798:	10000001 	.word	0x10000001
 800379c:	04000120 	.word	0x04000120
 80037a0:	0800477d 	.word	0x0800477d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 814a 	bne.w	8003a42 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8143 	beq.w	8003a42 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 813c 	beq.w	8003a42 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2210      	movs	r2, #16
 80037d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	f040 80b5 	bne.w	800394c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8187 	beq.w	8003b06 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003802:	429a      	cmp	r2, r3
 8003804:	f080 817f 	bcs.w	8003b06 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800380e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 8086 	bne.w	8003930 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800384e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800385a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1da      	bne.n	8003824 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800387e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800389a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e1      	bne.n	800386e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e3      	bne.n	80038aa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003900:	f023 0310 	bic.w	r3, r3, #16
 8003904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003912:	65bb      	str	r3, [r7, #88]	; 0x58
 8003914:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e4      	bne.n	80038f0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fa6d 	bl	8001e0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800393c:	b29b      	uxth	r3, r3
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8fb 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800394a:	e0dc      	b.n	8003b06 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003958:	b29b      	uxth	r3, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80ce 	beq.w	8003b0a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800396e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80c9 	beq.w	8003b0a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800398c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800399a:	647b      	str	r3, [r7, #68]	; 0x44
 800399c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e4      	bne.n	8003978 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3308      	adds	r3, #8
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	623b      	str	r3, [r7, #32]
   return(result);
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039d6:	633a      	str	r2, [r7, #48]	; 0x30
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e1      	bne.n	80039ae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0310 	bic.w	r3, r3, #16
 8003a12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e4      	bne.n	80039fe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f880 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a40:	e063      	b.n	8003b0a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <HAL_UART_IRQHandler+0x584>
 8003a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f001 fb27 	bl	80050b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a6a:	e051      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d014      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d03a      	beq.n	8003b0e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
    }
    return;
 8003aa0:	e035      	b.n	8003b0e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x5da>
 8003aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fe74 	bl	80047a8 <UART_EndTransmit_IT>
    return;
 8003ac0:	e026      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x5fa>
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f001 fb00 	bl	80050e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ae0:	e016      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d010      	beq.n	8003b10 <HAL_UART_IRQHandler+0x628>
 8003aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da0c      	bge.n	8003b10 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f001 fae8 	bl	80050cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003afc:	e008      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
      return;
 8003afe:	bf00      	nop
 8003b00:	e006      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
    return;
 8003b02:	bf00      	nop
 8003b04:	e004      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
      return;
 8003b06:	bf00      	nop
 8003b08:	e002      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
      return;
 8003b0a:	bf00      	nop
 8003b0c:	e000      	b.n	8003b10 <HAL_UART_IRQHandler+0x628>
    return;
 8003b0e:	bf00      	nop
  }
}
 8003b10:	37e8      	adds	r7, #232	; 0xe8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop

08003b18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5c:	b08c      	sub	sp, #48	; 0x30
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4bab      	ldr	r3, [pc, #684]	; (8003e34 <UART_SetConfig+0x2dc>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4aa0      	ldr	r2, [pc, #640]	; (8003e38 <UART_SetConfig+0x2e0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f023 010f 	bic.w	r1, r3, #15
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a91      	ldr	r2, [pc, #580]	; (8003e3c <UART_SetConfig+0x2e4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d125      	bne.n	8003c48 <UART_SetConfig+0xf0>
 8003bfc:	4b90      	ldr	r3, [pc, #576]	; (8003e40 <UART_SetConfig+0x2e8>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d81a      	bhi.n	8003c40 <UART_SetConfig+0xe8>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0xb8>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c31 	.word	0x08003c31
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e0d6      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e0d2      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003c30:	2304      	movs	r3, #4
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c36:	e0ce      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3e:	e0ca      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c46:	e0c6      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7d      	ldr	r2, [pc, #500]	; (8003e44 <UART_SetConfig+0x2ec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d138      	bne.n	8003cc4 <UART_SetConfig+0x16c>
 8003c52:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <UART_SetConfig+0x2e8>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	d82d      	bhi.n	8003cbc <UART_SetConfig+0x164>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0x110>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003cbd 	.word	0x08003cbd
 8003c70:	08003cbd 	.word	0x08003cbd
 8003c74:	08003cbd 	.word	0x08003cbd
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cbd 	.word	0x08003cbd
 8003c80:	08003cbd 	.word	0x08003cbd
 8003c84:	08003cbd 	.word	0x08003cbd
 8003c88:	08003ca5 	.word	0x08003ca5
 8003c8c:	08003cbd 	.word	0x08003cbd
 8003c90:	08003cbd 	.word	0x08003cbd
 8003c94:	08003cbd 	.word	0x08003cbd
 8003c98:	08003cb5 	.word	0x08003cb5
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	e098      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e094      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e090      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e08c      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	e088      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5f      	ldr	r2, [pc, #380]	; (8003e48 <UART_SetConfig+0x2f0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d125      	bne.n	8003d1a <UART_SetConfig+0x1c2>
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <UART_SetConfig+0x2e8>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cd8:	2b30      	cmp	r3, #48	; 0x30
 8003cda:	d016      	beq.n	8003d0a <UART_SetConfig+0x1b2>
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d818      	bhi.n	8003d12 <UART_SetConfig+0x1ba>
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d00a      	beq.n	8003cfa <UART_SetConfig+0x1a2>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d814      	bhi.n	8003d12 <UART_SetConfig+0x1ba>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <UART_SetConfig+0x19a>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d008      	beq.n	8003d02 <UART_SetConfig+0x1aa>
 8003cf0:	e00f      	b.n	8003d12 <UART_SetConfig+0x1ba>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf8:	e06d      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d00:	e069      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d02:	2304      	movs	r3, #4
 8003d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d08:	e065      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d10:	e061      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d12:	2310      	movs	r3, #16
 8003d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d18:	e05d      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <UART_SetConfig+0x2f4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d125      	bne.n	8003d70 <UART_SetConfig+0x218>
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <UART_SetConfig+0x2e8>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d30:	d016      	beq.n	8003d60 <UART_SetConfig+0x208>
 8003d32:	2bc0      	cmp	r3, #192	; 0xc0
 8003d34:	d818      	bhi.n	8003d68 <UART_SetConfig+0x210>
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d00a      	beq.n	8003d50 <UART_SetConfig+0x1f8>
 8003d3a:	2b80      	cmp	r3, #128	; 0x80
 8003d3c:	d814      	bhi.n	8003d68 <UART_SetConfig+0x210>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <UART_SetConfig+0x1f0>
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d008      	beq.n	8003d58 <UART_SetConfig+0x200>
 8003d46:	e00f      	b.n	8003d68 <UART_SetConfig+0x210>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4e:	e042      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d50:	2302      	movs	r3, #2
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d56:	e03e      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5e:	e03a      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d60:	2308      	movs	r3, #8
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d66:	e036      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6e:	e032      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a30      	ldr	r2, [pc, #192]	; (8003e38 <UART_SetConfig+0x2e0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d12a      	bne.n	8003dd0 <UART_SetConfig+0x278>
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <UART_SetConfig+0x2e8>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d88:	d01a      	beq.n	8003dc0 <UART_SetConfig+0x268>
 8003d8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d8e:	d81b      	bhi.n	8003dc8 <UART_SetConfig+0x270>
 8003d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d94:	d00c      	beq.n	8003db0 <UART_SetConfig+0x258>
 8003d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9a:	d815      	bhi.n	8003dc8 <UART_SetConfig+0x270>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <UART_SetConfig+0x250>
 8003da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da4:	d008      	beq.n	8003db8 <UART_SetConfig+0x260>
 8003da6:	e00f      	b.n	8003dc8 <UART_SetConfig+0x270>
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e012      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003db0:	2302      	movs	r3, #2
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e00e      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003db8:	2304      	movs	r3, #4
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e00a      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc6:	e006      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dce:	e002      	b.n	8003dd6 <UART_SetConfig+0x27e>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <UART_SetConfig+0x2e0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	f040 80a8 	bne.w	8003f32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d834      	bhi.n	8003e54 <UART_SetConfig+0x2fc>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x298>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e55 	.word	0x08003e55
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e55 	.word	0x08003e55
 8003e00:	08003e23 	.word	0x08003e23
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e55 	.word	0x08003e55
 8003e0c:	08003e55 	.word	0x08003e55
 8003e10:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe ffca 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 8003e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e1a:	e021      	b.n	8003e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <UART_SetConfig+0x2f8>)
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e20:	e01e      	b.n	8003e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe ff55 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e28:	e01a      	b.n	8003e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e30:	e016      	b.n	8003e60 <UART_SetConfig+0x308>
 8003e32:	bf00      	nop
 8003e34:	cfff69f3 	.word	0xcfff69f3
 8003e38:	40008000 	.word	0x40008000
 8003e3c:	40013800 	.word	0x40013800
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40004400 	.word	0x40004400
 8003e48:	40004800 	.word	0x40004800
 8003e4c:	40004c00 	.word	0x40004c00
 8003e50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 812a 	beq.w	80040bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	4a9e      	ldr	r2, [pc, #632]	; (80040e8 <UART_SetConfig+0x590>)
 8003e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d305      	bcc.n	8003e98 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d903      	bls.n	8003ea0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e9e:	e10d      	b.n	80040bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	4a8e      	ldr	r2, [pc, #568]	; (80040e8 <UART_SetConfig+0x590>)
 8003eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ec2:	f7fc feb9 	bl	8000c38 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	020b      	lsls	r3, r1, #8
 8003ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003edc:	0202      	lsls	r2, r0, #8
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	6849      	ldr	r1, [r1, #4]
 8003ee2:	0849      	lsrs	r1, r1, #1
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	4605      	mov	r5, r0
 8003eea:	eb12 0804 	adds.w	r8, r2, r4
 8003eee:	eb43 0905 	adc.w	r9, r3, r5
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	469a      	mov	sl, r3
 8003efa:	4693      	mov	fp, r2
 8003efc:	4652      	mov	r2, sl
 8003efe:	465b      	mov	r3, fp
 8003f00:	4640      	mov	r0, r8
 8003f02:	4649      	mov	r1, r9
 8003f04:	f7fc fe98 	bl	8000c38 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f16:	d308      	bcc.n	8003f2a <UART_SetConfig+0x3d2>
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1e:	d204      	bcs.n	8003f2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	e0c8      	b.n	80040bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f30:	e0c4      	b.n	80040bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3a:	d167      	bne.n	800400c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d828      	bhi.n	8003f96 <UART_SetConfig+0x43e>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x3f4>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f97 	.word	0x08003f97
 8003f64:	08003f97 	.word	0x08003f97
 8003f68:	08003f97 	.word	0x08003f97
 8003f6c:	08003f8f 	.word	0x08003f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7fe ff1c 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f76:	e014      	b.n	8003fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f78:	f7fe ff2e 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f7e:	e010      	b.n	8003fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f80:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <UART_SetConfig+0x594>)
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f84:	e00d      	b.n	8003fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f86:	f7fe fea3 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f8c:	e009      	b.n	8003fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f94:	e005      	b.n	8003fa2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8089 	beq.w	80040bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	4a4e      	ldr	r2, [pc, #312]	; (80040e8 <UART_SetConfig+0x590>)
 8003fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fbc:	005a      	lsls	r2, r3, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	441a      	add	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	d916      	bls.n	8004004 <UART_SetConfig+0x4ac>
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fdc:	d212      	bcs.n	8004004 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f023 030f 	bic.w	r3, r3, #15
 8003fe6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	8bfb      	ldrh	r3, [r7, #30]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	8bfa      	ldrh	r2, [r7, #30]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	e05b      	b.n	80040bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800400a:	e057      	b.n	80040bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800400c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004010:	2b08      	cmp	r3, #8
 8004012:	d828      	bhi.n	8004066 <UART_SetConfig+0x50e>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x4c4>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004041 	.word	0x08004041
 8004020:	08004049 	.word	0x08004049
 8004024:	08004051 	.word	0x08004051
 8004028:	08004067 	.word	0x08004067
 800402c:	08004057 	.word	0x08004057
 8004030:	08004067 	.word	0x08004067
 8004034:	08004067 	.word	0x08004067
 8004038:	08004067 	.word	0x08004067
 800403c:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7fe feb4 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 8004044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004046:	e014      	b.n	8004072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fec6 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b26      	ldr	r3, [pc, #152]	; (80040ec <UART_SetConfig+0x594>)
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004054:	e00d      	b.n	8004072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe fe3b 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 800405a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800405c:	e009      	b.n	8004072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004064:	e005      	b.n	8004072 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004070:	bf00      	nop
    }

    if (pclk != 0U)
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d021      	beq.n	80040bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <UART_SetConfig+0x590>)
 800407e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004082:	461a      	mov	r2, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	fbb3 f2f2 	udiv	r2, r3, r2
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	441a      	add	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2b0f      	cmp	r3, #15
 80040a0:	d909      	bls.n	80040b6 <UART_SetConfig+0x55e>
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d205      	bcs.n	80040b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e002      	b.n	80040bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2201      	movs	r2, #1
 80040c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2200      	movs	r2, #0
 80040d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80040d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3730      	adds	r7, #48	; 0x30
 80040e0:	46bd      	mov	sp, r7
 80040e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e6:	bf00      	nop
 80040e8:	080097d4 	.word	0x080097d4
 80040ec:	00f42400 	.word	0x00f42400

080040f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01a      	beq.n	8004206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ee:	d10a      	bne.n	8004206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  }
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af02      	add	r7, sp, #8
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004244:	f7fd fcc6 	bl	8001bd4 <HAL_GetTick>
 8004248:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d10e      	bne.n	8004276 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f82f 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e025      	b.n	80042c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d10e      	bne.n	80042a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f819 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e00f      	b.n	80042c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b09c      	sub	sp, #112	; 0x70
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042da:	e0a9      	b.n	8004430 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e2:	f000 80a5 	beq.w	8004430 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fd fc75 	bl	8001bd4 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <UART_WaitOnFlagUntilTimeout+0x32>
 80042f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d140      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800430a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004310:	667b      	str	r3, [r7, #100]	; 0x64
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800431a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004320:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e6      	bne.n	80042fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	663b      	str	r3, [r7, #96]	; 0x60
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800434e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004350:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800435c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e069      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d051      	beq.n	8004430 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d149      	bne.n	8004430 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
 80043c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e6      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	613b      	str	r3, [r7, #16]
   return(result);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3308      	adds	r3, #8
 80043f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043f8:	623a      	str	r2, [r7, #32]
 80043fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	6a3a      	ldr	r2, [r7, #32]
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	61bb      	str	r3, [r7, #24]
   return(result);
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e010      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	429a      	cmp	r2, r3
 800444c:	f43f af46 	beq.w	80042dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3770      	adds	r7, #112	; 0x70
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445c:	b480      	push	{r7}
 800445e:	b0a3      	sub	sp, #140	; 0x8c
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d10e      	bne.n	80044ae <UART_Start_Receive_IT+0x52>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <UART_Start_Receive_IT+0x48>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800449e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044a2:	e02d      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	22ff      	movs	r2, #255	; 0xff
 80044a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044ac:	e028      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <UART_Start_Receive_IT+0x76>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <UART_Start_Receive_IT+0x6c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044c6:	e01b      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	227f      	movs	r2, #127	; 0x7f
 80044cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044d0:	e016      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044da:	d10d      	bne.n	80044f8 <UART_Start_Receive_IT+0x9c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <UART_Start_Receive_IT+0x92>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	227f      	movs	r2, #127	; 0x7f
 80044e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044ec:	e008      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	223f      	movs	r2, #63	; 0x3f
 80044f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044f6:	e003      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2222      	movs	r2, #34	; 0x22
 800450c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004534:	673a      	str	r2, [r7, #112]	; 0x70
 8004536:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800453a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e3      	bne.n	8004510 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004550:	d153      	bne.n	80045fa <UART_Start_Receive_IT+0x19e>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	429a      	cmp	r2, r3
 800455c:	d34d      	bcc.n	80045fa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d107      	bne.n	8004578 <UART_Start_Receive_IT+0x11c>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d103      	bne.n	8004578 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a4b      	ldr	r2, [pc, #300]	; (80046a0 <UART_Start_Receive_IT+0x244>)
 8004574:	671a      	str	r2, [r3, #112]	; 0x70
 8004576:	e002      	b.n	800457e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <UART_Start_Receive_IT+0x248>)
 800457c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01a      	beq.n	80045c4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e4      	bne.n	800458e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3308      	adds	r3, #8
 80045e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80045e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_Start_Receive_IT+0x168>
 80045f8:	e04a      	b.n	8004690 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d107      	bne.n	8004614 <UART_Start_Receive_IT+0x1b8>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <UART_Start_Receive_IT+0x24c>)
 8004610:	671a      	str	r2, [r3, #112]	; 0x70
 8004612:	e002      	b.n	800461a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a25      	ldr	r2, [pc, #148]	; (80046ac <UART_Start_Receive_IT+0x250>)
 8004618:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800463e:	677b      	str	r3, [r7, #116]	; 0x74
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800464e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_Start_Receive_IT+0x1ce>
 800465c:	e018      	b.n	8004690 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	613b      	str	r3, [r7, #16]
   return(result);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	67bb      	str	r3, [r7, #120]	; 0x78
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	69f9      	ldr	r1, [r7, #28]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	61bb      	str	r3, [r7, #24]
   return(result);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	378c      	adds	r7, #140	; 0x8c
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	08004db9 	.word	0x08004db9
 80046a4:	08004ac1 	.word	0x08004ac1
 80046a8:	0800495f 	.word	0x0800495f
 80046ac:	080047ff 	.word	0x080047ff

080046b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b095      	sub	sp, #84	; 0x54
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d6:	643b      	str	r3, [r7, #64]	; 0x40
 80046d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e6      	bne.n	80046b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3308      	adds	r3, #8
 800470c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e3      	bne.n	80046ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d118      	bne.n	800475c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	60bb      	str	r3, [r7, #8]
   return(result);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f023 0310 	bic.w	r3, r3, #16
 800473e:	647b      	str	r3, [r7, #68]	; 0x44
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6979      	ldr	r1, [r7, #20]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	613b      	str	r3, [r7, #16]
   return(result);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e6      	bne.n	800472a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004770:	bf00      	nop
 8004772:	3754      	adds	r7, #84	; 0x54
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff f9c6 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6979      	ldr	r1, [r7, #20]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	613b      	str	r3, [r7, #16]
   return(result);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e6      	bne.n	80047b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff f991 	bl	8003b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f6:	bf00      	nop
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b096      	sub	sp, #88	; 0x58
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800480c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	2b22      	cmp	r3, #34	; 0x22
 8004818:	f040 8095 	bne.w	8004946 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004826:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800482a:	b2d9      	uxtb	r1, r3
 800482c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004830:	b2da      	uxtb	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	400a      	ands	r2, r1
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d178      	bne.n	8004956 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004878:	653b      	str	r3, [r7, #80]	; 0x50
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004882:	647b      	str	r3, [r7, #68]	; 0x44
 8004884:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e6      	bne.n	8004864 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3308      	adds	r3, #8
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	623b      	str	r3, [r7, #32]
   return(result);
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b6:	633a      	str	r2, [r7, #48]	; 0x30
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d12e      	bne.n	800493e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	69b9      	ldr	r1, [r7, #24]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	617b      	str	r3, [r7, #20]
   return(result);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d103      	bne.n	800492e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2210      	movs	r2, #16
 800492c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff f902 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800493c:	e00b      	b.n	8004956 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fc fe9e 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 8004944:	e007      	b.n	8004956 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699a      	ldr	r2, [r3, #24]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0208 	orr.w	r2, r2, #8
 8004954:	619a      	str	r2, [r3, #24]
}
 8004956:	bf00      	nop
 8004958:	3758      	adds	r7, #88	; 0x58
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b096      	sub	sp, #88	; 0x58
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800496c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	2b22      	cmp	r3, #34	; 0x22
 8004978:	f040 8095 	bne.w	8004aa6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800498c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004990:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004994:	4013      	ands	r3, r2
 8004996:	b29a      	uxth	r2, r3
 8004998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d178      	bne.n	8004ab6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40
 80049e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e6      	bne.n	80049c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3308      	adds	r3, #8
 8004a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e5      	bne.n	80049f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d12e      	bne.n	8004a9e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0310 	bic.w	r3, r3, #16
 8004a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6979      	ldr	r1, [r7, #20]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	613b      	str	r3, [r7, #16]
   return(result);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d103      	bne.n	8004a8e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2210      	movs	r2, #16
 8004a8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff f852 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a9c:	e00b      	b.n	8004ab6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fdee 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 8004aa4:	e007      	b.n	8004ab6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0208 	orr.w	r2, r2, #8
 8004ab4:	619a      	str	r2, [r3, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	3758      	adds	r7, #88	; 0x58
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b0a6      	sub	sp, #152	; 0x98
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ace:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	2b22      	cmp	r3, #34	; 0x22
 8004af8:	f040 814f 	bne.w	8004d9a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b02:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b06:	e0f6      	b.n	8004cf6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b12:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004b16:	b2d9      	uxtb	r1, r3
 8004b18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	400a      	ands	r2, r1
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d053      	beq.n	8004c02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d011      	beq.n	8004bba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb0:	f043 0204 	orr.w	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d011      	beq.n	8004bea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	f043 0202 	orr.w	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fe ff99 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d173      	bne.n	8004cf6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c32:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004c36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e4      	bne.n	8004c0e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c68:	657a      	str	r2, [r7, #84]	; 0x54
 8004c6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e3      	bne.n	8004c44 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d12e      	bne.n	8004cf0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	f023 0310 	bic.w	r3, r3, #16
 8004cac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e6      	bne.n	8004c98 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d103      	bne.n	8004ce0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fe ff29 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
 8004cee:	e002      	b.n	8004cf6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc fcc5 	bl	8001680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8004cfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f47f aefe 	bne.w	8004b08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004d16:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d045      	beq.n	8004daa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d23e      	bcs.n	8004daa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d42:	673b      	str	r3, [r7, #112]	; 0x70
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004d64:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f043 0320 	orr.w	r3, r3, #32
 8004d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6979      	ldr	r1, [r7, #20]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	613b      	str	r3, [r7, #16]
   return(result);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e6      	bne.n	8004d66 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d98:	e007      	b.n	8004daa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0208 	orr.w	r2, r2, #8
 8004da8:	619a      	str	r2, [r3, #24]
}
 8004daa:	bf00      	nop
 8004dac:	3798      	adds	r7, #152	; 0x98
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	080047ff 	.word	0x080047ff

08004db8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b0a8      	sub	sp, #160	; 0xa0
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004dc6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	2b22      	cmp	r3, #34	; 0x22
 8004df0:	f040 8153 	bne.w	800509a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004dfa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dfe:	e0fa      	b.n	8004ff6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8004e12:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004e16:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d053      	beq.n	8004efe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2201      	movs	r2, #1
 8004e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7c:	f043 0201 	orr.w	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d011      	beq.n	8004eb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eac:	f043 0204 	orr.w	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d011      	beq.n	8004ee6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004edc:	f043 0202 	orr.w	r2, r3, #2
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fe fe1b 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d175      	bne.n	8004ff6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f2e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e4      	bne.n	8004f0a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3308      	adds	r3, #8
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f68:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e1      	bne.n	8004f40 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d12e      	bne.n	8004ff0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	f023 0310 	bic.w	r3, r3, #16
 8004fac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e6      	bne.n	8004f98 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d103      	bne.n	8004fe0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2210      	movs	r2, #16
 8004fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fe fda9 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
 8004fee:	e002      	b.n	8004ff6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fc fb45 	bl	8001680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ff6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d006      	beq.n	800500c <UART_RxISR_16BIT_FIFOEN+0x254>
 8004ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	f47f aefa 	bne.w	8004e00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005012:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005016:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800501a:	2b00      	cmp	r3, #0
 800501c:	d045      	beq.n	80050aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005024:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005028:	429a      	cmp	r2, r3
 800502a:	d23e      	bcs.n	80050aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	623b      	str	r3, [r7, #32]
   return(result);
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005042:	677b      	str	r3, [r7, #116]	; 0x74
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3308      	adds	r3, #8
 800504a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800504c:	633a      	str	r2, [r7, #48]	; 0x30
 800504e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e5      	bne.n	800502c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005064:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	60fb      	str	r3, [r7, #12]
   return(result);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f043 0320 	orr.w	r3, r3, #32
 800507a:	673b      	str	r3, [r7, #112]	; 0x70
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	617b      	str	r3, [r7, #20]
   return(result);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e6      	bne.n	8005066 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005098:	e007      	b.n	80050aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0208 	orr.w	r2, r2, #8
 80050a8:	619a      	str	r2, [r3, #24]
}
 80050aa:	bf00      	nop
 80050ac:	37a0      	adds	r7, #160	; 0xa0
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	0800495f 	.word	0x0800495f

080050b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UARTEx_DisableFifoMode+0x16>
 8005106:	2302      	movs	r3, #2
 8005108:	e027      	b.n	800515a <HAL_UARTEx_DisableFifoMode+0x66>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2224      	movs	r2, #36	; 0x24
 8005116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005138:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800517a:	2302      	movs	r3, #2
 800517c:	e02d      	b.n	80051da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2224      	movs	r2, #36	; 0x24
 800518a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f850 	bl	8005260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e02d      	b.n	8005256 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2224      	movs	r2, #36	; 0x24
 8005206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f812 	bl	8005260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005280:	e031      	b.n	80052e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005282:	2308      	movs	r3, #8
 8005284:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005286:	2308      	movs	r3, #8
 8005288:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	0e5b      	lsrs	r3, r3, #25
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	0f5b      	lsrs	r3, r3, #29
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052aa:	7bbb      	ldrb	r3, [r7, #14]
 80052ac:	7b3a      	ldrb	r2, [r7, #12]
 80052ae:	4911      	ldr	r1, [pc, #68]	; (80052f4 <UARTEx_SetNbDataToProcess+0x94>)
 80052b0:	5c8a      	ldrb	r2, [r1, r2]
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052b6:	7b3a      	ldrb	r2, [r7, #12]
 80052b8:	490f      	ldr	r1, [pc, #60]	; (80052f8 <UARTEx_SetNbDataToProcess+0x98>)
 80052ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	7b7a      	ldrb	r2, [r7, #13]
 80052cc:	4909      	ldr	r1, [pc, #36]	; (80052f4 <UARTEx_SetNbDataToProcess+0x94>)
 80052ce:	5c8a      	ldrb	r2, [r1, r2]
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052d4:	7b7a      	ldrb	r2, [r7, #13]
 80052d6:	4908      	ldr	r1, [pc, #32]	; (80052f8 <UARTEx_SetNbDataToProcess+0x98>)
 80052d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052da:	fb93 f3f2 	sdiv	r3, r3, r2
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	080097ec 	.word	0x080097ec
 80052f8:	080097f4 	.word	0x080097f4

080052fc <atof>:
 80052fc:	2100      	movs	r1, #0
 80052fe:	f001 baf5 	b.w	80068ec <strtod>
	...

08005304 <__errno>:
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <__errno+0x8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	2000001c 	.word	0x2000001c

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4d0d      	ldr	r5, [pc, #52]	; (8005348 <__libc_init_array+0x38>)
 8005314:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005316:	1b64      	subs	r4, r4, r5
 8005318:	10a4      	asrs	r4, r4, #2
 800531a:	2600      	movs	r6, #0
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	4d0b      	ldr	r5, [pc, #44]	; (8005350 <__libc_init_array+0x40>)
 8005322:	4c0c      	ldr	r4, [pc, #48]	; (8005354 <__libc_init_array+0x44>)
 8005324:	f004 fa00 	bl	8009728 <_init>
 8005328:	1b64      	subs	r4, r4, r5
 800532a:	10a4      	asrs	r4, r4, #2
 800532c:	2600      	movs	r6, #0
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f855 3b04 	ldr.w	r3, [r5], #4
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	08009ca4 	.word	0x08009ca4
 800534c:	08009ca4 	.word	0x08009ca4
 8005350:	08009ca4 	.word	0x08009ca4
 8005354:	08009ca8 	.word	0x08009ca8

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <__cvt>:
 8005368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	ec55 4b10 	vmov	r4, r5, d0
 8005370:	2d00      	cmp	r5, #0
 8005372:	460e      	mov	r6, r1
 8005374:	4619      	mov	r1, r3
 8005376:	462b      	mov	r3, r5
 8005378:	bfbb      	ittet	lt
 800537a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800537e:	461d      	movlt	r5, r3
 8005380:	2300      	movge	r3, #0
 8005382:	232d      	movlt	r3, #45	; 0x2d
 8005384:	700b      	strb	r3, [r1, #0]
 8005386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005388:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800538c:	4691      	mov	r9, r2
 800538e:	f023 0820 	bic.w	r8, r3, #32
 8005392:	bfbc      	itt	lt
 8005394:	4622      	movlt	r2, r4
 8005396:	4614      	movlt	r4, r2
 8005398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800539c:	d005      	beq.n	80053aa <__cvt+0x42>
 800539e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053a2:	d100      	bne.n	80053a6 <__cvt+0x3e>
 80053a4:	3601      	adds	r6, #1
 80053a6:	2102      	movs	r1, #2
 80053a8:	e000      	b.n	80053ac <__cvt+0x44>
 80053aa:	2103      	movs	r1, #3
 80053ac:	ab03      	add	r3, sp, #12
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	ab02      	add	r3, sp, #8
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	ec45 4b10 	vmov	d0, r4, r5
 80053b8:	4653      	mov	r3, sl
 80053ba:	4632      	mov	r2, r6
 80053bc:	f001 fb30 	bl	8006a20 <_dtoa_r>
 80053c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053c4:	4607      	mov	r7, r0
 80053c6:	d102      	bne.n	80053ce <__cvt+0x66>
 80053c8:	f019 0f01 	tst.w	r9, #1
 80053cc:	d022      	beq.n	8005414 <__cvt+0xac>
 80053ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053d2:	eb07 0906 	add.w	r9, r7, r6
 80053d6:	d110      	bne.n	80053fa <__cvt+0x92>
 80053d8:	783b      	ldrb	r3, [r7, #0]
 80053da:	2b30      	cmp	r3, #48	; 0x30
 80053dc:	d10a      	bne.n	80053f4 <__cvt+0x8c>
 80053de:	2200      	movs	r2, #0
 80053e0:	2300      	movs	r3, #0
 80053e2:	4620      	mov	r0, r4
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fb fb97 	bl	8000b18 <__aeabi_dcmpeq>
 80053ea:	b918      	cbnz	r0, 80053f4 <__cvt+0x8c>
 80053ec:	f1c6 0601 	rsb	r6, r6, #1
 80053f0:	f8ca 6000 	str.w	r6, [sl]
 80053f4:	f8da 3000 	ldr.w	r3, [sl]
 80053f8:	4499      	add	r9, r3
 80053fa:	2200      	movs	r2, #0
 80053fc:	2300      	movs	r3, #0
 80053fe:	4620      	mov	r0, r4
 8005400:	4629      	mov	r1, r5
 8005402:	f7fb fb89 	bl	8000b18 <__aeabi_dcmpeq>
 8005406:	b108      	cbz	r0, 800540c <__cvt+0xa4>
 8005408:	f8cd 900c 	str.w	r9, [sp, #12]
 800540c:	2230      	movs	r2, #48	; 0x30
 800540e:	9b03      	ldr	r3, [sp, #12]
 8005410:	454b      	cmp	r3, r9
 8005412:	d307      	bcc.n	8005424 <__cvt+0xbc>
 8005414:	9b03      	ldr	r3, [sp, #12]
 8005416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005418:	1bdb      	subs	r3, r3, r7
 800541a:	4638      	mov	r0, r7
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	b004      	add	sp, #16
 8005420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005424:	1c59      	adds	r1, r3, #1
 8005426:	9103      	str	r1, [sp, #12]
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e7f0      	b.n	800540e <__cvt+0xa6>

0800542c <__exponent>:
 800542c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542e:	4603      	mov	r3, r0
 8005430:	2900      	cmp	r1, #0
 8005432:	bfb8      	it	lt
 8005434:	4249      	neglt	r1, r1
 8005436:	f803 2b02 	strb.w	r2, [r3], #2
 800543a:	bfb4      	ite	lt
 800543c:	222d      	movlt	r2, #45	; 0x2d
 800543e:	222b      	movge	r2, #43	; 0x2b
 8005440:	2909      	cmp	r1, #9
 8005442:	7042      	strb	r2, [r0, #1]
 8005444:	dd2a      	ble.n	800549c <__exponent+0x70>
 8005446:	f10d 0407 	add.w	r4, sp, #7
 800544a:	46a4      	mov	ip, r4
 800544c:	270a      	movs	r7, #10
 800544e:	46a6      	mov	lr, r4
 8005450:	460a      	mov	r2, r1
 8005452:	fb91 f6f7 	sdiv	r6, r1, r7
 8005456:	fb07 1516 	mls	r5, r7, r6, r1
 800545a:	3530      	adds	r5, #48	; 0x30
 800545c:	2a63      	cmp	r2, #99	; 0x63
 800545e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005462:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005466:	4631      	mov	r1, r6
 8005468:	dcf1      	bgt.n	800544e <__exponent+0x22>
 800546a:	3130      	adds	r1, #48	; 0x30
 800546c:	f1ae 0502 	sub.w	r5, lr, #2
 8005470:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005474:	1c44      	adds	r4, r0, #1
 8005476:	4629      	mov	r1, r5
 8005478:	4561      	cmp	r1, ip
 800547a:	d30a      	bcc.n	8005492 <__exponent+0x66>
 800547c:	f10d 0209 	add.w	r2, sp, #9
 8005480:	eba2 020e 	sub.w	r2, r2, lr
 8005484:	4565      	cmp	r5, ip
 8005486:	bf88      	it	hi
 8005488:	2200      	movhi	r2, #0
 800548a:	4413      	add	r3, r2
 800548c:	1a18      	subs	r0, r3, r0
 800548e:	b003      	add	sp, #12
 8005490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005496:	f804 2f01 	strb.w	r2, [r4, #1]!
 800549a:	e7ed      	b.n	8005478 <__exponent+0x4c>
 800549c:	2330      	movs	r3, #48	; 0x30
 800549e:	3130      	adds	r1, #48	; 0x30
 80054a0:	7083      	strb	r3, [r0, #2]
 80054a2:	70c1      	strb	r1, [r0, #3]
 80054a4:	1d03      	adds	r3, r0, #4
 80054a6:	e7f1      	b.n	800548c <__exponent+0x60>

080054a8 <_printf_float>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	ed2d 8b02 	vpush	{d8}
 80054b0:	b08d      	sub	sp, #52	; 0x34
 80054b2:	460c      	mov	r4, r1
 80054b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054b8:	4616      	mov	r6, r2
 80054ba:	461f      	mov	r7, r3
 80054bc:	4605      	mov	r5, r0
 80054be:	f002 fc0d 	bl	8007cdc <_localeconv_r>
 80054c2:	f8d0 a000 	ldr.w	sl, [r0]
 80054c6:	4650      	mov	r0, sl
 80054c8:	f7fa feaa 	bl	8000220 <strlen>
 80054cc:	2300      	movs	r3, #0
 80054ce:	930a      	str	r3, [sp, #40]	; 0x28
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	f8d8 3000 	ldr.w	r3, [r8]
 80054d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80054dc:	3307      	adds	r3, #7
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	f103 0208 	add.w	r2, r3, #8
 80054e6:	f8c8 2000 	str.w	r2, [r8]
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80054f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005500:	ee08 0a10 	vmov	s16, r0
 8005504:	4b9f      	ldr	r3, [pc, #636]	; (8005784 <_printf_float+0x2dc>)
 8005506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800550a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800550e:	f7fb fb35 	bl	8000b7c <__aeabi_dcmpun>
 8005512:	bb88      	cbnz	r0, 8005578 <_printf_float+0xd0>
 8005514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005518:	4b9a      	ldr	r3, [pc, #616]	; (8005784 <_printf_float+0x2dc>)
 800551a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800551e:	f7fb fb0f 	bl	8000b40 <__aeabi_dcmple>
 8005522:	bb48      	cbnz	r0, 8005578 <_printf_float+0xd0>
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	4640      	mov	r0, r8
 800552a:	4649      	mov	r1, r9
 800552c:	f7fb fafe 	bl	8000b2c <__aeabi_dcmplt>
 8005530:	b110      	cbz	r0, 8005538 <_printf_float+0x90>
 8005532:	232d      	movs	r3, #45	; 0x2d
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	4b93      	ldr	r3, [pc, #588]	; (8005788 <_printf_float+0x2e0>)
 800553a:	4894      	ldr	r0, [pc, #592]	; (800578c <_printf_float+0x2e4>)
 800553c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005540:	bf94      	ite	ls
 8005542:	4698      	movls	r8, r3
 8005544:	4680      	movhi	r8, r0
 8005546:	2303      	movs	r3, #3
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	9b05      	ldr	r3, [sp, #20]
 800554c:	f023 0204 	bic.w	r2, r3, #4
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	f04f 0900 	mov.w	r9, #0
 8005556:	9700      	str	r7, [sp, #0]
 8005558:	4633      	mov	r3, r6
 800555a:	aa0b      	add	r2, sp, #44	; 0x2c
 800555c:	4621      	mov	r1, r4
 800555e:	4628      	mov	r0, r5
 8005560:	f000 f9d8 	bl	8005914 <_printf_common>
 8005564:	3001      	adds	r0, #1
 8005566:	f040 8090 	bne.w	800568a <_printf_float+0x1e2>
 800556a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800556e:	b00d      	add	sp, #52	; 0x34
 8005570:	ecbd 8b02 	vpop	{d8}
 8005574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	4640      	mov	r0, r8
 800557e:	4649      	mov	r1, r9
 8005580:	f7fb fafc 	bl	8000b7c <__aeabi_dcmpun>
 8005584:	b140      	cbz	r0, 8005598 <_printf_float+0xf0>
 8005586:	464b      	mov	r3, r9
 8005588:	2b00      	cmp	r3, #0
 800558a:	bfbc      	itt	lt
 800558c:	232d      	movlt	r3, #45	; 0x2d
 800558e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005592:	487f      	ldr	r0, [pc, #508]	; (8005790 <_printf_float+0x2e8>)
 8005594:	4b7f      	ldr	r3, [pc, #508]	; (8005794 <_printf_float+0x2ec>)
 8005596:	e7d1      	b.n	800553c <_printf_float+0x94>
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800559e:	9206      	str	r2, [sp, #24]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	d13f      	bne.n	8005624 <_printf_float+0x17c>
 80055a4:	2306      	movs	r3, #6
 80055a6:	6063      	str	r3, [r4, #4]
 80055a8:	9b05      	ldr	r3, [sp, #20]
 80055aa:	6861      	ldr	r1, [r4, #4]
 80055ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055b0:	2300      	movs	r3, #0
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	ab0a      	add	r3, sp, #40	; 0x28
 80055b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80055ba:	ab09      	add	r3, sp, #36	; 0x24
 80055bc:	ec49 8b10 	vmov	d0, r8, r9
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055c8:	4628      	mov	r0, r5
 80055ca:	f7ff fecd 	bl	8005368 <__cvt>
 80055ce:	9b06      	ldr	r3, [sp, #24]
 80055d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055d2:	2b47      	cmp	r3, #71	; 0x47
 80055d4:	4680      	mov	r8, r0
 80055d6:	d108      	bne.n	80055ea <_printf_float+0x142>
 80055d8:	1cc8      	adds	r0, r1, #3
 80055da:	db02      	blt.n	80055e2 <_printf_float+0x13a>
 80055dc:	6863      	ldr	r3, [r4, #4]
 80055de:	4299      	cmp	r1, r3
 80055e0:	dd41      	ble.n	8005666 <_printf_float+0x1be>
 80055e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80055e6:	fa5f fb8b 	uxtb.w	fp, fp
 80055ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055ee:	d820      	bhi.n	8005632 <_printf_float+0x18a>
 80055f0:	3901      	subs	r1, #1
 80055f2:	465a      	mov	r2, fp
 80055f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055f8:	9109      	str	r1, [sp, #36]	; 0x24
 80055fa:	f7ff ff17 	bl	800542c <__exponent>
 80055fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005600:	1813      	adds	r3, r2, r0
 8005602:	2a01      	cmp	r2, #1
 8005604:	4681      	mov	r9, r0
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	dc02      	bgt.n	8005610 <_printf_float+0x168>
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	07d2      	lsls	r2, r2, #31
 800560e:	d501      	bpl.n	8005614 <_printf_float+0x16c>
 8005610:	3301      	adds	r3, #1
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005618:	2b00      	cmp	r3, #0
 800561a:	d09c      	beq.n	8005556 <_printf_float+0xae>
 800561c:	232d      	movs	r3, #45	; 0x2d
 800561e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005622:	e798      	b.n	8005556 <_printf_float+0xae>
 8005624:	9a06      	ldr	r2, [sp, #24]
 8005626:	2a47      	cmp	r2, #71	; 0x47
 8005628:	d1be      	bne.n	80055a8 <_printf_float+0x100>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1bc      	bne.n	80055a8 <_printf_float+0x100>
 800562e:	2301      	movs	r3, #1
 8005630:	e7b9      	b.n	80055a6 <_printf_float+0xfe>
 8005632:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005636:	d118      	bne.n	800566a <_printf_float+0x1c2>
 8005638:	2900      	cmp	r1, #0
 800563a:	6863      	ldr	r3, [r4, #4]
 800563c:	dd0b      	ble.n	8005656 <_printf_float+0x1ae>
 800563e:	6121      	str	r1, [r4, #16]
 8005640:	b913      	cbnz	r3, 8005648 <_printf_float+0x1a0>
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	07d0      	lsls	r0, r2, #31
 8005646:	d502      	bpl.n	800564e <_printf_float+0x1a6>
 8005648:	3301      	adds	r3, #1
 800564a:	440b      	add	r3, r1
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005650:	f04f 0900 	mov.w	r9, #0
 8005654:	e7de      	b.n	8005614 <_printf_float+0x16c>
 8005656:	b913      	cbnz	r3, 800565e <_printf_float+0x1b6>
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	07d2      	lsls	r2, r2, #31
 800565c:	d501      	bpl.n	8005662 <_printf_float+0x1ba>
 800565e:	3302      	adds	r3, #2
 8005660:	e7f4      	b.n	800564c <_printf_float+0x1a4>
 8005662:	2301      	movs	r3, #1
 8005664:	e7f2      	b.n	800564c <_printf_float+0x1a4>
 8005666:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566c:	4299      	cmp	r1, r3
 800566e:	db05      	blt.n	800567c <_printf_float+0x1d4>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	6121      	str	r1, [r4, #16]
 8005674:	07d8      	lsls	r0, r3, #31
 8005676:	d5ea      	bpl.n	800564e <_printf_float+0x1a6>
 8005678:	1c4b      	adds	r3, r1, #1
 800567a:	e7e7      	b.n	800564c <_printf_float+0x1a4>
 800567c:	2900      	cmp	r1, #0
 800567e:	bfd4      	ite	le
 8005680:	f1c1 0202 	rsble	r2, r1, #2
 8005684:	2201      	movgt	r2, #1
 8005686:	4413      	add	r3, r2
 8005688:	e7e0      	b.n	800564c <_printf_float+0x1a4>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	055a      	lsls	r2, r3, #21
 800568e:	d407      	bmi.n	80056a0 <_printf_float+0x1f8>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	4642      	mov	r2, r8
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	d12c      	bne.n	80056f8 <_printf_float+0x250>
 800569e:	e764      	b.n	800556a <_printf_float+0xc2>
 80056a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056a4:	f240 80e0 	bls.w	8005868 <_printf_float+0x3c0>
 80056a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	f7fb fa32 	bl	8000b18 <__aeabi_dcmpeq>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d034      	beq.n	8005722 <_printf_float+0x27a>
 80056b8:	4a37      	ldr	r2, [pc, #220]	; (8005798 <_printf_float+0x2f0>)
 80056ba:	2301      	movs	r3, #1
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f af51 	beq.w	800556a <_printf_float+0xc2>
 80056c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056cc:	429a      	cmp	r2, r3
 80056ce:	db02      	blt.n	80056d6 <_printf_float+0x22e>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	07d8      	lsls	r0, r3, #31
 80056d4:	d510      	bpl.n	80056f8 <_printf_float+0x250>
 80056d6:	ee18 3a10 	vmov	r3, s16
 80056da:	4652      	mov	r2, sl
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	f43f af41 	beq.w	800556a <_printf_float+0xc2>
 80056e8:	f04f 0800 	mov.w	r8, #0
 80056ec:	f104 091a 	add.w	r9, r4, #26
 80056f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	4543      	cmp	r3, r8
 80056f6:	dc09      	bgt.n	800570c <_printf_float+0x264>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	079b      	lsls	r3, r3, #30
 80056fc:	f100 8105 	bmi.w	800590a <_printf_float+0x462>
 8005700:	68e0      	ldr	r0, [r4, #12]
 8005702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005704:	4298      	cmp	r0, r3
 8005706:	bfb8      	it	lt
 8005708:	4618      	movlt	r0, r3
 800570a:	e730      	b.n	800556e <_printf_float+0xc6>
 800570c:	2301      	movs	r3, #1
 800570e:	464a      	mov	r2, r9
 8005710:	4631      	mov	r1, r6
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	f43f af27 	beq.w	800556a <_printf_float+0xc2>
 800571c:	f108 0801 	add.w	r8, r8, #1
 8005720:	e7e6      	b.n	80056f0 <_printf_float+0x248>
 8005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	dc39      	bgt.n	800579c <_printf_float+0x2f4>
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <_printf_float+0x2f0>)
 800572a:	2301      	movs	r3, #1
 800572c:	4631      	mov	r1, r6
 800572e:	4628      	mov	r0, r5
 8005730:	47b8      	blx	r7
 8005732:	3001      	adds	r0, #1
 8005734:	f43f af19 	beq.w	800556a <_printf_float+0xc2>
 8005738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800573c:	4313      	orrs	r3, r2
 800573e:	d102      	bne.n	8005746 <_printf_float+0x29e>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07d9      	lsls	r1, r3, #31
 8005744:	d5d8      	bpl.n	80056f8 <_printf_float+0x250>
 8005746:	ee18 3a10 	vmov	r3, s16
 800574a:	4652      	mov	r2, sl
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f af09 	beq.w	800556a <_printf_float+0xc2>
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	f104 0a1a 	add.w	sl, r4, #26
 8005760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005762:	425b      	negs	r3, r3
 8005764:	454b      	cmp	r3, r9
 8005766:	dc01      	bgt.n	800576c <_printf_float+0x2c4>
 8005768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800576a:	e792      	b.n	8005692 <_printf_float+0x1ea>
 800576c:	2301      	movs	r3, #1
 800576e:	4652      	mov	r2, sl
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f aef7 	beq.w	800556a <_printf_float+0xc2>
 800577c:	f109 0901 	add.w	r9, r9, #1
 8005780:	e7ee      	b.n	8005760 <_printf_float+0x2b8>
 8005782:	bf00      	nop
 8005784:	7fefffff 	.word	0x7fefffff
 8005788:	08009800 	.word	0x08009800
 800578c:	08009804 	.word	0x08009804
 8005790:	0800980c 	.word	0x0800980c
 8005794:	08009808 	.word	0x08009808
 8005798:	08009810 	.word	0x08009810
 800579c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800579e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057a0:	429a      	cmp	r2, r3
 80057a2:	bfa8      	it	ge
 80057a4:	461a      	movge	r2, r3
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	4691      	mov	r9, r2
 80057aa:	dc37      	bgt.n	800581c <_printf_float+0x374>
 80057ac:	f04f 0b00 	mov.w	fp, #0
 80057b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057b4:	f104 021a 	add.w	r2, r4, #26
 80057b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057ba:	9305      	str	r3, [sp, #20]
 80057bc:	eba3 0309 	sub.w	r3, r3, r9
 80057c0:	455b      	cmp	r3, fp
 80057c2:	dc33      	bgt.n	800582c <_printf_float+0x384>
 80057c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c8:	429a      	cmp	r2, r3
 80057ca:	db3b      	blt.n	8005844 <_printf_float+0x39c>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	07da      	lsls	r2, r3, #31
 80057d0:	d438      	bmi.n	8005844 <_printf_float+0x39c>
 80057d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d4:	9a05      	ldr	r2, [sp, #20]
 80057d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057d8:	1a9a      	subs	r2, r3, r2
 80057da:	eba3 0901 	sub.w	r9, r3, r1
 80057de:	4591      	cmp	r9, r2
 80057e0:	bfa8      	it	ge
 80057e2:	4691      	movge	r9, r2
 80057e4:	f1b9 0f00 	cmp.w	r9, #0
 80057e8:	dc35      	bgt.n	8005856 <_printf_float+0x3ae>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f2:	f104 0a1a 	add.w	sl, r4, #26
 80057f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	eba3 0309 	sub.w	r3, r3, r9
 8005800:	4543      	cmp	r3, r8
 8005802:	f77f af79 	ble.w	80056f8 <_printf_float+0x250>
 8005806:	2301      	movs	r3, #1
 8005808:	4652      	mov	r2, sl
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f aeaa 	beq.w	800556a <_printf_float+0xc2>
 8005816:	f108 0801 	add.w	r8, r8, #1
 800581a:	e7ec      	b.n	80057f6 <_printf_float+0x34e>
 800581c:	4613      	mov	r3, r2
 800581e:	4631      	mov	r1, r6
 8005820:	4642      	mov	r2, r8
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	d1c0      	bne.n	80057ac <_printf_float+0x304>
 800582a:	e69e      	b.n	800556a <_printf_float+0xc2>
 800582c:	2301      	movs	r3, #1
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	9205      	str	r2, [sp, #20]
 8005834:	47b8      	blx	r7
 8005836:	3001      	adds	r0, #1
 8005838:	f43f ae97 	beq.w	800556a <_printf_float+0xc2>
 800583c:	9a05      	ldr	r2, [sp, #20]
 800583e:	f10b 0b01 	add.w	fp, fp, #1
 8005842:	e7b9      	b.n	80057b8 <_printf_float+0x310>
 8005844:	ee18 3a10 	vmov	r3, s16
 8005848:	4652      	mov	r2, sl
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	d1be      	bne.n	80057d2 <_printf_float+0x32a>
 8005854:	e689      	b.n	800556a <_printf_float+0xc2>
 8005856:	9a05      	ldr	r2, [sp, #20]
 8005858:	464b      	mov	r3, r9
 800585a:	4442      	add	r2, r8
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	d1c1      	bne.n	80057ea <_printf_float+0x342>
 8005866:	e680      	b.n	800556a <_printf_float+0xc2>
 8005868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800586a:	2a01      	cmp	r2, #1
 800586c:	dc01      	bgt.n	8005872 <_printf_float+0x3ca>
 800586e:	07db      	lsls	r3, r3, #31
 8005870:	d538      	bpl.n	80058e4 <_printf_float+0x43c>
 8005872:	2301      	movs	r3, #1
 8005874:	4642      	mov	r2, r8
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	f43f ae74 	beq.w	800556a <_printf_float+0xc2>
 8005882:	ee18 3a10 	vmov	r3, s16
 8005886:	4652      	mov	r2, sl
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f ae6b 	beq.w	800556a <_printf_float+0xc2>
 8005894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005898:	2200      	movs	r2, #0
 800589a:	2300      	movs	r3, #0
 800589c:	f7fb f93c 	bl	8000b18 <__aeabi_dcmpeq>
 80058a0:	b9d8      	cbnz	r0, 80058da <_printf_float+0x432>
 80058a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a4:	f108 0201 	add.w	r2, r8, #1
 80058a8:	3b01      	subs	r3, #1
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	d10e      	bne.n	80058d2 <_printf_float+0x42a>
 80058b4:	e659      	b.n	800556a <_printf_float+0xc2>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f ae52 	beq.w	800556a <_printf_float+0xc2>
 80058c6:	f108 0801 	add.w	r8, r8, #1
 80058ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058cc:	3b01      	subs	r3, #1
 80058ce:	4543      	cmp	r3, r8
 80058d0:	dcf1      	bgt.n	80058b6 <_printf_float+0x40e>
 80058d2:	464b      	mov	r3, r9
 80058d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058d8:	e6dc      	b.n	8005694 <_printf_float+0x1ec>
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	f104 0a1a 	add.w	sl, r4, #26
 80058e2:	e7f2      	b.n	80058ca <_printf_float+0x422>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4642      	mov	r2, r8
 80058e8:	e7df      	b.n	80058aa <_printf_float+0x402>
 80058ea:	2301      	movs	r3, #1
 80058ec:	464a      	mov	r2, r9
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	f43f ae38 	beq.w	800556a <_printf_float+0xc2>
 80058fa:	f108 0801 	add.w	r8, r8, #1
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005902:	1a5b      	subs	r3, r3, r1
 8005904:	4543      	cmp	r3, r8
 8005906:	dcf0      	bgt.n	80058ea <_printf_float+0x442>
 8005908:	e6fa      	b.n	8005700 <_printf_float+0x258>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	f104 0919 	add.w	r9, r4, #25
 8005912:	e7f4      	b.n	80058fe <_printf_float+0x456>

08005914 <_printf_common>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	4616      	mov	r6, r2
 800591a:	4699      	mov	r9, r3
 800591c:	688a      	ldr	r2, [r1, #8]
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005924:	4293      	cmp	r3, r2
 8005926:	bfb8      	it	lt
 8005928:	4613      	movlt	r3, r2
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005930:	4607      	mov	r7, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b10a      	cbz	r2, 800593a <_printf_common+0x26>
 8005936:	3301      	adds	r3, #1
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	6833      	ldrmi	r3, [r6, #0]
 8005942:	3302      	addmi	r3, #2
 8005944:	6033      	strmi	r3, [r6, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	f015 0506 	ands.w	r5, r5, #6
 800594c:	d106      	bne.n	800595c <_printf_common+0x48>
 800594e:	f104 0a19 	add.w	sl, r4, #25
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	42ab      	cmp	r3, r5
 800595a:	dc26      	bgt.n	80059aa <_printf_common+0x96>
 800595c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005960:	1e13      	subs	r3, r2, #0
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	2301      	movne	r3, #1
 8005968:	0692      	lsls	r2, r2, #26
 800596a:	d42b      	bmi.n	80059c4 <_printf_common+0xb0>
 800596c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005970:	4649      	mov	r1, r9
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	3001      	adds	r0, #1
 8005978:	d01e      	beq.n	80059b8 <_printf_common+0xa4>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	68e5      	ldr	r5, [r4, #12]
 800597e:	6832      	ldr	r2, [r6, #0]
 8005980:	f003 0306 	and.w	r3, r3, #6
 8005984:	2b04      	cmp	r3, #4
 8005986:	bf08      	it	eq
 8005988:	1aad      	subeq	r5, r5, r2
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	bf0c      	ite	eq
 8005990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005994:	2500      	movne	r5, #0
 8005996:	4293      	cmp	r3, r2
 8005998:	bfc4      	itt	gt
 800599a:	1a9b      	subgt	r3, r3, r2
 800599c:	18ed      	addgt	r5, r5, r3
 800599e:	2600      	movs	r6, #0
 80059a0:	341a      	adds	r4, #26
 80059a2:	42b5      	cmp	r5, r6
 80059a4:	d11a      	bne.n	80059dc <_printf_common+0xc8>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e008      	b.n	80059bc <_printf_common+0xa8>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4652      	mov	r2, sl
 80059ae:	4649      	mov	r1, r9
 80059b0:	4638      	mov	r0, r7
 80059b2:	47c0      	blx	r8
 80059b4:	3001      	adds	r0, #1
 80059b6:	d103      	bne.n	80059c0 <_printf_common+0xac>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	3501      	adds	r5, #1
 80059c2:	e7c6      	b.n	8005952 <_printf_common+0x3e>
 80059c4:	18e1      	adds	r1, r4, r3
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	2030      	movs	r0, #48	; 0x30
 80059ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ce:	4422      	add	r2, r4
 80059d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d8:	3302      	adds	r3, #2
 80059da:	e7c7      	b.n	800596c <_printf_common+0x58>
 80059dc:	2301      	movs	r3, #1
 80059de:	4622      	mov	r2, r4
 80059e0:	4649      	mov	r1, r9
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0e6      	beq.n	80059b8 <_printf_common+0xa4>
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7d9      	b.n	80059a2 <_printf_common+0x8e>
	...

080059f0 <_printf_i>:
 80059f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	7e0f      	ldrb	r7, [r1, #24]
 80059f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f8:	2f78      	cmp	r7, #120	; 0x78
 80059fa:	4691      	mov	r9, r2
 80059fc:	4680      	mov	r8, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	469a      	mov	sl, r3
 8005a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a06:	d807      	bhi.n	8005a18 <_printf_i+0x28>
 8005a08:	2f62      	cmp	r7, #98	; 0x62
 8005a0a:	d80a      	bhi.n	8005a22 <_printf_i+0x32>
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	f000 80d8 	beq.w	8005bc2 <_printf_i+0x1d2>
 8005a12:	2f58      	cmp	r7, #88	; 0x58
 8005a14:	f000 80a3 	beq.w	8005b5e <_printf_i+0x16e>
 8005a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a20:	e03a      	b.n	8005a98 <_printf_i+0xa8>
 8005a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a26:	2b15      	cmp	r3, #21
 8005a28:	d8f6      	bhi.n	8005a18 <_printf_i+0x28>
 8005a2a:	a101      	add	r1, pc, #4	; (adr r1, 8005a30 <_printf_i+0x40>)
 8005a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a19 	.word	0x08005a19
 8005a3c:	08005a19 	.word	0x08005a19
 8005a40:	08005a19 	.word	0x08005a19
 8005a44:	08005a19 	.word	0x08005a19
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a19 	.word	0x08005a19
 8005a50:	08005a19 	.word	0x08005a19
 8005a54:	08005a19 	.word	0x08005a19
 8005a58:	08005a19 	.word	0x08005a19
 8005a5c:	08005ba9 	.word	0x08005ba9
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005b8b 	.word	0x08005b8b
 8005a68:	08005a19 	.word	0x08005a19
 8005a6c:	08005a19 	.word	0x08005a19
 8005a70:	08005bcb 	.word	0x08005bcb
 8005a74:	08005a19 	.word	0x08005a19
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a19 	.word	0x08005a19
 8005a80:	08005a19 	.word	0x08005a19
 8005a84:	08005b93 	.word	0x08005b93
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	1d1a      	adds	r2, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	602a      	str	r2, [r5, #0]
 8005a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0a3      	b.n	8005be4 <_printf_i+0x1f4>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	6829      	ldr	r1, [r5, #0]
 8005aa0:	0606      	lsls	r6, r0, #24
 8005aa2:	f101 0304 	add.w	r3, r1, #4
 8005aa6:	d50a      	bpl.n	8005abe <_printf_i+0xce>
 8005aa8:	680e      	ldr	r6, [r1, #0]
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	da03      	bge.n	8005ab8 <_printf_i+0xc8>
 8005ab0:	232d      	movs	r3, #45	; 0x2d
 8005ab2:	4276      	negs	r6, r6
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	485e      	ldr	r0, [pc, #376]	; (8005c34 <_printf_i+0x244>)
 8005aba:	230a      	movs	r3, #10
 8005abc:	e019      	b.n	8005af2 <_printf_i+0x102>
 8005abe:	680e      	ldr	r6, [r1, #0]
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ac6:	bf18      	it	ne
 8005ac8:	b236      	sxthne	r6, r6
 8005aca:	e7ef      	b.n	8005aac <_printf_i+0xbc>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	6029      	str	r1, [r5, #0]
 8005ad4:	0601      	lsls	r1, r0, #24
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0xec>
 8005ad8:	681e      	ldr	r6, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <_printf_i+0xf2>
 8005adc:	0646      	lsls	r6, r0, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0xe8>
 8005ae0:	881e      	ldrh	r6, [r3, #0]
 8005ae2:	4854      	ldr	r0, [pc, #336]	; (8005c34 <_printf_i+0x244>)
 8005ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2308      	moveq	r3, #8
 8005aea:	230a      	movne	r3, #10
 8005aec:	2100      	movs	r1, #0
 8005aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af2:	6865      	ldr	r5, [r4, #4]
 8005af4:	60a5      	str	r5, [r4, #8]
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	bfa2      	ittt	ge
 8005afa:	6821      	ldrge	r1, [r4, #0]
 8005afc:	f021 0104 	bicge.w	r1, r1, #4
 8005b00:	6021      	strge	r1, [r4, #0]
 8005b02:	b90e      	cbnz	r6, 8005b08 <_printf_i+0x118>
 8005b04:	2d00      	cmp	r5, #0
 8005b06:	d04d      	beq.n	8005ba4 <_printf_i+0x1b4>
 8005b08:	4615      	mov	r5, r2
 8005b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b12:	5dc7      	ldrb	r7, [r0, r7]
 8005b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b18:	4637      	mov	r7, r6
 8005b1a:	42bb      	cmp	r3, r7
 8005b1c:	460e      	mov	r6, r1
 8005b1e:	d9f4      	bls.n	8005b0a <_printf_i+0x11a>
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d10b      	bne.n	8005b3c <_printf_i+0x14c>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07de      	lsls	r6, r3, #31
 8005b28:	d508      	bpl.n	8005b3c <_printf_i+0x14c>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	bfde      	ittt	le
 8005b32:	2330      	movle	r3, #48	; 0x30
 8005b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b3c:	1b52      	subs	r2, r2, r5
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	f8cd a000 	str.w	sl, [sp]
 8005b44:	464b      	mov	r3, r9
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fee2 	bl	8005914 <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14c      	bne.n	8005bee <_printf_i+0x1fe>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b58:	b004      	add	sp, #16
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	4835      	ldr	r0, [pc, #212]	; (8005c34 <_printf_i+0x244>)
 8005b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b64:	6829      	ldr	r1, [r5, #0]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b6c:	6029      	str	r1, [r5, #0]
 8005b6e:	061d      	lsls	r5, r3, #24
 8005b70:	d514      	bpl.n	8005b9c <_printf_i+0x1ac>
 8005b72:	07df      	lsls	r7, r3, #31
 8005b74:	bf44      	itt	mi
 8005b76:	f043 0320 	orrmi.w	r3, r3, #32
 8005b7a:	6023      	strmi	r3, [r4, #0]
 8005b7c:	b91e      	cbnz	r6, 8005b86 <_printf_i+0x196>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f023 0320 	bic.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	2310      	movs	r3, #16
 8005b88:	e7b0      	b.n	8005aec <_printf_i+0xfc>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2378      	movs	r3, #120	; 0x78
 8005b94:	4828      	ldr	r0, [pc, #160]	; (8005c38 <_printf_i+0x248>)
 8005b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b9a:	e7e3      	b.n	8005b64 <_printf_i+0x174>
 8005b9c:	0659      	lsls	r1, r3, #25
 8005b9e:	bf48      	it	mi
 8005ba0:	b2b6      	uxthmi	r6, r6
 8005ba2:	e7e6      	b.n	8005b72 <_printf_i+0x182>
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	e7bb      	b.n	8005b20 <_printf_i+0x130>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	6826      	ldr	r6, [r4, #0]
 8005bac:	6961      	ldr	r1, [r4, #20]
 8005bae:	1d18      	adds	r0, r3, #4
 8005bb0:	6028      	str	r0, [r5, #0]
 8005bb2:	0635      	lsls	r5, r6, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1cc>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1d2>
 8005bbc:	0670      	lsls	r0, r6, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1c8>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	e7ba      	b.n	8005b40 <_printf_i+0x150>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	602a      	str	r2, [r5, #0]
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7fa fb2a 	bl	8000230 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1f2>
 8005bde:	1b40      	subs	r0, r0, r5
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	e7a8      	b.n	8005b40 <_printf_i+0x150>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ab      	beq.n	8005b54 <_printf_i+0x164>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x23a>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a4      	b.n	8005b58 <_printf_i+0x168>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09b      	beq.n	8005b54 <_printf_i+0x164>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x21e>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x212>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x22e>
 8005c32:	bf00      	nop
 8005c34:	08009812 	.word	0x08009812
 8005c38:	08009823 	.word	0x08009823

08005c3c <siprintf>:
 8005c3c:	b40e      	push	{r1, r2, r3}
 8005c3e:	b500      	push	{lr}
 8005c40:	b09c      	sub	sp, #112	; 0x70
 8005c42:	ab1d      	add	r3, sp, #116	; 0x74
 8005c44:	9002      	str	r0, [sp, #8]
 8005c46:	9006      	str	r0, [sp, #24]
 8005c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c4c:	4809      	ldr	r0, [pc, #36]	; (8005c74 <siprintf+0x38>)
 8005c4e:	9107      	str	r1, [sp, #28]
 8005c50:	9104      	str	r1, [sp, #16]
 8005c52:	4909      	ldr	r1, [pc, #36]	; (8005c78 <siprintf+0x3c>)
 8005c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c58:	9105      	str	r1, [sp, #20]
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	a902      	add	r1, sp, #8
 8005c60:	f002 fe7c 	bl	800895c <_svfiprintf_r>
 8005c64:	9b02      	ldr	r3, [sp, #8]
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	b01c      	add	sp, #112	; 0x70
 8005c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c70:	b003      	add	sp, #12
 8005c72:	4770      	bx	lr
 8005c74:	2000001c 	.word	0x2000001c
 8005c78:	ffff0208 	.word	0xffff0208

08005c7c <strncmp>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	b17a      	cbz	r2, 8005ca0 <strncmp+0x24>
 8005c80:	4603      	mov	r3, r0
 8005c82:	3901      	subs	r1, #1
 8005c84:	1884      	adds	r4, r0, r2
 8005c86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005c8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005c8e:	4290      	cmp	r0, r2
 8005c90:	d101      	bne.n	8005c96 <strncmp+0x1a>
 8005c92:	42a3      	cmp	r3, r4
 8005c94:	d101      	bne.n	8005c9a <strncmp+0x1e>
 8005c96:	1a80      	subs	r0, r0, r2
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d1f3      	bne.n	8005c86 <strncmp+0xa>
 8005c9e:	e7fa      	b.n	8005c96 <strncmp+0x1a>
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	e7f9      	b.n	8005c98 <strncmp+0x1c>

08005ca4 <sulp>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	460d      	mov	r5, r1
 8005caa:	ec45 4b10 	vmov	d0, r4, r5
 8005cae:	4616      	mov	r6, r2
 8005cb0:	f002 fbb2 	bl	8008418 <__ulp>
 8005cb4:	ec51 0b10 	vmov	r0, r1, d0
 8005cb8:	b17e      	cbz	r6, 8005cda <sulp+0x36>
 8005cba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005cbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dd09      	ble.n	8005cda <sulp+0x36>
 8005cc6:	051b      	lsls	r3, r3, #20
 8005cc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ccc:	2400      	movs	r4, #0
 8005cce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	f7fa fcb7 	bl	8000648 <__aeabi_dmul>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	0000      	movs	r0, r0
	...

08005ce0 <_strtod_l>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	ed2d 8b02 	vpush	{d8}
 8005ce8:	b09d      	sub	sp, #116	; 0x74
 8005cea:	461f      	mov	r7, r3
 8005cec:	2300      	movs	r3, #0
 8005cee:	9318      	str	r3, [sp, #96]	; 0x60
 8005cf0:	4ba2      	ldr	r3, [pc, #648]	; (8005f7c <_strtod_l+0x29c>)
 8005cf2:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	4688      	mov	r8, r1
 8005cfe:	f7fa fa8f 	bl	8000220 <strlen>
 8005d02:	f04f 0a00 	mov.w	sl, #0
 8005d06:	4605      	mov	r5, r0
 8005d08:	f04f 0b00 	mov.w	fp, #0
 8005d0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d12:	781a      	ldrb	r2, [r3, #0]
 8005d14:	2a2b      	cmp	r2, #43	; 0x2b
 8005d16:	d04e      	beq.n	8005db6 <_strtod_l+0xd6>
 8005d18:	d83b      	bhi.n	8005d92 <_strtod_l+0xb2>
 8005d1a:	2a0d      	cmp	r2, #13
 8005d1c:	d834      	bhi.n	8005d88 <_strtod_l+0xa8>
 8005d1e:	2a08      	cmp	r2, #8
 8005d20:	d834      	bhi.n	8005d8c <_strtod_l+0xac>
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	d03e      	beq.n	8005da4 <_strtod_l+0xc4>
 8005d26:	2300      	movs	r3, #0
 8005d28:	930a      	str	r3, [sp, #40]	; 0x28
 8005d2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005d2c:	7833      	ldrb	r3, [r6, #0]
 8005d2e:	2b30      	cmp	r3, #48	; 0x30
 8005d30:	f040 80b0 	bne.w	8005e94 <_strtod_l+0x1b4>
 8005d34:	7873      	ldrb	r3, [r6, #1]
 8005d36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d3a:	2b58      	cmp	r3, #88	; 0x58
 8005d3c:	d168      	bne.n	8005e10 <_strtod_l+0x130>
 8005d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	ab18      	add	r3, sp, #96	; 0x60
 8005d44:	9702      	str	r7, [sp, #8]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4a8d      	ldr	r2, [pc, #564]	; (8005f80 <_strtod_l+0x2a0>)
 8005d4a:	ab19      	add	r3, sp, #100	; 0x64
 8005d4c:	a917      	add	r1, sp, #92	; 0x5c
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f001 fcbc 	bl	80076cc <__gethex>
 8005d54:	f010 0707 	ands.w	r7, r0, #7
 8005d58:	4605      	mov	r5, r0
 8005d5a:	d005      	beq.n	8005d68 <_strtod_l+0x88>
 8005d5c:	2f06      	cmp	r7, #6
 8005d5e:	d12c      	bne.n	8005dba <_strtod_l+0xda>
 8005d60:	3601      	adds	r6, #1
 8005d62:	2300      	movs	r3, #0
 8005d64:	9617      	str	r6, [sp, #92]	; 0x5c
 8005d66:	930a      	str	r3, [sp, #40]	; 0x28
 8005d68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f040 8590 	bne.w	8006890 <_strtod_l+0xbb0>
 8005d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d72:	b1eb      	cbz	r3, 8005db0 <_strtod_l+0xd0>
 8005d74:	4652      	mov	r2, sl
 8005d76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d7a:	ec43 2b10 	vmov	d0, r2, r3
 8005d7e:	b01d      	add	sp, #116	; 0x74
 8005d80:	ecbd 8b02 	vpop	{d8}
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d88:	2a20      	cmp	r2, #32
 8005d8a:	d1cc      	bne.n	8005d26 <_strtod_l+0x46>
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d90:	e7be      	b.n	8005d10 <_strtod_l+0x30>
 8005d92:	2a2d      	cmp	r2, #45	; 0x2d
 8005d94:	d1c7      	bne.n	8005d26 <_strtod_l+0x46>
 8005d96:	2201      	movs	r2, #1
 8005d98:	920a      	str	r2, [sp, #40]	; 0x28
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1c2      	bne.n	8005d2a <_strtod_l+0x4a>
 8005da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005da6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 856e 	bne.w	800688c <_strtod_l+0xbac>
 8005db0:	4652      	mov	r2, sl
 8005db2:	465b      	mov	r3, fp
 8005db4:	e7e1      	b.n	8005d7a <_strtod_l+0x9a>
 8005db6:	2200      	movs	r2, #0
 8005db8:	e7ee      	b.n	8005d98 <_strtod_l+0xb8>
 8005dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005dbc:	b13a      	cbz	r2, 8005dce <_strtod_l+0xee>
 8005dbe:	2135      	movs	r1, #53	; 0x35
 8005dc0:	a81a      	add	r0, sp, #104	; 0x68
 8005dc2:	f002 fc34 	bl	800862e <__copybits>
 8005dc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f001 fff3 	bl	8007db4 <_Bfree>
 8005dce:	3f01      	subs	r7, #1
 8005dd0:	2f04      	cmp	r7, #4
 8005dd2:	d806      	bhi.n	8005de2 <_strtod_l+0x102>
 8005dd4:	e8df f007 	tbb	[pc, r7]
 8005dd8:	1714030a 	.word	0x1714030a
 8005ddc:	0a          	.byte	0x0a
 8005ddd:	00          	.byte	0x00
 8005dde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005de2:	0728      	lsls	r0, r5, #28
 8005de4:	d5c0      	bpl.n	8005d68 <_strtod_l+0x88>
 8005de6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005dea:	e7bd      	b.n	8005d68 <_strtod_l+0x88>
 8005dec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005df6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005dfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005dfe:	e7f0      	b.n	8005de2 <_strtod_l+0x102>
 8005e00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005f84 <_strtod_l+0x2a4>
 8005e04:	e7ed      	b.n	8005de2 <_strtod_l+0x102>
 8005e06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005e0a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005e0e:	e7e8      	b.n	8005de2 <_strtod_l+0x102>
 8005e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d0f9      	beq.n	8005e10 <_strtod_l+0x130>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0a3      	beq.n	8005d68 <_strtod_l+0x88>
 8005e20:	2301      	movs	r3, #1
 8005e22:	f04f 0900 	mov.w	r9, #0
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e2a:	9308      	str	r3, [sp, #32]
 8005e2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e30:	464f      	mov	r7, r9
 8005e32:	220a      	movs	r2, #10
 8005e34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005e36:	7806      	ldrb	r6, [r0, #0]
 8005e38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005e3c:	b2d9      	uxtb	r1, r3
 8005e3e:	2909      	cmp	r1, #9
 8005e40:	d92a      	bls.n	8005e98 <_strtod_l+0x1b8>
 8005e42:	9905      	ldr	r1, [sp, #20]
 8005e44:	462a      	mov	r2, r5
 8005e46:	f7ff ff19 	bl	8005c7c <strncmp>
 8005e4a:	b398      	cbz	r0, 8005eb4 <_strtod_l+0x1d4>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	4632      	mov	r2, r6
 8005e50:	463d      	mov	r5, r7
 8005e52:	9005      	str	r0, [sp, #20]
 8005e54:	4603      	mov	r3, r0
 8005e56:	2a65      	cmp	r2, #101	; 0x65
 8005e58:	d001      	beq.n	8005e5e <_strtod_l+0x17e>
 8005e5a:	2a45      	cmp	r2, #69	; 0x45
 8005e5c:	d118      	bne.n	8005e90 <_strtod_l+0x1b0>
 8005e5e:	b91d      	cbnz	r5, 8005e68 <_strtod_l+0x188>
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	4302      	orrs	r2, r0
 8005e64:	d09e      	beq.n	8005da4 <_strtod_l+0xc4>
 8005e66:	2500      	movs	r5, #0
 8005e68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005e6c:	f108 0201 	add.w	r2, r8, #1
 8005e70:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005e76:	2a2b      	cmp	r2, #43	; 0x2b
 8005e78:	d075      	beq.n	8005f66 <_strtod_l+0x286>
 8005e7a:	2a2d      	cmp	r2, #45	; 0x2d
 8005e7c:	d07b      	beq.n	8005f76 <_strtod_l+0x296>
 8005e7e:	f04f 0c00 	mov.w	ip, #0
 8005e82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e86:	2909      	cmp	r1, #9
 8005e88:	f240 8082 	bls.w	8005f90 <_strtod_l+0x2b0>
 8005e8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e90:	2600      	movs	r6, #0
 8005e92:	e09d      	b.n	8005fd0 <_strtod_l+0x2f0>
 8005e94:	2300      	movs	r3, #0
 8005e96:	e7c4      	b.n	8005e22 <_strtod_l+0x142>
 8005e98:	2f08      	cmp	r7, #8
 8005e9a:	bfd8      	it	le
 8005e9c:	9907      	ldrle	r1, [sp, #28]
 8005e9e:	f100 0001 	add.w	r0, r0, #1
 8005ea2:	bfda      	itte	le
 8005ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ea8:	9307      	strle	r3, [sp, #28]
 8005eaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005eae:	3701      	adds	r7, #1
 8005eb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005eb2:	e7bf      	b.n	8005e34 <_strtod_l+0x154>
 8005eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eb6:	195a      	adds	r2, r3, r5
 8005eb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005eba:	5d5a      	ldrb	r2, [r3, r5]
 8005ebc:	2f00      	cmp	r7, #0
 8005ebe:	d037      	beq.n	8005f30 <_strtod_l+0x250>
 8005ec0:	9005      	str	r0, [sp, #20]
 8005ec2:	463d      	mov	r5, r7
 8005ec4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005ec8:	2b09      	cmp	r3, #9
 8005eca:	d912      	bls.n	8005ef2 <_strtod_l+0x212>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e7c2      	b.n	8005e56 <_strtod_l+0x176>
 8005ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ed6:	785a      	ldrb	r2, [r3, #1]
 8005ed8:	3001      	adds	r0, #1
 8005eda:	2a30      	cmp	r2, #48	; 0x30
 8005edc:	d0f8      	beq.n	8005ed0 <_strtod_l+0x1f0>
 8005ede:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	f200 84d9 	bhi.w	800689a <_strtod_l+0xbba>
 8005ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eea:	9005      	str	r0, [sp, #20]
 8005eec:	2000      	movs	r0, #0
 8005eee:	9308      	str	r3, [sp, #32]
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	3a30      	subs	r2, #48	; 0x30
 8005ef4:	f100 0301 	add.w	r3, r0, #1
 8005ef8:	d014      	beq.n	8005f24 <_strtod_l+0x244>
 8005efa:	9905      	ldr	r1, [sp, #20]
 8005efc:	4419      	add	r1, r3
 8005efe:	9105      	str	r1, [sp, #20]
 8005f00:	462b      	mov	r3, r5
 8005f02:	eb00 0e05 	add.w	lr, r0, r5
 8005f06:	210a      	movs	r1, #10
 8005f08:	4573      	cmp	r3, lr
 8005f0a:	d113      	bne.n	8005f34 <_strtod_l+0x254>
 8005f0c:	182b      	adds	r3, r5, r0
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	f105 0501 	add.w	r5, r5, #1
 8005f14:	4405      	add	r5, r0
 8005f16:	dc1c      	bgt.n	8005f52 <_strtod_l+0x272>
 8005f18:	9907      	ldr	r1, [sp, #28]
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	fb03 2301 	mla	r3, r3, r1, r2
 8005f20:	9307      	str	r3, [sp, #28]
 8005f22:	2300      	movs	r3, #0
 8005f24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f26:	1c51      	adds	r1, r2, #1
 8005f28:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f2a:	7852      	ldrb	r2, [r2, #1]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	e7c9      	b.n	8005ec4 <_strtod_l+0x1e4>
 8005f30:	4638      	mov	r0, r7
 8005f32:	e7d2      	b.n	8005eda <_strtod_l+0x1fa>
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	dc04      	bgt.n	8005f42 <_strtod_l+0x262>
 8005f38:	9e07      	ldr	r6, [sp, #28]
 8005f3a:	434e      	muls	r6, r1
 8005f3c:	9607      	str	r6, [sp, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	e7e2      	b.n	8005f08 <_strtod_l+0x228>
 8005f42:	f103 0c01 	add.w	ip, r3, #1
 8005f46:	f1bc 0f10 	cmp.w	ip, #16
 8005f4a:	bfd8      	it	le
 8005f4c:	fb01 f909 	mulle.w	r9, r1, r9
 8005f50:	e7f5      	b.n	8005f3e <_strtod_l+0x25e>
 8005f52:	2d10      	cmp	r5, #16
 8005f54:	bfdc      	itt	le
 8005f56:	230a      	movle	r3, #10
 8005f58:	fb03 2909 	mlale	r9, r3, r9, r2
 8005f5c:	e7e1      	b.n	8005f22 <_strtod_l+0x242>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9305      	str	r3, [sp, #20]
 8005f62:	2301      	movs	r3, #1
 8005f64:	e77c      	b.n	8005e60 <_strtod_l+0x180>
 8005f66:	f04f 0c00 	mov.w	ip, #0
 8005f6a:	f108 0202 	add.w	r2, r8, #2
 8005f6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005f74:	e785      	b.n	8005e82 <_strtod_l+0x1a2>
 8005f76:	f04f 0c01 	mov.w	ip, #1
 8005f7a:	e7f6      	b.n	8005f6a <_strtod_l+0x28a>
 8005f7c:	08009980 	.word	0x08009980
 8005f80:	08009834 	.word	0x08009834
 8005f84:	7ff00000 	.word	0x7ff00000
 8005f88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f8a:	1c51      	adds	r1, r2, #1
 8005f8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f8e:	7852      	ldrb	r2, [r2, #1]
 8005f90:	2a30      	cmp	r2, #48	; 0x30
 8005f92:	d0f9      	beq.n	8005f88 <_strtod_l+0x2a8>
 8005f94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005f98:	2908      	cmp	r1, #8
 8005f9a:	f63f af79 	bhi.w	8005e90 <_strtod_l+0x1b0>
 8005f9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005fa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fa4:	9206      	str	r2, [sp, #24]
 8005fa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fa8:	1c51      	adds	r1, r2, #1
 8005faa:	9117      	str	r1, [sp, #92]	; 0x5c
 8005fac:	7852      	ldrb	r2, [r2, #1]
 8005fae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005fb2:	2e09      	cmp	r6, #9
 8005fb4:	d937      	bls.n	8006026 <_strtod_l+0x346>
 8005fb6:	9e06      	ldr	r6, [sp, #24]
 8005fb8:	1b89      	subs	r1, r1, r6
 8005fba:	2908      	cmp	r1, #8
 8005fbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005fc0:	dc02      	bgt.n	8005fc8 <_strtod_l+0x2e8>
 8005fc2:	4576      	cmp	r6, lr
 8005fc4:	bfa8      	it	ge
 8005fc6:	4676      	movge	r6, lr
 8005fc8:	f1bc 0f00 	cmp.w	ip, #0
 8005fcc:	d000      	beq.n	8005fd0 <_strtod_l+0x2f0>
 8005fce:	4276      	negs	r6, r6
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	d14d      	bne.n	8006070 <_strtod_l+0x390>
 8005fd4:	9904      	ldr	r1, [sp, #16]
 8005fd6:	4301      	orrs	r1, r0
 8005fd8:	f47f aec6 	bne.w	8005d68 <_strtod_l+0x88>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f47f aee1 	bne.w	8005da4 <_strtod_l+0xc4>
 8005fe2:	2a69      	cmp	r2, #105	; 0x69
 8005fe4:	d027      	beq.n	8006036 <_strtod_l+0x356>
 8005fe6:	dc24      	bgt.n	8006032 <_strtod_l+0x352>
 8005fe8:	2a49      	cmp	r2, #73	; 0x49
 8005fea:	d024      	beq.n	8006036 <_strtod_l+0x356>
 8005fec:	2a4e      	cmp	r2, #78	; 0x4e
 8005fee:	f47f aed9 	bne.w	8005da4 <_strtod_l+0xc4>
 8005ff2:	499f      	ldr	r1, [pc, #636]	; (8006270 <_strtod_l+0x590>)
 8005ff4:	a817      	add	r0, sp, #92	; 0x5c
 8005ff6:	f001 fdc1 	bl	8007b7c <__match>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f43f aed2 	beq.w	8005da4 <_strtod_l+0xc4>
 8006000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b28      	cmp	r3, #40	; 0x28
 8006006:	d12d      	bne.n	8006064 <_strtod_l+0x384>
 8006008:	499a      	ldr	r1, [pc, #616]	; (8006274 <_strtod_l+0x594>)
 800600a:	aa1a      	add	r2, sp, #104	; 0x68
 800600c:	a817      	add	r0, sp, #92	; 0x5c
 800600e:	f001 fdc9 	bl	8007ba4 <__hexnan>
 8006012:	2805      	cmp	r0, #5
 8006014:	d126      	bne.n	8006064 <_strtod_l+0x384>
 8006016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006018:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800601c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006020:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006024:	e6a0      	b.n	8005d68 <_strtod_l+0x88>
 8006026:	210a      	movs	r1, #10
 8006028:	fb01 2e0e 	mla	lr, r1, lr, r2
 800602c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006030:	e7b9      	b.n	8005fa6 <_strtod_l+0x2c6>
 8006032:	2a6e      	cmp	r2, #110	; 0x6e
 8006034:	e7db      	b.n	8005fee <_strtod_l+0x30e>
 8006036:	4990      	ldr	r1, [pc, #576]	; (8006278 <_strtod_l+0x598>)
 8006038:	a817      	add	r0, sp, #92	; 0x5c
 800603a:	f001 fd9f 	bl	8007b7c <__match>
 800603e:	2800      	cmp	r0, #0
 8006040:	f43f aeb0 	beq.w	8005da4 <_strtod_l+0xc4>
 8006044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006046:	498d      	ldr	r1, [pc, #564]	; (800627c <_strtod_l+0x59c>)
 8006048:	3b01      	subs	r3, #1
 800604a:	a817      	add	r0, sp, #92	; 0x5c
 800604c:	9317      	str	r3, [sp, #92]	; 0x5c
 800604e:	f001 fd95 	bl	8007b7c <__match>
 8006052:	b910      	cbnz	r0, 800605a <_strtod_l+0x37a>
 8006054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006056:	3301      	adds	r3, #1
 8006058:	9317      	str	r3, [sp, #92]	; 0x5c
 800605a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800628c <_strtod_l+0x5ac>
 800605e:	f04f 0a00 	mov.w	sl, #0
 8006062:	e681      	b.n	8005d68 <_strtod_l+0x88>
 8006064:	4886      	ldr	r0, [pc, #536]	; (8006280 <_strtod_l+0x5a0>)
 8006066:	f002 fd7b 	bl	8008b60 <nan>
 800606a:	ec5b ab10 	vmov	sl, fp, d0
 800606e:	e67b      	b.n	8005d68 <_strtod_l+0x88>
 8006070:	9b05      	ldr	r3, [sp, #20]
 8006072:	9807      	ldr	r0, [sp, #28]
 8006074:	1af3      	subs	r3, r6, r3
 8006076:	2f00      	cmp	r7, #0
 8006078:	bf08      	it	eq
 800607a:	462f      	moveq	r7, r5
 800607c:	2d10      	cmp	r5, #16
 800607e:	9306      	str	r3, [sp, #24]
 8006080:	46a8      	mov	r8, r5
 8006082:	bfa8      	it	ge
 8006084:	f04f 0810 	movge.w	r8, #16
 8006088:	f7fa fa64 	bl	8000554 <__aeabi_ui2d>
 800608c:	2d09      	cmp	r5, #9
 800608e:	4682      	mov	sl, r0
 8006090:	468b      	mov	fp, r1
 8006092:	dd13      	ble.n	80060bc <_strtod_l+0x3dc>
 8006094:	4b7b      	ldr	r3, [pc, #492]	; (8006284 <_strtod_l+0x5a4>)
 8006096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800609a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800609e:	f7fa fad3 	bl	8000648 <__aeabi_dmul>
 80060a2:	4682      	mov	sl, r0
 80060a4:	4648      	mov	r0, r9
 80060a6:	468b      	mov	fp, r1
 80060a8:	f7fa fa54 	bl	8000554 <__aeabi_ui2d>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4650      	mov	r0, sl
 80060b2:	4659      	mov	r1, fp
 80060b4:	f7fa f912 	bl	80002dc <__adddf3>
 80060b8:	4682      	mov	sl, r0
 80060ba:	468b      	mov	fp, r1
 80060bc:	2d0f      	cmp	r5, #15
 80060be:	dc38      	bgt.n	8006132 <_strtod_l+0x452>
 80060c0:	9b06      	ldr	r3, [sp, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f43f ae50 	beq.w	8005d68 <_strtod_l+0x88>
 80060c8:	dd24      	ble.n	8006114 <_strtod_l+0x434>
 80060ca:	2b16      	cmp	r3, #22
 80060cc:	dc0b      	bgt.n	80060e6 <_strtod_l+0x406>
 80060ce:	496d      	ldr	r1, [pc, #436]	; (8006284 <_strtod_l+0x5a4>)
 80060d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d8:	4652      	mov	r2, sl
 80060da:	465b      	mov	r3, fp
 80060dc:	f7fa fab4 	bl	8000648 <__aeabi_dmul>
 80060e0:	4682      	mov	sl, r0
 80060e2:	468b      	mov	fp, r1
 80060e4:	e640      	b.n	8005d68 <_strtod_l+0x88>
 80060e6:	9a06      	ldr	r2, [sp, #24]
 80060e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80060ec:	4293      	cmp	r3, r2
 80060ee:	db20      	blt.n	8006132 <_strtod_l+0x452>
 80060f0:	4c64      	ldr	r4, [pc, #400]	; (8006284 <_strtod_l+0x5a4>)
 80060f2:	f1c5 050f 	rsb	r5, r5, #15
 80060f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80060fa:	4652      	mov	r2, sl
 80060fc:	465b      	mov	r3, fp
 80060fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006102:	f7fa faa1 	bl	8000648 <__aeabi_dmul>
 8006106:	9b06      	ldr	r3, [sp, #24]
 8006108:	1b5d      	subs	r5, r3, r5
 800610a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800610e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006112:	e7e3      	b.n	80060dc <_strtod_l+0x3fc>
 8006114:	9b06      	ldr	r3, [sp, #24]
 8006116:	3316      	adds	r3, #22
 8006118:	db0b      	blt.n	8006132 <_strtod_l+0x452>
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	1b9e      	subs	r6, r3, r6
 800611e:	4b59      	ldr	r3, [pc, #356]	; (8006284 <_strtod_l+0x5a4>)
 8006120:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006124:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006128:	4650      	mov	r0, sl
 800612a:	4659      	mov	r1, fp
 800612c:	f7fa fbb6 	bl	800089c <__aeabi_ddiv>
 8006130:	e7d6      	b.n	80060e0 <_strtod_l+0x400>
 8006132:	9b06      	ldr	r3, [sp, #24]
 8006134:	eba5 0808 	sub.w	r8, r5, r8
 8006138:	4498      	add	r8, r3
 800613a:	f1b8 0f00 	cmp.w	r8, #0
 800613e:	dd74      	ble.n	800622a <_strtod_l+0x54a>
 8006140:	f018 030f 	ands.w	r3, r8, #15
 8006144:	d00a      	beq.n	800615c <_strtod_l+0x47c>
 8006146:	494f      	ldr	r1, [pc, #316]	; (8006284 <_strtod_l+0x5a4>)
 8006148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800614c:	4652      	mov	r2, sl
 800614e:	465b      	mov	r3, fp
 8006150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006154:	f7fa fa78 	bl	8000648 <__aeabi_dmul>
 8006158:	4682      	mov	sl, r0
 800615a:	468b      	mov	fp, r1
 800615c:	f038 080f 	bics.w	r8, r8, #15
 8006160:	d04f      	beq.n	8006202 <_strtod_l+0x522>
 8006162:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006166:	dd22      	ble.n	80061ae <_strtod_l+0x4ce>
 8006168:	2500      	movs	r5, #0
 800616a:	462e      	mov	r6, r5
 800616c:	9507      	str	r5, [sp, #28]
 800616e:	9505      	str	r5, [sp, #20]
 8006170:	2322      	movs	r3, #34	; 0x22
 8006172:	f8df b118 	ldr.w	fp, [pc, #280]	; 800628c <_strtod_l+0x5ac>
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	f04f 0a00 	mov.w	sl, #0
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f43f adf2 	beq.w	8005d68 <_strtod_l+0x88>
 8006184:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006186:	4620      	mov	r0, r4
 8006188:	f001 fe14 	bl	8007db4 <_Bfree>
 800618c:	9905      	ldr	r1, [sp, #20]
 800618e:	4620      	mov	r0, r4
 8006190:	f001 fe10 	bl	8007db4 <_Bfree>
 8006194:	4631      	mov	r1, r6
 8006196:	4620      	mov	r0, r4
 8006198:	f001 fe0c 	bl	8007db4 <_Bfree>
 800619c:	9907      	ldr	r1, [sp, #28]
 800619e:	4620      	mov	r0, r4
 80061a0:	f001 fe08 	bl	8007db4 <_Bfree>
 80061a4:	4629      	mov	r1, r5
 80061a6:	4620      	mov	r0, r4
 80061a8:	f001 fe04 	bl	8007db4 <_Bfree>
 80061ac:	e5dc      	b.n	8005d68 <_strtod_l+0x88>
 80061ae:	4b36      	ldr	r3, [pc, #216]	; (8006288 <_strtod_l+0x5a8>)
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	2300      	movs	r3, #0
 80061b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80061b8:	4650      	mov	r0, sl
 80061ba:	4659      	mov	r1, fp
 80061bc:	4699      	mov	r9, r3
 80061be:	f1b8 0f01 	cmp.w	r8, #1
 80061c2:	dc21      	bgt.n	8006208 <_strtod_l+0x528>
 80061c4:	b10b      	cbz	r3, 80061ca <_strtod_l+0x4ea>
 80061c6:	4682      	mov	sl, r0
 80061c8:	468b      	mov	fp, r1
 80061ca:	4b2f      	ldr	r3, [pc, #188]	; (8006288 <_strtod_l+0x5a8>)
 80061cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80061d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80061d4:	4652      	mov	r2, sl
 80061d6:	465b      	mov	r3, fp
 80061d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80061dc:	f7fa fa34 	bl	8000648 <__aeabi_dmul>
 80061e0:	4b2a      	ldr	r3, [pc, #168]	; (800628c <_strtod_l+0x5ac>)
 80061e2:	460a      	mov	r2, r1
 80061e4:	400b      	ands	r3, r1
 80061e6:	492a      	ldr	r1, [pc, #168]	; (8006290 <_strtod_l+0x5b0>)
 80061e8:	428b      	cmp	r3, r1
 80061ea:	4682      	mov	sl, r0
 80061ec:	d8bc      	bhi.n	8006168 <_strtod_l+0x488>
 80061ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061f2:	428b      	cmp	r3, r1
 80061f4:	bf86      	itte	hi
 80061f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006294 <_strtod_l+0x5b4>
 80061fa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80061fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006202:	2300      	movs	r3, #0
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	e084      	b.n	8006312 <_strtod_l+0x632>
 8006208:	f018 0f01 	tst.w	r8, #1
 800620c:	d005      	beq.n	800621a <_strtod_l+0x53a>
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa fa18 	bl	8000648 <__aeabi_dmul>
 8006218:	2301      	movs	r3, #1
 800621a:	9a04      	ldr	r2, [sp, #16]
 800621c:	3208      	adds	r2, #8
 800621e:	f109 0901 	add.w	r9, r9, #1
 8006222:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006226:	9204      	str	r2, [sp, #16]
 8006228:	e7c9      	b.n	80061be <_strtod_l+0x4de>
 800622a:	d0ea      	beq.n	8006202 <_strtod_l+0x522>
 800622c:	f1c8 0800 	rsb	r8, r8, #0
 8006230:	f018 020f 	ands.w	r2, r8, #15
 8006234:	d00a      	beq.n	800624c <_strtod_l+0x56c>
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <_strtod_l+0x5a4>)
 8006238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800623c:	4650      	mov	r0, sl
 800623e:	4659      	mov	r1, fp
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7fa fb2a 	bl	800089c <__aeabi_ddiv>
 8006248:	4682      	mov	sl, r0
 800624a:	468b      	mov	fp, r1
 800624c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006250:	d0d7      	beq.n	8006202 <_strtod_l+0x522>
 8006252:	f1b8 0f1f 	cmp.w	r8, #31
 8006256:	dd1f      	ble.n	8006298 <_strtod_l+0x5b8>
 8006258:	2500      	movs	r5, #0
 800625a:	462e      	mov	r6, r5
 800625c:	9507      	str	r5, [sp, #28]
 800625e:	9505      	str	r5, [sp, #20]
 8006260:	2322      	movs	r3, #34	; 0x22
 8006262:	f04f 0a00 	mov.w	sl, #0
 8006266:	f04f 0b00 	mov.w	fp, #0
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	e786      	b.n	800617c <_strtod_l+0x49c>
 800626e:	bf00      	nop
 8006270:	0800980d 	.word	0x0800980d
 8006274:	08009848 	.word	0x08009848
 8006278:	08009805 	.word	0x08009805
 800627c:	0800988b 	.word	0x0800988b
 8006280:	08009b38 	.word	0x08009b38
 8006284:	08009a18 	.word	0x08009a18
 8006288:	080099f0 	.word	0x080099f0
 800628c:	7ff00000 	.word	0x7ff00000
 8006290:	7ca00000 	.word	0x7ca00000
 8006294:	7fefffff 	.word	0x7fefffff
 8006298:	f018 0310 	ands.w	r3, r8, #16
 800629c:	bf18      	it	ne
 800629e:	236a      	movne	r3, #106	; 0x6a
 80062a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006650 <_strtod_l+0x970>
 80062a4:	9304      	str	r3, [sp, #16]
 80062a6:	4650      	mov	r0, sl
 80062a8:	4659      	mov	r1, fp
 80062aa:	2300      	movs	r3, #0
 80062ac:	f018 0f01 	tst.w	r8, #1
 80062b0:	d004      	beq.n	80062bc <_strtod_l+0x5dc>
 80062b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062b6:	f7fa f9c7 	bl	8000648 <__aeabi_dmul>
 80062ba:	2301      	movs	r3, #1
 80062bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80062c0:	f109 0908 	add.w	r9, r9, #8
 80062c4:	d1f2      	bne.n	80062ac <_strtod_l+0x5cc>
 80062c6:	b10b      	cbz	r3, 80062cc <_strtod_l+0x5ec>
 80062c8:	4682      	mov	sl, r0
 80062ca:	468b      	mov	fp, r1
 80062cc:	9b04      	ldr	r3, [sp, #16]
 80062ce:	b1c3      	cbz	r3, 8006302 <_strtod_l+0x622>
 80062d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80062d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062d8:	2b00      	cmp	r3, #0
 80062da:	4659      	mov	r1, fp
 80062dc:	dd11      	ble.n	8006302 <_strtod_l+0x622>
 80062de:	2b1f      	cmp	r3, #31
 80062e0:	f340 8124 	ble.w	800652c <_strtod_l+0x84c>
 80062e4:	2b34      	cmp	r3, #52	; 0x34
 80062e6:	bfde      	ittt	le
 80062e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80062ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80062f0:	fa03 f202 	lslle.w	r2, r3, r2
 80062f4:	f04f 0a00 	mov.w	sl, #0
 80062f8:	bfcc      	ite	gt
 80062fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80062fe:	ea02 0b01 	andle.w	fp, r2, r1
 8006302:	2200      	movs	r2, #0
 8006304:	2300      	movs	r3, #0
 8006306:	4650      	mov	r0, sl
 8006308:	4659      	mov	r1, fp
 800630a:	f7fa fc05 	bl	8000b18 <__aeabi_dcmpeq>
 800630e:	2800      	cmp	r0, #0
 8006310:	d1a2      	bne.n	8006258 <_strtod_l+0x578>
 8006312:	9b07      	ldr	r3, [sp, #28]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	9908      	ldr	r1, [sp, #32]
 8006318:	462b      	mov	r3, r5
 800631a:	463a      	mov	r2, r7
 800631c:	4620      	mov	r0, r4
 800631e:	f001 fdb1 	bl	8007e84 <__s2b>
 8006322:	9007      	str	r0, [sp, #28]
 8006324:	2800      	cmp	r0, #0
 8006326:	f43f af1f 	beq.w	8006168 <_strtod_l+0x488>
 800632a:	9b05      	ldr	r3, [sp, #20]
 800632c:	1b9e      	subs	r6, r3, r6
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	bfb4      	ite	lt
 8006334:	4633      	movlt	r3, r6
 8006336:	2300      	movge	r3, #0
 8006338:	930c      	str	r3, [sp, #48]	; 0x30
 800633a:	9b06      	ldr	r3, [sp, #24]
 800633c:	2500      	movs	r5, #0
 800633e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006342:	9312      	str	r3, [sp, #72]	; 0x48
 8006344:	462e      	mov	r6, r5
 8006346:	9b07      	ldr	r3, [sp, #28]
 8006348:	4620      	mov	r0, r4
 800634a:	6859      	ldr	r1, [r3, #4]
 800634c:	f001 fcf2 	bl	8007d34 <_Balloc>
 8006350:	9005      	str	r0, [sp, #20]
 8006352:	2800      	cmp	r0, #0
 8006354:	f43f af0c 	beq.w	8006170 <_strtod_l+0x490>
 8006358:	9b07      	ldr	r3, [sp, #28]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	3202      	adds	r2, #2
 800635e:	f103 010c 	add.w	r1, r3, #12
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	300c      	adds	r0, #12
 8006366:	f001 fcd7 	bl	8007d18 <memcpy>
 800636a:	ec4b ab10 	vmov	d0, sl, fp
 800636e:	aa1a      	add	r2, sp, #104	; 0x68
 8006370:	a919      	add	r1, sp, #100	; 0x64
 8006372:	4620      	mov	r0, r4
 8006374:	f002 f8cc 	bl	8008510 <__d2b>
 8006378:	ec4b ab18 	vmov	d8, sl, fp
 800637c:	9018      	str	r0, [sp, #96]	; 0x60
 800637e:	2800      	cmp	r0, #0
 8006380:	f43f aef6 	beq.w	8006170 <_strtod_l+0x490>
 8006384:	2101      	movs	r1, #1
 8006386:	4620      	mov	r0, r4
 8006388:	f001 fe16 	bl	8007fb8 <__i2b>
 800638c:	4606      	mov	r6, r0
 800638e:	2800      	cmp	r0, #0
 8006390:	f43f aeee 	beq.w	8006170 <_strtod_l+0x490>
 8006394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006396:	9904      	ldr	r1, [sp, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfab      	itete	ge
 800639c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800639e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80063a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80063a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80063a6:	bfac      	ite	ge
 80063a8:	eb03 0902 	addge.w	r9, r3, r2
 80063ac:	1ad7      	sublt	r7, r2, r3
 80063ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80063b0:	eba3 0801 	sub.w	r8, r3, r1
 80063b4:	4490      	add	r8, r2
 80063b6:	4ba1      	ldr	r3, [pc, #644]	; (800663c <_strtod_l+0x95c>)
 80063b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80063bc:	4598      	cmp	r8, r3
 80063be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80063c2:	f280 80c7 	bge.w	8006554 <_strtod_l+0x874>
 80063c6:	eba3 0308 	sub.w	r3, r3, r8
 80063ca:	2b1f      	cmp	r3, #31
 80063cc:	eba2 0203 	sub.w	r2, r2, r3
 80063d0:	f04f 0101 	mov.w	r1, #1
 80063d4:	f300 80b1 	bgt.w	800653a <_strtod_l+0x85a>
 80063d8:	fa01 f303 	lsl.w	r3, r1, r3
 80063dc:	930d      	str	r3, [sp, #52]	; 0x34
 80063de:	2300      	movs	r3, #0
 80063e0:	9308      	str	r3, [sp, #32]
 80063e2:	eb09 0802 	add.w	r8, r9, r2
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	45c1      	cmp	r9, r8
 80063ea:	4417      	add	r7, r2
 80063ec:	441f      	add	r7, r3
 80063ee:	464b      	mov	r3, r9
 80063f0:	bfa8      	it	ge
 80063f2:	4643      	movge	r3, r8
 80063f4:	42bb      	cmp	r3, r7
 80063f6:	bfa8      	it	ge
 80063f8:	463b      	movge	r3, r7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bfc2      	ittt	gt
 80063fe:	eba8 0803 	subgt.w	r8, r8, r3
 8006402:	1aff      	subgt	r7, r7, r3
 8006404:	eba9 0903 	subgt.w	r9, r9, r3
 8006408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800640a:	2b00      	cmp	r3, #0
 800640c:	dd17      	ble.n	800643e <_strtod_l+0x75e>
 800640e:	4631      	mov	r1, r6
 8006410:	461a      	mov	r2, r3
 8006412:	4620      	mov	r0, r4
 8006414:	f001 fe90 	bl	8008138 <__pow5mult>
 8006418:	4606      	mov	r6, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	f43f aea8 	beq.w	8006170 <_strtod_l+0x490>
 8006420:	4601      	mov	r1, r0
 8006422:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006424:	4620      	mov	r0, r4
 8006426:	f001 fddd 	bl	8007fe4 <__multiply>
 800642a:	900b      	str	r0, [sp, #44]	; 0x2c
 800642c:	2800      	cmp	r0, #0
 800642e:	f43f ae9f 	beq.w	8006170 <_strtod_l+0x490>
 8006432:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006434:	4620      	mov	r0, r4
 8006436:	f001 fcbd 	bl	8007db4 <_Bfree>
 800643a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643c:	9318      	str	r3, [sp, #96]	; 0x60
 800643e:	f1b8 0f00 	cmp.w	r8, #0
 8006442:	f300 808c 	bgt.w	800655e <_strtod_l+0x87e>
 8006446:	9b06      	ldr	r3, [sp, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	dd08      	ble.n	800645e <_strtod_l+0x77e>
 800644c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800644e:	9905      	ldr	r1, [sp, #20]
 8006450:	4620      	mov	r0, r4
 8006452:	f001 fe71 	bl	8008138 <__pow5mult>
 8006456:	9005      	str	r0, [sp, #20]
 8006458:	2800      	cmp	r0, #0
 800645a:	f43f ae89 	beq.w	8006170 <_strtod_l+0x490>
 800645e:	2f00      	cmp	r7, #0
 8006460:	dd08      	ble.n	8006474 <_strtod_l+0x794>
 8006462:	9905      	ldr	r1, [sp, #20]
 8006464:	463a      	mov	r2, r7
 8006466:	4620      	mov	r0, r4
 8006468:	f001 fec0 	bl	80081ec <__lshift>
 800646c:	9005      	str	r0, [sp, #20]
 800646e:	2800      	cmp	r0, #0
 8006470:	f43f ae7e 	beq.w	8006170 <_strtod_l+0x490>
 8006474:	f1b9 0f00 	cmp.w	r9, #0
 8006478:	dd08      	ble.n	800648c <_strtod_l+0x7ac>
 800647a:	4631      	mov	r1, r6
 800647c:	464a      	mov	r2, r9
 800647e:	4620      	mov	r0, r4
 8006480:	f001 feb4 	bl	80081ec <__lshift>
 8006484:	4606      	mov	r6, r0
 8006486:	2800      	cmp	r0, #0
 8006488:	f43f ae72 	beq.w	8006170 <_strtod_l+0x490>
 800648c:	9a05      	ldr	r2, [sp, #20]
 800648e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006490:	4620      	mov	r0, r4
 8006492:	f001 ff37 	bl	8008304 <__mdiff>
 8006496:	4605      	mov	r5, r0
 8006498:	2800      	cmp	r0, #0
 800649a:	f43f ae69 	beq.w	8006170 <_strtod_l+0x490>
 800649e:	68c3      	ldr	r3, [r0, #12]
 80064a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a2:	2300      	movs	r3, #0
 80064a4:	60c3      	str	r3, [r0, #12]
 80064a6:	4631      	mov	r1, r6
 80064a8:	f001 ff10 	bl	80082cc <__mcmp>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	da60      	bge.n	8006572 <_strtod_l+0x892>
 80064b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b2:	ea53 030a 	orrs.w	r3, r3, sl
 80064b6:	f040 8082 	bne.w	80065be <_strtod_l+0x8de>
 80064ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d17d      	bne.n	80065be <_strtod_l+0x8de>
 80064c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064c6:	0d1b      	lsrs	r3, r3, #20
 80064c8:	051b      	lsls	r3, r3, #20
 80064ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80064ce:	d976      	bls.n	80065be <_strtod_l+0x8de>
 80064d0:	696b      	ldr	r3, [r5, #20]
 80064d2:	b913      	cbnz	r3, 80064da <_strtod_l+0x7fa>
 80064d4:	692b      	ldr	r3, [r5, #16]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	dd71      	ble.n	80065be <_strtod_l+0x8de>
 80064da:	4629      	mov	r1, r5
 80064dc:	2201      	movs	r2, #1
 80064de:	4620      	mov	r0, r4
 80064e0:	f001 fe84 	bl	80081ec <__lshift>
 80064e4:	4631      	mov	r1, r6
 80064e6:	4605      	mov	r5, r0
 80064e8:	f001 fef0 	bl	80082cc <__mcmp>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	dd66      	ble.n	80065be <_strtod_l+0x8de>
 80064f0:	9904      	ldr	r1, [sp, #16]
 80064f2:	4a53      	ldr	r2, [pc, #332]	; (8006640 <_strtod_l+0x960>)
 80064f4:	465b      	mov	r3, fp
 80064f6:	2900      	cmp	r1, #0
 80064f8:	f000 8081 	beq.w	80065fe <_strtod_l+0x91e>
 80064fc:	ea02 010b 	and.w	r1, r2, fp
 8006500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006504:	dc7b      	bgt.n	80065fe <_strtod_l+0x91e>
 8006506:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800650a:	f77f aea9 	ble.w	8006260 <_strtod_l+0x580>
 800650e:	4b4d      	ldr	r3, [pc, #308]	; (8006644 <_strtod_l+0x964>)
 8006510:	4650      	mov	r0, sl
 8006512:	4659      	mov	r1, fp
 8006514:	2200      	movs	r2, #0
 8006516:	f7fa f897 	bl	8000648 <__aeabi_dmul>
 800651a:	460b      	mov	r3, r1
 800651c:	4303      	orrs	r3, r0
 800651e:	bf08      	it	eq
 8006520:	2322      	moveq	r3, #34	; 0x22
 8006522:	4682      	mov	sl, r0
 8006524:	468b      	mov	fp, r1
 8006526:	bf08      	it	eq
 8006528:	6023      	streq	r3, [r4, #0]
 800652a:	e62b      	b.n	8006184 <_strtod_l+0x4a4>
 800652c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	ea03 0a0a 	and.w	sl, r3, sl
 8006538:	e6e3      	b.n	8006302 <_strtod_l+0x622>
 800653a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800653e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006542:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006546:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800654a:	fa01 f308 	lsl.w	r3, r1, r8
 800654e:	9308      	str	r3, [sp, #32]
 8006550:	910d      	str	r1, [sp, #52]	; 0x34
 8006552:	e746      	b.n	80063e2 <_strtod_l+0x702>
 8006554:	2300      	movs	r3, #0
 8006556:	9308      	str	r3, [sp, #32]
 8006558:	2301      	movs	r3, #1
 800655a:	930d      	str	r3, [sp, #52]	; 0x34
 800655c:	e741      	b.n	80063e2 <_strtod_l+0x702>
 800655e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006560:	4642      	mov	r2, r8
 8006562:	4620      	mov	r0, r4
 8006564:	f001 fe42 	bl	80081ec <__lshift>
 8006568:	9018      	str	r0, [sp, #96]	; 0x60
 800656a:	2800      	cmp	r0, #0
 800656c:	f47f af6b 	bne.w	8006446 <_strtod_l+0x766>
 8006570:	e5fe      	b.n	8006170 <_strtod_l+0x490>
 8006572:	465f      	mov	r7, fp
 8006574:	d16e      	bne.n	8006654 <_strtod_l+0x974>
 8006576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800657c:	b342      	cbz	r2, 80065d0 <_strtod_l+0x8f0>
 800657e:	4a32      	ldr	r2, [pc, #200]	; (8006648 <_strtod_l+0x968>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d128      	bne.n	80065d6 <_strtod_l+0x8f6>
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	4651      	mov	r1, sl
 8006588:	b1eb      	cbz	r3, 80065c6 <_strtod_l+0x8e6>
 800658a:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <_strtod_l+0x960>)
 800658c:	403b      	ands	r3, r7
 800658e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006596:	d819      	bhi.n	80065cc <_strtod_l+0x8ec>
 8006598:	0d1b      	lsrs	r3, r3, #20
 800659a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	4299      	cmp	r1, r3
 80065a4:	d117      	bne.n	80065d6 <_strtod_l+0x8f6>
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <_strtod_l+0x96c>)
 80065a8:	429f      	cmp	r7, r3
 80065aa:	d102      	bne.n	80065b2 <_strtod_l+0x8d2>
 80065ac:	3101      	adds	r1, #1
 80065ae:	f43f addf 	beq.w	8006170 <_strtod_l+0x490>
 80065b2:	4b23      	ldr	r3, [pc, #140]	; (8006640 <_strtod_l+0x960>)
 80065b4:	403b      	ands	r3, r7
 80065b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80065ba:	f04f 0a00 	mov.w	sl, #0
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1a4      	bne.n	800650e <_strtod_l+0x82e>
 80065c4:	e5de      	b.n	8006184 <_strtod_l+0x4a4>
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ca:	e7ea      	b.n	80065a2 <_strtod_l+0x8c2>
 80065cc:	4613      	mov	r3, r2
 80065ce:	e7e8      	b.n	80065a2 <_strtod_l+0x8c2>
 80065d0:	ea53 030a 	orrs.w	r3, r3, sl
 80065d4:	d08c      	beq.n	80064f0 <_strtod_l+0x810>
 80065d6:	9b08      	ldr	r3, [sp, #32]
 80065d8:	b1db      	cbz	r3, 8006612 <_strtod_l+0x932>
 80065da:	423b      	tst	r3, r7
 80065dc:	d0ef      	beq.n	80065be <_strtod_l+0x8de>
 80065de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e0:	9a04      	ldr	r2, [sp, #16]
 80065e2:	4650      	mov	r0, sl
 80065e4:	4659      	mov	r1, fp
 80065e6:	b1c3      	cbz	r3, 800661a <_strtod_l+0x93a>
 80065e8:	f7ff fb5c 	bl	8005ca4 <sulp>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	ec51 0b18 	vmov	r0, r1, d8
 80065f4:	f7f9 fe72 	bl	80002dc <__adddf3>
 80065f8:	4682      	mov	sl, r0
 80065fa:	468b      	mov	fp, r1
 80065fc:	e7df      	b.n	80065be <_strtod_l+0x8de>
 80065fe:	4013      	ands	r3, r2
 8006600:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006604:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800660c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006610:	e7d5      	b.n	80065be <_strtod_l+0x8de>
 8006612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006614:	ea13 0f0a 	tst.w	r3, sl
 8006618:	e7e0      	b.n	80065dc <_strtod_l+0x8fc>
 800661a:	f7ff fb43 	bl	8005ca4 <sulp>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	ec51 0b18 	vmov	r0, r1, d8
 8006626:	f7f9 fe57 	bl	80002d8 <__aeabi_dsub>
 800662a:	2200      	movs	r2, #0
 800662c:	2300      	movs	r3, #0
 800662e:	4682      	mov	sl, r0
 8006630:	468b      	mov	fp, r1
 8006632:	f7fa fa71 	bl	8000b18 <__aeabi_dcmpeq>
 8006636:	2800      	cmp	r0, #0
 8006638:	d0c1      	beq.n	80065be <_strtod_l+0x8de>
 800663a:	e611      	b.n	8006260 <_strtod_l+0x580>
 800663c:	fffffc02 	.word	0xfffffc02
 8006640:	7ff00000 	.word	0x7ff00000
 8006644:	39500000 	.word	0x39500000
 8006648:	000fffff 	.word	0x000fffff
 800664c:	7fefffff 	.word	0x7fefffff
 8006650:	08009860 	.word	0x08009860
 8006654:	4631      	mov	r1, r6
 8006656:	4628      	mov	r0, r5
 8006658:	f001 ffb6 	bl	80085c8 <__ratio>
 800665c:	ec59 8b10 	vmov	r8, r9, d0
 8006660:	ee10 0a10 	vmov	r0, s0
 8006664:	2200      	movs	r2, #0
 8006666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800666a:	4649      	mov	r1, r9
 800666c:	f7fa fa68 	bl	8000b40 <__aeabi_dcmple>
 8006670:	2800      	cmp	r0, #0
 8006672:	d07a      	beq.n	800676a <_strtod_l+0xa8a>
 8006674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d04a      	beq.n	8006710 <_strtod_l+0xa30>
 800667a:	4b95      	ldr	r3, [pc, #596]	; (80068d0 <_strtod_l+0xbf0>)
 800667c:	2200      	movs	r2, #0
 800667e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006682:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80068d0 <_strtod_l+0xbf0>
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	4b92      	ldr	r3, [pc, #584]	; (80068d4 <_strtod_l+0xbf4>)
 800668c:	403b      	ands	r3, r7
 800668e:	930d      	str	r3, [sp, #52]	; 0x34
 8006690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006692:	4b91      	ldr	r3, [pc, #580]	; (80068d8 <_strtod_l+0xbf8>)
 8006694:	429a      	cmp	r2, r3
 8006696:	f040 80b0 	bne.w	80067fa <_strtod_l+0xb1a>
 800669a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800669e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80066a2:	ec4b ab10 	vmov	d0, sl, fp
 80066a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066aa:	f001 feb5 	bl	8008418 <__ulp>
 80066ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066b2:	ec53 2b10 	vmov	r2, r3, d0
 80066b6:	f7f9 ffc7 	bl	8000648 <__aeabi_dmul>
 80066ba:	4652      	mov	r2, sl
 80066bc:	465b      	mov	r3, fp
 80066be:	f7f9 fe0d 	bl	80002dc <__adddf3>
 80066c2:	460b      	mov	r3, r1
 80066c4:	4983      	ldr	r1, [pc, #524]	; (80068d4 <_strtod_l+0xbf4>)
 80066c6:	4a85      	ldr	r2, [pc, #532]	; (80068dc <_strtod_l+0xbfc>)
 80066c8:	4019      	ands	r1, r3
 80066ca:	4291      	cmp	r1, r2
 80066cc:	4682      	mov	sl, r0
 80066ce:	d960      	bls.n	8006792 <_strtod_l+0xab2>
 80066d0:	ee18 3a90 	vmov	r3, s17
 80066d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80066d8:	4293      	cmp	r3, r2
 80066da:	d104      	bne.n	80066e6 <_strtod_l+0xa06>
 80066dc:	ee18 3a10 	vmov	r3, s16
 80066e0:	3301      	adds	r3, #1
 80066e2:	f43f ad45 	beq.w	8006170 <_strtod_l+0x490>
 80066e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80068e8 <_strtod_l+0xc08>
 80066ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80066ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066f0:	4620      	mov	r0, r4
 80066f2:	f001 fb5f 	bl	8007db4 <_Bfree>
 80066f6:	9905      	ldr	r1, [sp, #20]
 80066f8:	4620      	mov	r0, r4
 80066fa:	f001 fb5b 	bl	8007db4 <_Bfree>
 80066fe:	4631      	mov	r1, r6
 8006700:	4620      	mov	r0, r4
 8006702:	f001 fb57 	bl	8007db4 <_Bfree>
 8006706:	4629      	mov	r1, r5
 8006708:	4620      	mov	r0, r4
 800670a:	f001 fb53 	bl	8007db4 <_Bfree>
 800670e:	e61a      	b.n	8006346 <_strtod_l+0x666>
 8006710:	f1ba 0f00 	cmp.w	sl, #0
 8006714:	d11b      	bne.n	800674e <_strtod_l+0xa6e>
 8006716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800671a:	b9f3      	cbnz	r3, 800675a <_strtod_l+0xa7a>
 800671c:	4b6c      	ldr	r3, [pc, #432]	; (80068d0 <_strtod_l+0xbf0>)
 800671e:	2200      	movs	r2, #0
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7fa fa02 	bl	8000b2c <__aeabi_dcmplt>
 8006728:	b9d0      	cbnz	r0, 8006760 <_strtod_l+0xa80>
 800672a:	4640      	mov	r0, r8
 800672c:	4649      	mov	r1, r9
 800672e:	4b6c      	ldr	r3, [pc, #432]	; (80068e0 <_strtod_l+0xc00>)
 8006730:	2200      	movs	r2, #0
 8006732:	f7f9 ff89 	bl	8000648 <__aeabi_dmul>
 8006736:	4680      	mov	r8, r0
 8006738:	4689      	mov	r9, r1
 800673a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800673e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006742:	9315      	str	r3, [sp, #84]	; 0x54
 8006744:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800674c:	e79d      	b.n	800668a <_strtod_l+0x9aa>
 800674e:	f1ba 0f01 	cmp.w	sl, #1
 8006752:	d102      	bne.n	800675a <_strtod_l+0xa7a>
 8006754:	2f00      	cmp	r7, #0
 8006756:	f43f ad83 	beq.w	8006260 <_strtod_l+0x580>
 800675a:	4b62      	ldr	r3, [pc, #392]	; (80068e4 <_strtod_l+0xc04>)
 800675c:	2200      	movs	r2, #0
 800675e:	e78e      	b.n	800667e <_strtod_l+0x99e>
 8006760:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80068e0 <_strtod_l+0xc00>
 8006764:	f04f 0800 	mov.w	r8, #0
 8006768:	e7e7      	b.n	800673a <_strtod_l+0xa5a>
 800676a:	4b5d      	ldr	r3, [pc, #372]	; (80068e0 <_strtod_l+0xc00>)
 800676c:	4640      	mov	r0, r8
 800676e:	4649      	mov	r1, r9
 8006770:	2200      	movs	r2, #0
 8006772:	f7f9 ff69 	bl	8000648 <__aeabi_dmul>
 8006776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006778:	4680      	mov	r8, r0
 800677a:	4689      	mov	r9, r1
 800677c:	b933      	cbnz	r3, 800678c <_strtod_l+0xaac>
 800677e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006782:	900e      	str	r0, [sp, #56]	; 0x38
 8006784:	930f      	str	r3, [sp, #60]	; 0x3c
 8006786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800678a:	e7dd      	b.n	8006748 <_strtod_l+0xa68>
 800678c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006790:	e7f9      	b.n	8006786 <_strtod_l+0xaa6>
 8006792:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006796:	9b04      	ldr	r3, [sp, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1a8      	bne.n	80066ee <_strtod_l+0xa0e>
 800679c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067a2:	0d1b      	lsrs	r3, r3, #20
 80067a4:	051b      	lsls	r3, r3, #20
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d1a1      	bne.n	80066ee <_strtod_l+0xa0e>
 80067aa:	4640      	mov	r0, r8
 80067ac:	4649      	mov	r1, r9
 80067ae:	f7fa fa5b 	bl	8000c68 <__aeabi_d2lz>
 80067b2:	f7f9 ff1b 	bl	80005ec <__aeabi_l2d>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4640      	mov	r0, r8
 80067bc:	4649      	mov	r1, r9
 80067be:	f7f9 fd8b 	bl	80002d8 <__aeabi_dsub>
 80067c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067c8:	ea43 030a 	orr.w	r3, r3, sl
 80067cc:	4313      	orrs	r3, r2
 80067ce:	4680      	mov	r8, r0
 80067d0:	4689      	mov	r9, r1
 80067d2:	d055      	beq.n	8006880 <_strtod_l+0xba0>
 80067d4:	a336      	add	r3, pc, #216	; (adr r3, 80068b0 <_strtod_l+0xbd0>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f7fa f9a7 	bl	8000b2c <__aeabi_dcmplt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	f47f acd0 	bne.w	8006184 <_strtod_l+0x4a4>
 80067e4:	a334      	add	r3, pc, #208	; (adr r3, 80068b8 <_strtod_l+0xbd8>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	4640      	mov	r0, r8
 80067ec:	4649      	mov	r1, r9
 80067ee:	f7fa f9bb 	bl	8000b68 <__aeabi_dcmpgt>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	f43f af7b 	beq.w	80066ee <_strtod_l+0xa0e>
 80067f8:	e4c4      	b.n	8006184 <_strtod_l+0x4a4>
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	b333      	cbz	r3, 800684c <_strtod_l+0xb6c>
 80067fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006800:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006804:	d822      	bhi.n	800684c <_strtod_l+0xb6c>
 8006806:	a32e      	add	r3, pc, #184	; (adr r3, 80068c0 <_strtod_l+0xbe0>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	4640      	mov	r0, r8
 800680e:	4649      	mov	r1, r9
 8006810:	f7fa f996 	bl	8000b40 <__aeabi_dcmple>
 8006814:	b1a0      	cbz	r0, 8006840 <_strtod_l+0xb60>
 8006816:	4649      	mov	r1, r9
 8006818:	4640      	mov	r0, r8
 800681a:	f7fa f9ed 	bl	8000bf8 <__aeabi_d2uiz>
 800681e:	2801      	cmp	r0, #1
 8006820:	bf38      	it	cc
 8006822:	2001      	movcc	r0, #1
 8006824:	f7f9 fe96 	bl	8000554 <__aeabi_ui2d>
 8006828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800682a:	4680      	mov	r8, r0
 800682c:	4689      	mov	r9, r1
 800682e:	bb23      	cbnz	r3, 800687a <_strtod_l+0xb9a>
 8006830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006834:	9010      	str	r0, [sp, #64]	; 0x40
 8006836:	9311      	str	r3, [sp, #68]	; 0x44
 8006838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800683c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006844:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	9309      	str	r3, [sp, #36]	; 0x24
 800684c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006850:	eeb0 0a48 	vmov.f32	s0, s16
 8006854:	eef0 0a68 	vmov.f32	s1, s17
 8006858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800685c:	f001 fddc 	bl	8008418 <__ulp>
 8006860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006864:	ec53 2b10 	vmov	r2, r3, d0
 8006868:	f7f9 feee 	bl	8000648 <__aeabi_dmul>
 800686c:	ec53 2b18 	vmov	r2, r3, d8
 8006870:	f7f9 fd34 	bl	80002dc <__adddf3>
 8006874:	4682      	mov	sl, r0
 8006876:	468b      	mov	fp, r1
 8006878:	e78d      	b.n	8006796 <_strtod_l+0xab6>
 800687a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800687e:	e7db      	b.n	8006838 <_strtod_l+0xb58>
 8006880:	a311      	add	r3, pc, #68	; (adr r3, 80068c8 <_strtod_l+0xbe8>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7fa f951 	bl	8000b2c <__aeabi_dcmplt>
 800688a:	e7b2      	b.n	80067f2 <_strtod_l+0xb12>
 800688c:	2300      	movs	r3, #0
 800688e:	930a      	str	r3, [sp, #40]	; 0x28
 8006890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	f7ff ba6b 	b.w	8005d70 <_strtod_l+0x90>
 800689a:	2a65      	cmp	r2, #101	; 0x65
 800689c:	f43f ab5f 	beq.w	8005f5e <_strtod_l+0x27e>
 80068a0:	2a45      	cmp	r2, #69	; 0x45
 80068a2:	f43f ab5c 	beq.w	8005f5e <_strtod_l+0x27e>
 80068a6:	2301      	movs	r3, #1
 80068a8:	f7ff bb94 	b.w	8005fd4 <_strtod_l+0x2f4>
 80068ac:	f3af 8000 	nop.w
 80068b0:	94a03595 	.word	0x94a03595
 80068b4:	3fdfffff 	.word	0x3fdfffff
 80068b8:	35afe535 	.word	0x35afe535
 80068bc:	3fe00000 	.word	0x3fe00000
 80068c0:	ffc00000 	.word	0xffc00000
 80068c4:	41dfffff 	.word	0x41dfffff
 80068c8:	94a03595 	.word	0x94a03595
 80068cc:	3fcfffff 	.word	0x3fcfffff
 80068d0:	3ff00000 	.word	0x3ff00000
 80068d4:	7ff00000 	.word	0x7ff00000
 80068d8:	7fe00000 	.word	0x7fe00000
 80068dc:	7c9fffff 	.word	0x7c9fffff
 80068e0:	3fe00000 	.word	0x3fe00000
 80068e4:	bff00000 	.word	0xbff00000
 80068e8:	7fefffff 	.word	0x7fefffff

080068ec <strtod>:
 80068ec:	460a      	mov	r2, r1
 80068ee:	4601      	mov	r1, r0
 80068f0:	4802      	ldr	r0, [pc, #8]	; (80068fc <strtod+0x10>)
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <strtod+0x14>)
 80068f4:	6800      	ldr	r0, [r0, #0]
 80068f6:	f7ff b9f3 	b.w	8005ce0 <_strtod_l>
 80068fa:	bf00      	nop
 80068fc:	2000001c 	.word	0x2000001c
 8006900:	20000084 	.word	0x20000084

08006904 <quorem>:
 8006904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	6903      	ldr	r3, [r0, #16]
 800690a:	690c      	ldr	r4, [r1, #16]
 800690c:	42a3      	cmp	r3, r4
 800690e:	4607      	mov	r7, r0
 8006910:	f2c0 8081 	blt.w	8006a16 <quorem+0x112>
 8006914:	3c01      	subs	r4, #1
 8006916:	f101 0814 	add.w	r8, r1, #20
 800691a:	f100 0514 	add.w	r5, r0, #20
 800691e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006922:	9301      	str	r3, [sp, #4]
 8006924:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800692c:	3301      	adds	r3, #1
 800692e:	429a      	cmp	r2, r3
 8006930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006938:	fbb2 f6f3 	udiv	r6, r2, r3
 800693c:	d331      	bcc.n	80069a2 <quorem+0x9e>
 800693e:	f04f 0e00 	mov.w	lr, #0
 8006942:	4640      	mov	r0, r8
 8006944:	46ac      	mov	ip, r5
 8006946:	46f2      	mov	sl, lr
 8006948:	f850 2b04 	ldr.w	r2, [r0], #4
 800694c:	b293      	uxth	r3, r2
 800694e:	fb06 e303 	mla	r3, r6, r3, lr
 8006952:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006956:	b29b      	uxth	r3, r3
 8006958:	ebaa 0303 	sub.w	r3, sl, r3
 800695c:	f8dc a000 	ldr.w	sl, [ip]
 8006960:	0c12      	lsrs	r2, r2, #16
 8006962:	fa13 f38a 	uxtah	r3, r3, sl
 8006966:	fb06 e202 	mla	r2, r6, r2, lr
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006972:	b292      	uxth	r2, r2
 8006974:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800697c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006980:	4581      	cmp	r9, r0
 8006982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006986:	f84c 3b04 	str.w	r3, [ip], #4
 800698a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800698e:	d2db      	bcs.n	8006948 <quorem+0x44>
 8006990:	f855 300b 	ldr.w	r3, [r5, fp]
 8006994:	b92b      	cbnz	r3, 80069a2 <quorem+0x9e>
 8006996:	9b01      	ldr	r3, [sp, #4]
 8006998:	3b04      	subs	r3, #4
 800699a:	429d      	cmp	r5, r3
 800699c:	461a      	mov	r2, r3
 800699e:	d32e      	bcc.n	80069fe <quorem+0xfa>
 80069a0:	613c      	str	r4, [r7, #16]
 80069a2:	4638      	mov	r0, r7
 80069a4:	f001 fc92 	bl	80082cc <__mcmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	db24      	blt.n	80069f6 <quorem+0xf2>
 80069ac:	3601      	adds	r6, #1
 80069ae:	4628      	mov	r0, r5
 80069b0:	f04f 0c00 	mov.w	ip, #0
 80069b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80069b8:	f8d0 e000 	ldr.w	lr, [r0]
 80069bc:	b293      	uxth	r3, r2
 80069be:	ebac 0303 	sub.w	r3, ip, r3
 80069c2:	0c12      	lsrs	r2, r2, #16
 80069c4:	fa13 f38e 	uxtah	r3, r3, lr
 80069c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069d6:	45c1      	cmp	r9, r8
 80069d8:	f840 3b04 	str.w	r3, [r0], #4
 80069dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069e0:	d2e8      	bcs.n	80069b4 <quorem+0xb0>
 80069e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069ea:	b922      	cbnz	r2, 80069f6 <quorem+0xf2>
 80069ec:	3b04      	subs	r3, #4
 80069ee:	429d      	cmp	r5, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	d30a      	bcc.n	8006a0a <quorem+0x106>
 80069f4:	613c      	str	r4, [r7, #16]
 80069f6:	4630      	mov	r0, r6
 80069f8:	b003      	add	sp, #12
 80069fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	3b04      	subs	r3, #4
 8006a02:	2a00      	cmp	r2, #0
 8006a04:	d1cc      	bne.n	80069a0 <quorem+0x9c>
 8006a06:	3c01      	subs	r4, #1
 8006a08:	e7c7      	b.n	800699a <quorem+0x96>
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d1f0      	bne.n	80069f4 <quorem+0xf0>
 8006a12:	3c01      	subs	r4, #1
 8006a14:	e7eb      	b.n	80069ee <quorem+0xea>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e7ee      	b.n	80069f8 <quorem+0xf4>
 8006a1a:	0000      	movs	r0, r0
 8006a1c:	0000      	movs	r0, r0
	...

08006a20 <_dtoa_r>:
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	ed2d 8b04 	vpush	{d8-d9}
 8006a28:	ec57 6b10 	vmov	r6, r7, d0
 8006a2c:	b093      	sub	sp, #76	; 0x4c
 8006a2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a34:	9106      	str	r1, [sp, #24]
 8006a36:	ee10 aa10 	vmov	sl, s0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a40:	46bb      	mov	fp, r7
 8006a42:	b975      	cbnz	r5, 8006a62 <_dtoa_r+0x42>
 8006a44:	2010      	movs	r0, #16
 8006a46:	f001 f94d 	bl	8007ce4 <malloc>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a4e:	b920      	cbnz	r0, 8006a5a <_dtoa_r+0x3a>
 8006a50:	4ba7      	ldr	r3, [pc, #668]	; (8006cf0 <_dtoa_r+0x2d0>)
 8006a52:	21ea      	movs	r1, #234	; 0xea
 8006a54:	48a7      	ldr	r0, [pc, #668]	; (8006cf4 <_dtoa_r+0x2d4>)
 8006a56:	f002 f8a9 	bl	8008bac <__assert_func>
 8006a5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a5e:	6005      	str	r5, [r0, #0]
 8006a60:	60c5      	str	r5, [r0, #12]
 8006a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a64:	6819      	ldr	r1, [r3, #0]
 8006a66:	b151      	cbz	r1, 8006a7e <_dtoa_r+0x5e>
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	604a      	str	r2, [r1, #4]
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4093      	lsls	r3, r2
 8006a70:	608b      	str	r3, [r1, #8]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f001 f99e 	bl	8007db4 <_Bfree>
 8006a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	1e3b      	subs	r3, r7, #0
 8006a80:	bfaa      	itet	ge
 8006a82:	2300      	movge	r3, #0
 8006a84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a88:	f8c8 3000 	strge.w	r3, [r8]
 8006a8c:	4b9a      	ldr	r3, [pc, #616]	; (8006cf8 <_dtoa_r+0x2d8>)
 8006a8e:	bfbc      	itt	lt
 8006a90:	2201      	movlt	r2, #1
 8006a92:	f8c8 2000 	strlt.w	r2, [r8]
 8006a96:	ea33 030b 	bics.w	r3, r3, fp
 8006a9a:	d11b      	bne.n	8006ad4 <_dtoa_r+0xb4>
 8006a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006aa8:	4333      	orrs	r3, r6
 8006aaa:	f000 8592 	beq.w	80075d2 <_dtoa_r+0xbb2>
 8006aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab0:	b963      	cbnz	r3, 8006acc <_dtoa_r+0xac>
 8006ab2:	4b92      	ldr	r3, [pc, #584]	; (8006cfc <_dtoa_r+0x2dc>)
 8006ab4:	e022      	b.n	8006afc <_dtoa_r+0xdc>
 8006ab6:	4b92      	ldr	r3, [pc, #584]	; (8006d00 <_dtoa_r+0x2e0>)
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	3308      	adds	r3, #8
 8006abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	9801      	ldr	r0, [sp, #4]
 8006ac2:	b013      	add	sp, #76	; 0x4c
 8006ac4:	ecbd 8b04 	vpop	{d8-d9}
 8006ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006acc:	4b8b      	ldr	r3, [pc, #556]	; (8006cfc <_dtoa_r+0x2dc>)
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	3303      	adds	r3, #3
 8006ad2:	e7f3      	b.n	8006abc <_dtoa_r+0x9c>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4650      	mov	r0, sl
 8006ada:	4659      	mov	r1, fp
 8006adc:	f7fa f81c 	bl	8000b18 <__aeabi_dcmpeq>
 8006ae0:	ec4b ab19 	vmov	d9, sl, fp
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	b158      	cbz	r0, 8006b00 <_dtoa_r+0xe0>
 8006ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aea:	2301      	movs	r3, #1
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 856b 	beq.w	80075cc <_dtoa_r+0xbac>
 8006af6:	4883      	ldr	r0, [pc, #524]	; (8006d04 <_dtoa_r+0x2e4>)
 8006af8:	6018      	str	r0, [r3, #0]
 8006afa:	1e43      	subs	r3, r0, #1
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	e7df      	b.n	8006ac0 <_dtoa_r+0xa0>
 8006b00:	ec4b ab10 	vmov	d0, sl, fp
 8006b04:	aa10      	add	r2, sp, #64	; 0x40
 8006b06:	a911      	add	r1, sp, #68	; 0x44
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f001 fd01 	bl	8008510 <__d2b>
 8006b0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b12:	ee08 0a10 	vmov	s16, r0
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	f000 8084 	beq.w	8006c24 <_dtoa_r+0x204>
 8006b1c:	ee19 3a90 	vmov	r3, s19
 8006b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b28:	4656      	mov	r6, sl
 8006b2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b36:	4b74      	ldr	r3, [pc, #464]	; (8006d08 <_dtoa_r+0x2e8>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	f7f9 fbcb 	bl	80002d8 <__aeabi_dsub>
 8006b42:	a365      	add	r3, pc, #404	; (adr r3, 8006cd8 <_dtoa_r+0x2b8>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fd7e 	bl	8000648 <__aeabi_dmul>
 8006b4c:	a364      	add	r3, pc, #400	; (adr r3, 8006ce0 <_dtoa_r+0x2c0>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fbc3 	bl	80002dc <__adddf3>
 8006b56:	4606      	mov	r6, r0
 8006b58:	4628      	mov	r0, r5
 8006b5a:	460f      	mov	r7, r1
 8006b5c:	f7f9 fd0a 	bl	8000574 <__aeabi_i2d>
 8006b60:	a361      	add	r3, pc, #388	; (adr r3, 8006ce8 <_dtoa_r+0x2c8>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 fd6f 	bl	8000648 <__aeabi_dmul>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4630      	mov	r0, r6
 8006b70:	4639      	mov	r1, r7
 8006b72:	f7f9 fbb3 	bl	80002dc <__adddf3>
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	f7fa f815 	bl	8000ba8 <__aeabi_d2iz>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	9000      	str	r0, [sp, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7f9 ffd0 	bl	8000b2c <__aeabi_dcmplt>
 8006b8c:	b150      	cbz	r0, 8006ba4 <_dtoa_r+0x184>
 8006b8e:	9800      	ldr	r0, [sp, #0]
 8006b90:	f7f9 fcf0 	bl	8000574 <__aeabi_i2d>
 8006b94:	4632      	mov	r2, r6
 8006b96:	463b      	mov	r3, r7
 8006b98:	f7f9 ffbe 	bl	8000b18 <__aeabi_dcmpeq>
 8006b9c:	b910      	cbnz	r0, 8006ba4 <_dtoa_r+0x184>
 8006b9e:	9b00      	ldr	r3, [sp, #0]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	9b00      	ldr	r3, [sp, #0]
 8006ba6:	2b16      	cmp	r3, #22
 8006ba8:	d85a      	bhi.n	8006c60 <_dtoa_r+0x240>
 8006baa:	9a00      	ldr	r2, [sp, #0]
 8006bac:	4b57      	ldr	r3, [pc, #348]	; (8006d0c <_dtoa_r+0x2ec>)
 8006bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	ec51 0b19 	vmov	r0, r1, d9
 8006bba:	f7f9 ffb7 	bl	8000b2c <__aeabi_dcmplt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d050      	beq.n	8006c64 <_dtoa_r+0x244>
 8006bc2:	9b00      	ldr	r3, [sp, #0]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bce:	1b5d      	subs	r5, r3, r5
 8006bd0:	1e6b      	subs	r3, r5, #1
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	bf45      	ittet	mi
 8006bd6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006bda:	9304      	strmi	r3, [sp, #16]
 8006bdc:	2300      	movpl	r3, #0
 8006bde:	2300      	movmi	r3, #0
 8006be0:	bf4c      	ite	mi
 8006be2:	9305      	strmi	r3, [sp, #20]
 8006be4:	9304      	strpl	r3, [sp, #16]
 8006be6:	9b00      	ldr	r3, [sp, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	db3d      	blt.n	8006c68 <_dtoa_r+0x248>
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	9a00      	ldr	r2, [sp, #0]
 8006bf0:	920a      	str	r2, [sp, #40]	; 0x28
 8006bf2:	4413      	add	r3, r2
 8006bf4:	9305      	str	r3, [sp, #20]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9307      	str	r3, [sp, #28]
 8006bfa:	9b06      	ldr	r3, [sp, #24]
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	f200 8089 	bhi.w	8006d14 <_dtoa_r+0x2f4>
 8006c02:	2b05      	cmp	r3, #5
 8006c04:	bfc4      	itt	gt
 8006c06:	3b04      	subgt	r3, #4
 8006c08:	9306      	strgt	r3, [sp, #24]
 8006c0a:	9b06      	ldr	r3, [sp, #24]
 8006c0c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c10:	bfcc      	ite	gt
 8006c12:	2500      	movgt	r5, #0
 8006c14:	2501      	movle	r5, #1
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	f200 8087 	bhi.w	8006d2a <_dtoa_r+0x30a>
 8006c1c:	e8df f003 	tbb	[pc, r3]
 8006c20:	59383a2d 	.word	0x59383a2d
 8006c24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c28:	441d      	add	r5, r3
 8006c2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	bfc1      	itttt	gt
 8006c32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c42:	bfda      	itte	le
 8006c44:	f1c3 0320 	rsble	r3, r3, #32
 8006c48:	fa06 f003 	lslle.w	r0, r6, r3
 8006c4c:	4318      	orrgt	r0, r3
 8006c4e:	f7f9 fc81 	bl	8000554 <__aeabi_ui2d>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4606      	mov	r6, r0
 8006c56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c5a:	3d01      	subs	r5, #1
 8006c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c5e:	e76a      	b.n	8006b36 <_dtoa_r+0x116>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e7b2      	b.n	8006bca <_dtoa_r+0x1aa>
 8006c64:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c66:	e7b1      	b.n	8006bcc <_dtoa_r+0x1ac>
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	9a00      	ldr	r2, [sp, #0]
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	4253      	negs	r3, r2
 8006c72:	9307      	str	r3, [sp, #28]
 8006c74:	2300      	movs	r3, #0
 8006c76:	930a      	str	r3, [sp, #40]	; 0x28
 8006c78:	e7bf      	b.n	8006bfa <_dtoa_r+0x1da>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9308      	str	r3, [sp, #32]
 8006c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dc55      	bgt.n	8006d30 <_dtoa_r+0x310>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c8e:	e00c      	b.n	8006caa <_dtoa_r+0x28a>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e7f3      	b.n	8006c7c <_dtoa_r+0x25c>
 8006c94:	2300      	movs	r3, #0
 8006c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c98:	9308      	str	r3, [sp, #32]
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	9302      	str	r3, [sp, #8]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	9303      	str	r3, [sp, #12]
 8006ca6:	bfb8      	it	lt
 8006ca8:	2301      	movlt	r3, #1
 8006caa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006cac:	2200      	movs	r2, #0
 8006cae:	6042      	str	r2, [r0, #4]
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	f102 0614 	add.w	r6, r2, #20
 8006cb6:	429e      	cmp	r6, r3
 8006cb8:	6841      	ldr	r1, [r0, #4]
 8006cba:	d93d      	bls.n	8006d38 <_dtoa_r+0x318>
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f001 f839 	bl	8007d34 <_Balloc>
 8006cc2:	9001      	str	r0, [sp, #4]
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d13b      	bne.n	8006d40 <_dtoa_r+0x320>
 8006cc8:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <_dtoa_r+0x2f0>)
 8006cca:	4602      	mov	r2, r0
 8006ccc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cd0:	e6c0      	b.n	8006a54 <_dtoa_r+0x34>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7df      	b.n	8006c96 <_dtoa_r+0x276>
 8006cd6:	bf00      	nop
 8006cd8:	636f4361 	.word	0x636f4361
 8006cdc:	3fd287a7 	.word	0x3fd287a7
 8006ce0:	8b60c8b3 	.word	0x8b60c8b3
 8006ce4:	3fc68a28 	.word	0x3fc68a28
 8006ce8:	509f79fb 	.word	0x509f79fb
 8006cec:	3fd34413 	.word	0x3fd34413
 8006cf0:	08009895 	.word	0x08009895
 8006cf4:	080098ac 	.word	0x080098ac
 8006cf8:	7ff00000 	.word	0x7ff00000
 8006cfc:	08009891 	.word	0x08009891
 8006d00:	08009888 	.word	0x08009888
 8006d04:	08009811 	.word	0x08009811
 8006d08:	3ff80000 	.word	0x3ff80000
 8006d0c:	08009a18 	.word	0x08009a18
 8006d10:	08009907 	.word	0x08009907
 8006d14:	2501      	movs	r5, #1
 8006d16:	2300      	movs	r3, #0
 8006d18:	9306      	str	r3, [sp, #24]
 8006d1a:	9508      	str	r5, [sp, #32]
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	2312      	movs	r3, #18
 8006d28:	e7b0      	b.n	8006c8c <_dtoa_r+0x26c>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	9308      	str	r3, [sp, #32]
 8006d2e:	e7f5      	b.n	8006d1c <_dtoa_r+0x2fc>
 8006d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d36:	e7b8      	b.n	8006caa <_dtoa_r+0x28a>
 8006d38:	3101      	adds	r1, #1
 8006d3a:	6041      	str	r1, [r0, #4]
 8006d3c:	0052      	lsls	r2, r2, #1
 8006d3e:	e7b8      	b.n	8006cb2 <_dtoa_r+0x292>
 8006d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d42:	9a01      	ldr	r2, [sp, #4]
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	2b0e      	cmp	r3, #14
 8006d4a:	f200 809d 	bhi.w	8006e88 <_dtoa_r+0x468>
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	f000 809a 	beq.w	8006e88 <_dtoa_r+0x468>
 8006d54:	9b00      	ldr	r3, [sp, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dd32      	ble.n	8006dc0 <_dtoa_r+0x3a0>
 8006d5a:	4ab7      	ldr	r2, [pc, #732]	; (8007038 <_dtoa_r+0x618>)
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d68:	9b00      	ldr	r3, [sp, #0]
 8006d6a:	05d8      	lsls	r0, r3, #23
 8006d6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d70:	d516      	bpl.n	8006da0 <_dtoa_r+0x380>
 8006d72:	4bb2      	ldr	r3, [pc, #712]	; (800703c <_dtoa_r+0x61c>)
 8006d74:	ec51 0b19 	vmov	r0, r1, d9
 8006d78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d7c:	f7f9 fd8e 	bl	800089c <__aeabi_ddiv>
 8006d80:	f007 070f 	and.w	r7, r7, #15
 8006d84:	4682      	mov	sl, r0
 8006d86:	468b      	mov	fp, r1
 8006d88:	2503      	movs	r5, #3
 8006d8a:	4eac      	ldr	r6, [pc, #688]	; (800703c <_dtoa_r+0x61c>)
 8006d8c:	b957      	cbnz	r7, 8006da4 <_dtoa_r+0x384>
 8006d8e:	4642      	mov	r2, r8
 8006d90:	464b      	mov	r3, r9
 8006d92:	4650      	mov	r0, sl
 8006d94:	4659      	mov	r1, fp
 8006d96:	f7f9 fd81 	bl	800089c <__aeabi_ddiv>
 8006d9a:	4682      	mov	sl, r0
 8006d9c:	468b      	mov	fp, r1
 8006d9e:	e028      	b.n	8006df2 <_dtoa_r+0x3d2>
 8006da0:	2502      	movs	r5, #2
 8006da2:	e7f2      	b.n	8006d8a <_dtoa_r+0x36a>
 8006da4:	07f9      	lsls	r1, r7, #31
 8006da6:	d508      	bpl.n	8006dba <_dtoa_r+0x39a>
 8006da8:	4640      	mov	r0, r8
 8006daa:	4649      	mov	r1, r9
 8006dac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006db0:	f7f9 fc4a 	bl	8000648 <__aeabi_dmul>
 8006db4:	3501      	adds	r5, #1
 8006db6:	4680      	mov	r8, r0
 8006db8:	4689      	mov	r9, r1
 8006dba:	107f      	asrs	r7, r7, #1
 8006dbc:	3608      	adds	r6, #8
 8006dbe:	e7e5      	b.n	8006d8c <_dtoa_r+0x36c>
 8006dc0:	f000 809b 	beq.w	8006efa <_dtoa_r+0x4da>
 8006dc4:	9b00      	ldr	r3, [sp, #0]
 8006dc6:	4f9d      	ldr	r7, [pc, #628]	; (800703c <_dtoa_r+0x61c>)
 8006dc8:	425e      	negs	r6, r3
 8006dca:	4b9b      	ldr	r3, [pc, #620]	; (8007038 <_dtoa_r+0x618>)
 8006dcc:	f006 020f 	and.w	r2, r6, #15
 8006dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	ec51 0b19 	vmov	r0, r1, d9
 8006ddc:	f7f9 fc34 	bl	8000648 <__aeabi_dmul>
 8006de0:	1136      	asrs	r6, r6, #4
 8006de2:	4682      	mov	sl, r0
 8006de4:	468b      	mov	fp, r1
 8006de6:	2300      	movs	r3, #0
 8006de8:	2502      	movs	r5, #2
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	d17a      	bne.n	8006ee4 <_dtoa_r+0x4c4>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1d3      	bne.n	8006d9a <_dtoa_r+0x37a>
 8006df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8082 	beq.w	8006efe <_dtoa_r+0x4de>
 8006dfa:	4b91      	ldr	r3, [pc, #580]	; (8007040 <_dtoa_r+0x620>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4650      	mov	r0, sl
 8006e00:	4659      	mov	r1, fp
 8006e02:	f7f9 fe93 	bl	8000b2c <__aeabi_dcmplt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d079      	beq.n	8006efe <_dtoa_r+0x4de>
 8006e0a:	9b03      	ldr	r3, [sp, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d076      	beq.n	8006efe <_dtoa_r+0x4de>
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd36      	ble.n	8006e84 <_dtoa_r+0x464>
 8006e16:	9b00      	ldr	r3, [sp, #0]
 8006e18:	4650      	mov	r0, sl
 8006e1a:	4659      	mov	r1, fp
 8006e1c:	1e5f      	subs	r7, r3, #1
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4b88      	ldr	r3, [pc, #544]	; (8007044 <_dtoa_r+0x624>)
 8006e22:	f7f9 fc11 	bl	8000648 <__aeabi_dmul>
 8006e26:	9e02      	ldr	r6, [sp, #8]
 8006e28:	4682      	mov	sl, r0
 8006e2a:	468b      	mov	fp, r1
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7f9 fba0 	bl	8000574 <__aeabi_i2d>
 8006e34:	4652      	mov	r2, sl
 8006e36:	465b      	mov	r3, fp
 8006e38:	f7f9 fc06 	bl	8000648 <__aeabi_dmul>
 8006e3c:	4b82      	ldr	r3, [pc, #520]	; (8007048 <_dtoa_r+0x628>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f7f9 fa4c 	bl	80002dc <__adddf3>
 8006e44:	46d0      	mov	r8, sl
 8006e46:	46d9      	mov	r9, fp
 8006e48:	4682      	mov	sl, r0
 8006e4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	d158      	bne.n	8006f04 <_dtoa_r+0x4e4>
 8006e52:	4b7e      	ldr	r3, [pc, #504]	; (800704c <_dtoa_r+0x62c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	4640      	mov	r0, r8
 8006e58:	4649      	mov	r1, r9
 8006e5a:	f7f9 fa3d 	bl	80002d8 <__aeabi_dsub>
 8006e5e:	4652      	mov	r2, sl
 8006e60:	465b      	mov	r3, fp
 8006e62:	4680      	mov	r8, r0
 8006e64:	4689      	mov	r9, r1
 8006e66:	f7f9 fe7f 	bl	8000b68 <__aeabi_dcmpgt>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f040 8295 	bne.w	800739a <_dtoa_r+0x97a>
 8006e70:	4652      	mov	r2, sl
 8006e72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	f7f9 fe57 	bl	8000b2c <__aeabi_dcmplt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	f040 8289 	bne.w	8007396 <_dtoa_r+0x976>
 8006e84:	ec5b ab19 	vmov	sl, fp, d9
 8006e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f2c0 8148 	blt.w	8007120 <_dtoa_r+0x700>
 8006e90:	9a00      	ldr	r2, [sp, #0]
 8006e92:	2a0e      	cmp	r2, #14
 8006e94:	f300 8144 	bgt.w	8007120 <_dtoa_r+0x700>
 8006e98:	4b67      	ldr	r3, [pc, #412]	; (8007038 <_dtoa_r+0x618>)
 8006e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f280 80d5 	bge.w	8007054 <_dtoa_r+0x634>
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f300 80d1 	bgt.w	8007054 <_dtoa_r+0x634>
 8006eb2:	f040 826f 	bne.w	8007394 <_dtoa_r+0x974>
 8006eb6:	4b65      	ldr	r3, [pc, #404]	; (800704c <_dtoa_r+0x62c>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 fbc3 	bl	8000648 <__aeabi_dmul>
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	465b      	mov	r3, fp
 8006ec6:	f7f9 fe45 	bl	8000b54 <__aeabi_dcmpge>
 8006eca:	9e03      	ldr	r6, [sp, #12]
 8006ecc:	4637      	mov	r7, r6
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f040 8245 	bne.w	800735e <_dtoa_r+0x93e>
 8006ed4:	9d01      	ldr	r5, [sp, #4]
 8006ed6:	2331      	movs	r3, #49	; 0x31
 8006ed8:	f805 3b01 	strb.w	r3, [r5], #1
 8006edc:	9b00      	ldr	r3, [sp, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	e240      	b.n	8007366 <_dtoa_r+0x946>
 8006ee4:	07f2      	lsls	r2, r6, #31
 8006ee6:	d505      	bpl.n	8006ef4 <_dtoa_r+0x4d4>
 8006ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eec:	f7f9 fbac 	bl	8000648 <__aeabi_dmul>
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	1076      	asrs	r6, r6, #1
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	e777      	b.n	8006dea <_dtoa_r+0x3ca>
 8006efa:	2502      	movs	r5, #2
 8006efc:	e779      	b.n	8006df2 <_dtoa_r+0x3d2>
 8006efe:	9f00      	ldr	r7, [sp, #0]
 8006f00:	9e03      	ldr	r6, [sp, #12]
 8006f02:	e794      	b.n	8006e2e <_dtoa_r+0x40e>
 8006f04:	9901      	ldr	r1, [sp, #4]
 8006f06:	4b4c      	ldr	r3, [pc, #304]	; (8007038 <_dtoa_r+0x618>)
 8006f08:	4431      	add	r1, r6
 8006f0a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f0c:	9908      	ldr	r1, [sp, #32]
 8006f0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f16:	2900      	cmp	r1, #0
 8006f18:	d043      	beq.n	8006fa2 <_dtoa_r+0x582>
 8006f1a:	494d      	ldr	r1, [pc, #308]	; (8007050 <_dtoa_r+0x630>)
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f7f9 fcbd 	bl	800089c <__aeabi_ddiv>
 8006f22:	4652      	mov	r2, sl
 8006f24:	465b      	mov	r3, fp
 8006f26:	f7f9 f9d7 	bl	80002d8 <__aeabi_dsub>
 8006f2a:	9d01      	ldr	r5, [sp, #4]
 8006f2c:	4682      	mov	sl, r0
 8006f2e:	468b      	mov	fp, r1
 8006f30:	4649      	mov	r1, r9
 8006f32:	4640      	mov	r0, r8
 8006f34:	f7f9 fe38 	bl	8000ba8 <__aeabi_d2iz>
 8006f38:	4606      	mov	r6, r0
 8006f3a:	f7f9 fb1b 	bl	8000574 <__aeabi_i2d>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 f9c7 	bl	80002d8 <__aeabi_dsub>
 8006f4a:	3630      	adds	r6, #48	; 0x30
 8006f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	465b      	mov	r3, fp
 8006f54:	4680      	mov	r8, r0
 8006f56:	4689      	mov	r9, r1
 8006f58:	f7f9 fde8 	bl	8000b2c <__aeabi_dcmplt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d163      	bne.n	8007028 <_dtoa_r+0x608>
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	4936      	ldr	r1, [pc, #216]	; (8007040 <_dtoa_r+0x620>)
 8006f66:	2000      	movs	r0, #0
 8006f68:	f7f9 f9b6 	bl	80002d8 <__aeabi_dsub>
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	465b      	mov	r3, fp
 8006f70:	f7f9 fddc 	bl	8000b2c <__aeabi_dcmplt>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f040 80b5 	bne.w	80070e4 <_dtoa_r+0x6c4>
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f7c:	429d      	cmp	r5, r3
 8006f7e:	d081      	beq.n	8006e84 <_dtoa_r+0x464>
 8006f80:	4b30      	ldr	r3, [pc, #192]	; (8007044 <_dtoa_r+0x624>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	f7f9 fb5e 	bl	8000648 <__aeabi_dmul>
 8006f8c:	4b2d      	ldr	r3, [pc, #180]	; (8007044 <_dtoa_r+0x624>)
 8006f8e:	4682      	mov	sl, r0
 8006f90:	468b      	mov	fp, r1
 8006f92:	4640      	mov	r0, r8
 8006f94:	4649      	mov	r1, r9
 8006f96:	2200      	movs	r2, #0
 8006f98:	f7f9 fb56 	bl	8000648 <__aeabi_dmul>
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	4689      	mov	r9, r1
 8006fa0:	e7c6      	b.n	8006f30 <_dtoa_r+0x510>
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	f7f9 fb4f 	bl	8000648 <__aeabi_dmul>
 8006faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fac:	9d01      	ldr	r5, [sp, #4]
 8006fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	468b      	mov	fp, r1
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f7f9 fdf6 	bl	8000ba8 <__aeabi_d2iz>
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	f7f9 fad9 	bl	8000574 <__aeabi_i2d>
 8006fc2:	3630      	adds	r6, #48	; 0x30
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 f984 	bl	80002d8 <__aeabi_dsub>
 8006fd0:	f805 6b01 	strb.w	r6, [r5], #1
 8006fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fd6:	429d      	cmp	r5, r3
 8006fd8:	4680      	mov	r8, r0
 8006fda:	4689      	mov	r9, r1
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	d124      	bne.n	800702c <_dtoa_r+0x60c>
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <_dtoa_r+0x630>)
 8006fe4:	4650      	mov	r0, sl
 8006fe6:	4659      	mov	r1, fp
 8006fe8:	f7f9 f978 	bl	80002dc <__adddf3>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 fdb8 	bl	8000b68 <__aeabi_dcmpgt>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d173      	bne.n	80070e4 <_dtoa_r+0x6c4>
 8006ffc:	4652      	mov	r2, sl
 8006ffe:	465b      	mov	r3, fp
 8007000:	4913      	ldr	r1, [pc, #76]	; (8007050 <_dtoa_r+0x630>)
 8007002:	2000      	movs	r0, #0
 8007004:	f7f9 f968 	bl	80002d8 <__aeabi_dsub>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 fd8c 	bl	8000b2c <__aeabi_dcmplt>
 8007014:	2800      	cmp	r0, #0
 8007016:	f43f af35 	beq.w	8006e84 <_dtoa_r+0x464>
 800701a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800701c:	1e6b      	subs	r3, r5, #1
 800701e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007020:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007024:	2b30      	cmp	r3, #48	; 0x30
 8007026:	d0f8      	beq.n	800701a <_dtoa_r+0x5fa>
 8007028:	9700      	str	r7, [sp, #0]
 800702a:	e049      	b.n	80070c0 <_dtoa_r+0x6a0>
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <_dtoa_r+0x624>)
 800702e:	f7f9 fb0b 	bl	8000648 <__aeabi_dmul>
 8007032:	4680      	mov	r8, r0
 8007034:	4689      	mov	r9, r1
 8007036:	e7bd      	b.n	8006fb4 <_dtoa_r+0x594>
 8007038:	08009a18 	.word	0x08009a18
 800703c:	080099f0 	.word	0x080099f0
 8007040:	3ff00000 	.word	0x3ff00000
 8007044:	40240000 	.word	0x40240000
 8007048:	401c0000 	.word	0x401c0000
 800704c:	40140000 	.word	0x40140000
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	9d01      	ldr	r5, [sp, #4]
 8007056:	4656      	mov	r6, sl
 8007058:	465f      	mov	r7, fp
 800705a:	4642      	mov	r2, r8
 800705c:	464b      	mov	r3, r9
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	f7f9 fc1b 	bl	800089c <__aeabi_ddiv>
 8007066:	f7f9 fd9f 	bl	8000ba8 <__aeabi_d2iz>
 800706a:	4682      	mov	sl, r0
 800706c:	f7f9 fa82 	bl	8000574 <__aeabi_i2d>
 8007070:	4642      	mov	r2, r8
 8007072:	464b      	mov	r3, r9
 8007074:	f7f9 fae8 	bl	8000648 <__aeabi_dmul>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4630      	mov	r0, r6
 800707e:	4639      	mov	r1, r7
 8007080:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007084:	f7f9 f928 	bl	80002d8 <__aeabi_dsub>
 8007088:	f805 6b01 	strb.w	r6, [r5], #1
 800708c:	9e01      	ldr	r6, [sp, #4]
 800708e:	9f03      	ldr	r7, [sp, #12]
 8007090:	1bae      	subs	r6, r5, r6
 8007092:	42b7      	cmp	r7, r6
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	d135      	bne.n	8007106 <_dtoa_r+0x6e6>
 800709a:	f7f9 f91f 	bl	80002dc <__adddf3>
 800709e:	4642      	mov	r2, r8
 80070a0:	464b      	mov	r3, r9
 80070a2:	4606      	mov	r6, r0
 80070a4:	460f      	mov	r7, r1
 80070a6:	f7f9 fd5f 	bl	8000b68 <__aeabi_dcmpgt>
 80070aa:	b9d0      	cbnz	r0, 80070e2 <_dtoa_r+0x6c2>
 80070ac:	4642      	mov	r2, r8
 80070ae:	464b      	mov	r3, r9
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 fd30 	bl	8000b18 <__aeabi_dcmpeq>
 80070b8:	b110      	cbz	r0, 80070c0 <_dtoa_r+0x6a0>
 80070ba:	f01a 0f01 	tst.w	sl, #1
 80070be:	d110      	bne.n	80070e2 <_dtoa_r+0x6c2>
 80070c0:	4620      	mov	r0, r4
 80070c2:	ee18 1a10 	vmov	r1, s16
 80070c6:	f000 fe75 	bl	8007db4 <_Bfree>
 80070ca:	2300      	movs	r3, #0
 80070cc:	9800      	ldr	r0, [sp, #0]
 80070ce:	702b      	strb	r3, [r5, #0]
 80070d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070d2:	3001      	adds	r0, #1
 80070d4:	6018      	str	r0, [r3, #0]
 80070d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f43f acf1 	beq.w	8006ac0 <_dtoa_r+0xa0>
 80070de:	601d      	str	r5, [r3, #0]
 80070e0:	e4ee      	b.n	8006ac0 <_dtoa_r+0xa0>
 80070e2:	9f00      	ldr	r7, [sp, #0]
 80070e4:	462b      	mov	r3, r5
 80070e6:	461d      	mov	r5, r3
 80070e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ec:	2a39      	cmp	r2, #57	; 0x39
 80070ee:	d106      	bne.n	80070fe <_dtoa_r+0x6de>
 80070f0:	9a01      	ldr	r2, [sp, #4]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d1f7      	bne.n	80070e6 <_dtoa_r+0x6c6>
 80070f6:	9901      	ldr	r1, [sp, #4]
 80070f8:	2230      	movs	r2, #48	; 0x30
 80070fa:	3701      	adds	r7, #1
 80070fc:	700a      	strb	r2, [r1, #0]
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	3201      	adds	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e790      	b.n	8007028 <_dtoa_r+0x608>
 8007106:	4ba6      	ldr	r3, [pc, #664]	; (80073a0 <_dtoa_r+0x980>)
 8007108:	2200      	movs	r2, #0
 800710a:	f7f9 fa9d 	bl	8000648 <__aeabi_dmul>
 800710e:	2200      	movs	r2, #0
 8007110:	2300      	movs	r3, #0
 8007112:	4606      	mov	r6, r0
 8007114:	460f      	mov	r7, r1
 8007116:	f7f9 fcff 	bl	8000b18 <__aeabi_dcmpeq>
 800711a:	2800      	cmp	r0, #0
 800711c:	d09d      	beq.n	800705a <_dtoa_r+0x63a>
 800711e:	e7cf      	b.n	80070c0 <_dtoa_r+0x6a0>
 8007120:	9a08      	ldr	r2, [sp, #32]
 8007122:	2a00      	cmp	r2, #0
 8007124:	f000 80d7 	beq.w	80072d6 <_dtoa_r+0x8b6>
 8007128:	9a06      	ldr	r2, [sp, #24]
 800712a:	2a01      	cmp	r2, #1
 800712c:	f300 80ba 	bgt.w	80072a4 <_dtoa_r+0x884>
 8007130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007132:	2a00      	cmp	r2, #0
 8007134:	f000 80b2 	beq.w	800729c <_dtoa_r+0x87c>
 8007138:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800713c:	9e07      	ldr	r6, [sp, #28]
 800713e:	9d04      	ldr	r5, [sp, #16]
 8007140:	9a04      	ldr	r2, [sp, #16]
 8007142:	441a      	add	r2, r3
 8007144:	9204      	str	r2, [sp, #16]
 8007146:	9a05      	ldr	r2, [sp, #20]
 8007148:	2101      	movs	r1, #1
 800714a:	441a      	add	r2, r3
 800714c:	4620      	mov	r0, r4
 800714e:	9205      	str	r2, [sp, #20]
 8007150:	f000 ff32 	bl	8007fb8 <__i2b>
 8007154:	4607      	mov	r7, r0
 8007156:	2d00      	cmp	r5, #0
 8007158:	dd0c      	ble.n	8007174 <_dtoa_r+0x754>
 800715a:	9b05      	ldr	r3, [sp, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	dd09      	ble.n	8007174 <_dtoa_r+0x754>
 8007160:	42ab      	cmp	r3, r5
 8007162:	9a04      	ldr	r2, [sp, #16]
 8007164:	bfa8      	it	ge
 8007166:	462b      	movge	r3, r5
 8007168:	1ad2      	subs	r2, r2, r3
 800716a:	9204      	str	r2, [sp, #16]
 800716c:	9a05      	ldr	r2, [sp, #20]
 800716e:	1aed      	subs	r5, r5, r3
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	b31b      	cbz	r3, 80071c0 <_dtoa_r+0x7a0>
 8007178:	9b08      	ldr	r3, [sp, #32]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80af 	beq.w	80072de <_dtoa_r+0x8be>
 8007180:	2e00      	cmp	r6, #0
 8007182:	dd13      	ble.n	80071ac <_dtoa_r+0x78c>
 8007184:	4639      	mov	r1, r7
 8007186:	4632      	mov	r2, r6
 8007188:	4620      	mov	r0, r4
 800718a:	f000 ffd5 	bl	8008138 <__pow5mult>
 800718e:	ee18 2a10 	vmov	r2, s16
 8007192:	4601      	mov	r1, r0
 8007194:	4607      	mov	r7, r0
 8007196:	4620      	mov	r0, r4
 8007198:	f000 ff24 	bl	8007fe4 <__multiply>
 800719c:	ee18 1a10 	vmov	r1, s16
 80071a0:	4680      	mov	r8, r0
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 fe06 	bl	8007db4 <_Bfree>
 80071a8:	ee08 8a10 	vmov	s16, r8
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	1b9a      	subs	r2, r3, r6
 80071b0:	d006      	beq.n	80071c0 <_dtoa_r+0x7a0>
 80071b2:	ee18 1a10 	vmov	r1, s16
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 ffbe 	bl	8008138 <__pow5mult>
 80071bc:	ee08 0a10 	vmov	s16, r0
 80071c0:	2101      	movs	r1, #1
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fef8 	bl	8007fb8 <__i2b>
 80071c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	4606      	mov	r6, r0
 80071ce:	f340 8088 	ble.w	80072e2 <_dtoa_r+0x8c2>
 80071d2:	461a      	mov	r2, r3
 80071d4:	4601      	mov	r1, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 ffae 	bl	8008138 <__pow5mult>
 80071dc:	9b06      	ldr	r3, [sp, #24]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	4606      	mov	r6, r0
 80071e2:	f340 8081 	ble.w	80072e8 <_dtoa_r+0x8c8>
 80071e6:	f04f 0800 	mov.w	r8, #0
 80071ea:	6933      	ldr	r3, [r6, #16]
 80071ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071f0:	6918      	ldr	r0, [r3, #16]
 80071f2:	f000 fe91 	bl	8007f18 <__hi0bits>
 80071f6:	f1c0 0020 	rsb	r0, r0, #32
 80071fa:	9b05      	ldr	r3, [sp, #20]
 80071fc:	4418      	add	r0, r3
 80071fe:	f010 001f 	ands.w	r0, r0, #31
 8007202:	f000 8092 	beq.w	800732a <_dtoa_r+0x90a>
 8007206:	f1c0 0320 	rsb	r3, r0, #32
 800720a:	2b04      	cmp	r3, #4
 800720c:	f340 808a 	ble.w	8007324 <_dtoa_r+0x904>
 8007210:	f1c0 001c 	rsb	r0, r0, #28
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	4403      	add	r3, r0
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	4403      	add	r3, r0
 800721e:	4405      	add	r5, r0
 8007220:	9305      	str	r3, [sp, #20]
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dd07      	ble.n	8007238 <_dtoa_r+0x818>
 8007228:	ee18 1a10 	vmov	r1, s16
 800722c:	461a      	mov	r2, r3
 800722e:	4620      	mov	r0, r4
 8007230:	f000 ffdc 	bl	80081ec <__lshift>
 8007234:	ee08 0a10 	vmov	s16, r0
 8007238:	9b05      	ldr	r3, [sp, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	dd05      	ble.n	800724a <_dtoa_r+0x82a>
 800723e:	4631      	mov	r1, r6
 8007240:	461a      	mov	r2, r3
 8007242:	4620      	mov	r0, r4
 8007244:	f000 ffd2 	bl	80081ec <__lshift>
 8007248:	4606      	mov	r6, r0
 800724a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d06e      	beq.n	800732e <_dtoa_r+0x90e>
 8007250:	ee18 0a10 	vmov	r0, s16
 8007254:	4631      	mov	r1, r6
 8007256:	f001 f839 	bl	80082cc <__mcmp>
 800725a:	2800      	cmp	r0, #0
 800725c:	da67      	bge.n	800732e <_dtoa_r+0x90e>
 800725e:	9b00      	ldr	r3, [sp, #0]
 8007260:	3b01      	subs	r3, #1
 8007262:	ee18 1a10 	vmov	r1, s16
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	220a      	movs	r2, #10
 800726a:	2300      	movs	r3, #0
 800726c:	4620      	mov	r0, r4
 800726e:	f000 fdc3 	bl	8007df8 <__multadd>
 8007272:	9b08      	ldr	r3, [sp, #32]
 8007274:	ee08 0a10 	vmov	s16, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 81b1 	beq.w	80075e0 <_dtoa_r+0xbc0>
 800727e:	2300      	movs	r3, #0
 8007280:	4639      	mov	r1, r7
 8007282:	220a      	movs	r2, #10
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fdb7 	bl	8007df8 <__multadd>
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	4607      	mov	r7, r0
 8007290:	f300 808e 	bgt.w	80073b0 <_dtoa_r+0x990>
 8007294:	9b06      	ldr	r3, [sp, #24]
 8007296:	2b02      	cmp	r3, #2
 8007298:	dc51      	bgt.n	800733e <_dtoa_r+0x91e>
 800729a:	e089      	b.n	80073b0 <_dtoa_r+0x990>
 800729c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800729e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072a2:	e74b      	b.n	800713c <_dtoa_r+0x71c>
 80072a4:	9b03      	ldr	r3, [sp, #12]
 80072a6:	1e5e      	subs	r6, r3, #1
 80072a8:	9b07      	ldr	r3, [sp, #28]
 80072aa:	42b3      	cmp	r3, r6
 80072ac:	bfbf      	itttt	lt
 80072ae:	9b07      	ldrlt	r3, [sp, #28]
 80072b0:	9607      	strlt	r6, [sp, #28]
 80072b2:	1af2      	sublt	r2, r6, r3
 80072b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072b6:	bfb6      	itet	lt
 80072b8:	189b      	addlt	r3, r3, r2
 80072ba:	1b9e      	subge	r6, r3, r6
 80072bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	bfb8      	it	lt
 80072c2:	2600      	movlt	r6, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfb7      	itett	lt
 80072c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80072cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80072d0:	1a9d      	sublt	r5, r3, r2
 80072d2:	2300      	movlt	r3, #0
 80072d4:	e734      	b.n	8007140 <_dtoa_r+0x720>
 80072d6:	9e07      	ldr	r6, [sp, #28]
 80072d8:	9d04      	ldr	r5, [sp, #16]
 80072da:	9f08      	ldr	r7, [sp, #32]
 80072dc:	e73b      	b.n	8007156 <_dtoa_r+0x736>
 80072de:	9a07      	ldr	r2, [sp, #28]
 80072e0:	e767      	b.n	80071b2 <_dtoa_r+0x792>
 80072e2:	9b06      	ldr	r3, [sp, #24]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	dc18      	bgt.n	800731a <_dtoa_r+0x8fa>
 80072e8:	f1ba 0f00 	cmp.w	sl, #0
 80072ec:	d115      	bne.n	800731a <_dtoa_r+0x8fa>
 80072ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072f2:	b993      	cbnz	r3, 800731a <_dtoa_r+0x8fa>
 80072f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072f8:	0d1b      	lsrs	r3, r3, #20
 80072fa:	051b      	lsls	r3, r3, #20
 80072fc:	b183      	cbz	r3, 8007320 <_dtoa_r+0x900>
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	3301      	adds	r3, #1
 8007302:	9304      	str	r3, [sp, #16]
 8007304:	9b05      	ldr	r3, [sp, #20]
 8007306:	3301      	adds	r3, #1
 8007308:	9305      	str	r3, [sp, #20]
 800730a:	f04f 0801 	mov.w	r8, #1
 800730e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	f47f af6a 	bne.w	80071ea <_dtoa_r+0x7ca>
 8007316:	2001      	movs	r0, #1
 8007318:	e76f      	b.n	80071fa <_dtoa_r+0x7da>
 800731a:	f04f 0800 	mov.w	r8, #0
 800731e:	e7f6      	b.n	800730e <_dtoa_r+0x8ee>
 8007320:	4698      	mov	r8, r3
 8007322:	e7f4      	b.n	800730e <_dtoa_r+0x8ee>
 8007324:	f43f af7d 	beq.w	8007222 <_dtoa_r+0x802>
 8007328:	4618      	mov	r0, r3
 800732a:	301c      	adds	r0, #28
 800732c:	e772      	b.n	8007214 <_dtoa_r+0x7f4>
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	dc37      	bgt.n	80073a4 <_dtoa_r+0x984>
 8007334:	9b06      	ldr	r3, [sp, #24]
 8007336:	2b02      	cmp	r3, #2
 8007338:	dd34      	ble.n	80073a4 <_dtoa_r+0x984>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	9302      	str	r3, [sp, #8]
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	b96b      	cbnz	r3, 800735e <_dtoa_r+0x93e>
 8007342:	4631      	mov	r1, r6
 8007344:	2205      	movs	r2, #5
 8007346:	4620      	mov	r0, r4
 8007348:	f000 fd56 	bl	8007df8 <__multadd>
 800734c:	4601      	mov	r1, r0
 800734e:	4606      	mov	r6, r0
 8007350:	ee18 0a10 	vmov	r0, s16
 8007354:	f000 ffba 	bl	80082cc <__mcmp>
 8007358:	2800      	cmp	r0, #0
 800735a:	f73f adbb 	bgt.w	8006ed4 <_dtoa_r+0x4b4>
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	9d01      	ldr	r5, [sp, #4]
 8007362:	43db      	mvns	r3, r3
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	f04f 0800 	mov.w	r8, #0
 800736a:	4631      	mov	r1, r6
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fd21 	bl	8007db4 <_Bfree>
 8007372:	2f00      	cmp	r7, #0
 8007374:	f43f aea4 	beq.w	80070c0 <_dtoa_r+0x6a0>
 8007378:	f1b8 0f00 	cmp.w	r8, #0
 800737c:	d005      	beq.n	800738a <_dtoa_r+0x96a>
 800737e:	45b8      	cmp	r8, r7
 8007380:	d003      	beq.n	800738a <_dtoa_r+0x96a>
 8007382:	4641      	mov	r1, r8
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fd15 	bl	8007db4 <_Bfree>
 800738a:	4639      	mov	r1, r7
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fd11 	bl	8007db4 <_Bfree>
 8007392:	e695      	b.n	80070c0 <_dtoa_r+0x6a0>
 8007394:	2600      	movs	r6, #0
 8007396:	4637      	mov	r7, r6
 8007398:	e7e1      	b.n	800735e <_dtoa_r+0x93e>
 800739a:	9700      	str	r7, [sp, #0]
 800739c:	4637      	mov	r7, r6
 800739e:	e599      	b.n	8006ed4 <_dtoa_r+0x4b4>
 80073a0:	40240000 	.word	0x40240000
 80073a4:	9b08      	ldr	r3, [sp, #32]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 80ca 	beq.w	8007540 <_dtoa_r+0xb20>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	dd05      	ble.n	80073c0 <_dtoa_r+0x9a0>
 80073b4:	4639      	mov	r1, r7
 80073b6:	462a      	mov	r2, r5
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 ff17 	bl	80081ec <__lshift>
 80073be:	4607      	mov	r7, r0
 80073c0:	f1b8 0f00 	cmp.w	r8, #0
 80073c4:	d05b      	beq.n	800747e <_dtoa_r+0xa5e>
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fcb3 	bl	8007d34 <_Balloc>
 80073ce:	4605      	mov	r5, r0
 80073d0:	b928      	cbnz	r0, 80073de <_dtoa_r+0x9be>
 80073d2:	4b87      	ldr	r3, [pc, #540]	; (80075f0 <_dtoa_r+0xbd0>)
 80073d4:	4602      	mov	r2, r0
 80073d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073da:	f7ff bb3b 	b.w	8006a54 <_dtoa_r+0x34>
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	3202      	adds	r2, #2
 80073e2:	0092      	lsls	r2, r2, #2
 80073e4:	f107 010c 	add.w	r1, r7, #12
 80073e8:	300c      	adds	r0, #12
 80073ea:	f000 fc95 	bl	8007d18 <memcpy>
 80073ee:	2201      	movs	r2, #1
 80073f0:	4629      	mov	r1, r5
 80073f2:	4620      	mov	r0, r4
 80073f4:	f000 fefa 	bl	80081ec <__lshift>
 80073f8:	9b01      	ldr	r3, [sp, #4]
 80073fa:	f103 0901 	add.w	r9, r3, #1
 80073fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007402:	4413      	add	r3, r2
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	f00a 0301 	and.w	r3, sl, #1
 800740a:	46b8      	mov	r8, r7
 800740c:	9304      	str	r3, [sp, #16]
 800740e:	4607      	mov	r7, r0
 8007410:	4631      	mov	r1, r6
 8007412:	ee18 0a10 	vmov	r0, s16
 8007416:	f7ff fa75 	bl	8006904 <quorem>
 800741a:	4641      	mov	r1, r8
 800741c:	9002      	str	r0, [sp, #8]
 800741e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007422:	ee18 0a10 	vmov	r0, s16
 8007426:	f000 ff51 	bl	80082cc <__mcmp>
 800742a:	463a      	mov	r2, r7
 800742c:	9003      	str	r0, [sp, #12]
 800742e:	4631      	mov	r1, r6
 8007430:	4620      	mov	r0, r4
 8007432:	f000 ff67 	bl	8008304 <__mdiff>
 8007436:	68c2      	ldr	r2, [r0, #12]
 8007438:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800743c:	4605      	mov	r5, r0
 800743e:	bb02      	cbnz	r2, 8007482 <_dtoa_r+0xa62>
 8007440:	4601      	mov	r1, r0
 8007442:	ee18 0a10 	vmov	r0, s16
 8007446:	f000 ff41 	bl	80082cc <__mcmp>
 800744a:	4602      	mov	r2, r0
 800744c:	4629      	mov	r1, r5
 800744e:	4620      	mov	r0, r4
 8007450:	9207      	str	r2, [sp, #28]
 8007452:	f000 fcaf 	bl	8007db4 <_Bfree>
 8007456:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800745a:	ea43 0102 	orr.w	r1, r3, r2
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	430b      	orrs	r3, r1
 8007462:	464d      	mov	r5, r9
 8007464:	d10f      	bne.n	8007486 <_dtoa_r+0xa66>
 8007466:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800746a:	d02a      	beq.n	80074c2 <_dtoa_r+0xaa2>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	dd02      	ble.n	8007478 <_dtoa_r+0xa58>
 8007472:	9b02      	ldr	r3, [sp, #8]
 8007474:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007478:	f88b a000 	strb.w	sl, [fp]
 800747c:	e775      	b.n	800736a <_dtoa_r+0x94a>
 800747e:	4638      	mov	r0, r7
 8007480:	e7ba      	b.n	80073f8 <_dtoa_r+0x9d8>
 8007482:	2201      	movs	r2, #1
 8007484:	e7e2      	b.n	800744c <_dtoa_r+0xa2c>
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	db04      	blt.n	8007496 <_dtoa_r+0xa76>
 800748c:	9906      	ldr	r1, [sp, #24]
 800748e:	430b      	orrs	r3, r1
 8007490:	9904      	ldr	r1, [sp, #16]
 8007492:	430b      	orrs	r3, r1
 8007494:	d122      	bne.n	80074dc <_dtoa_r+0xabc>
 8007496:	2a00      	cmp	r2, #0
 8007498:	ddee      	ble.n	8007478 <_dtoa_r+0xa58>
 800749a:	ee18 1a10 	vmov	r1, s16
 800749e:	2201      	movs	r2, #1
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 fea3 	bl	80081ec <__lshift>
 80074a6:	4631      	mov	r1, r6
 80074a8:	ee08 0a10 	vmov	s16, r0
 80074ac:	f000 ff0e 	bl	80082cc <__mcmp>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	dc03      	bgt.n	80074bc <_dtoa_r+0xa9c>
 80074b4:	d1e0      	bne.n	8007478 <_dtoa_r+0xa58>
 80074b6:	f01a 0f01 	tst.w	sl, #1
 80074ba:	d0dd      	beq.n	8007478 <_dtoa_r+0xa58>
 80074bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074c0:	d1d7      	bne.n	8007472 <_dtoa_r+0xa52>
 80074c2:	2339      	movs	r3, #57	; 0x39
 80074c4:	f88b 3000 	strb.w	r3, [fp]
 80074c8:	462b      	mov	r3, r5
 80074ca:	461d      	mov	r5, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074d2:	2a39      	cmp	r2, #57	; 0x39
 80074d4:	d071      	beq.n	80075ba <_dtoa_r+0xb9a>
 80074d6:	3201      	adds	r2, #1
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	e746      	b.n	800736a <_dtoa_r+0x94a>
 80074dc:	2a00      	cmp	r2, #0
 80074de:	dd07      	ble.n	80074f0 <_dtoa_r+0xad0>
 80074e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074e4:	d0ed      	beq.n	80074c2 <_dtoa_r+0xaa2>
 80074e6:	f10a 0301 	add.w	r3, sl, #1
 80074ea:	f88b 3000 	strb.w	r3, [fp]
 80074ee:	e73c      	b.n	800736a <_dtoa_r+0x94a>
 80074f0:	9b05      	ldr	r3, [sp, #20]
 80074f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074f6:	4599      	cmp	r9, r3
 80074f8:	d047      	beq.n	800758a <_dtoa_r+0xb6a>
 80074fa:	ee18 1a10 	vmov	r1, s16
 80074fe:	2300      	movs	r3, #0
 8007500:	220a      	movs	r2, #10
 8007502:	4620      	mov	r0, r4
 8007504:	f000 fc78 	bl	8007df8 <__multadd>
 8007508:	45b8      	cmp	r8, r7
 800750a:	ee08 0a10 	vmov	s16, r0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	f04f 020a 	mov.w	r2, #10
 8007516:	4641      	mov	r1, r8
 8007518:	4620      	mov	r0, r4
 800751a:	d106      	bne.n	800752a <_dtoa_r+0xb0a>
 800751c:	f000 fc6c 	bl	8007df8 <__multadd>
 8007520:	4680      	mov	r8, r0
 8007522:	4607      	mov	r7, r0
 8007524:	f109 0901 	add.w	r9, r9, #1
 8007528:	e772      	b.n	8007410 <_dtoa_r+0x9f0>
 800752a:	f000 fc65 	bl	8007df8 <__multadd>
 800752e:	4639      	mov	r1, r7
 8007530:	4680      	mov	r8, r0
 8007532:	2300      	movs	r3, #0
 8007534:	220a      	movs	r2, #10
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fc5e 	bl	8007df8 <__multadd>
 800753c:	4607      	mov	r7, r0
 800753e:	e7f1      	b.n	8007524 <_dtoa_r+0xb04>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	9d01      	ldr	r5, [sp, #4]
 8007546:	ee18 0a10 	vmov	r0, s16
 800754a:	4631      	mov	r1, r6
 800754c:	f7ff f9da 	bl	8006904 <quorem>
 8007550:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007554:	9b01      	ldr	r3, [sp, #4]
 8007556:	f805 ab01 	strb.w	sl, [r5], #1
 800755a:	1aea      	subs	r2, r5, r3
 800755c:	9b02      	ldr	r3, [sp, #8]
 800755e:	4293      	cmp	r3, r2
 8007560:	dd09      	ble.n	8007576 <_dtoa_r+0xb56>
 8007562:	ee18 1a10 	vmov	r1, s16
 8007566:	2300      	movs	r3, #0
 8007568:	220a      	movs	r2, #10
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fc44 	bl	8007df8 <__multadd>
 8007570:	ee08 0a10 	vmov	s16, r0
 8007574:	e7e7      	b.n	8007546 <_dtoa_r+0xb26>
 8007576:	9b02      	ldr	r3, [sp, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	bfc8      	it	gt
 800757c:	461d      	movgt	r5, r3
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	bfd8      	it	le
 8007582:	2501      	movle	r5, #1
 8007584:	441d      	add	r5, r3
 8007586:	f04f 0800 	mov.w	r8, #0
 800758a:	ee18 1a10 	vmov	r1, s16
 800758e:	2201      	movs	r2, #1
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fe2b 	bl	80081ec <__lshift>
 8007596:	4631      	mov	r1, r6
 8007598:	ee08 0a10 	vmov	s16, r0
 800759c:	f000 fe96 	bl	80082cc <__mcmp>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	dc91      	bgt.n	80074c8 <_dtoa_r+0xaa8>
 80075a4:	d102      	bne.n	80075ac <_dtoa_r+0xb8c>
 80075a6:	f01a 0f01 	tst.w	sl, #1
 80075aa:	d18d      	bne.n	80074c8 <_dtoa_r+0xaa8>
 80075ac:	462b      	mov	r3, r5
 80075ae:	461d      	mov	r5, r3
 80075b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075b4:	2a30      	cmp	r2, #48	; 0x30
 80075b6:	d0fa      	beq.n	80075ae <_dtoa_r+0xb8e>
 80075b8:	e6d7      	b.n	800736a <_dtoa_r+0x94a>
 80075ba:	9a01      	ldr	r2, [sp, #4]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d184      	bne.n	80074ca <_dtoa_r+0xaaa>
 80075c0:	9b00      	ldr	r3, [sp, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2331      	movs	r3, #49	; 0x31
 80075c8:	7013      	strb	r3, [r2, #0]
 80075ca:	e6ce      	b.n	800736a <_dtoa_r+0x94a>
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <_dtoa_r+0xbd4>)
 80075ce:	f7ff ba95 	b.w	8006afc <_dtoa_r+0xdc>
 80075d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f47f aa6e 	bne.w	8006ab6 <_dtoa_r+0x96>
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <_dtoa_r+0xbd8>)
 80075dc:	f7ff ba8e 	b.w	8006afc <_dtoa_r+0xdc>
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dcae      	bgt.n	8007544 <_dtoa_r+0xb24>
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	f73f aea8 	bgt.w	800733e <_dtoa_r+0x91e>
 80075ee:	e7a9      	b.n	8007544 <_dtoa_r+0xb24>
 80075f0:	08009907 	.word	0x08009907
 80075f4:	08009810 	.word	0x08009810
 80075f8:	08009888 	.word	0x08009888

080075fc <rshift>:
 80075fc:	6903      	ldr	r3, [r0, #16]
 80075fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007606:	ea4f 1261 	mov.w	r2, r1, asr #5
 800760a:	f100 0414 	add.w	r4, r0, #20
 800760e:	dd45      	ble.n	800769c <rshift+0xa0>
 8007610:	f011 011f 	ands.w	r1, r1, #31
 8007614:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007618:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800761c:	d10c      	bne.n	8007638 <rshift+0x3c>
 800761e:	f100 0710 	add.w	r7, r0, #16
 8007622:	4629      	mov	r1, r5
 8007624:	42b1      	cmp	r1, r6
 8007626:	d334      	bcc.n	8007692 <rshift+0x96>
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	1eea      	subs	r2, r5, #3
 800762e:	4296      	cmp	r6, r2
 8007630:	bf38      	it	cc
 8007632:	2300      	movcc	r3, #0
 8007634:	4423      	add	r3, r4
 8007636:	e015      	b.n	8007664 <rshift+0x68>
 8007638:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800763c:	f1c1 0820 	rsb	r8, r1, #32
 8007640:	40cf      	lsrs	r7, r1
 8007642:	f105 0e04 	add.w	lr, r5, #4
 8007646:	46a1      	mov	r9, r4
 8007648:	4576      	cmp	r6, lr
 800764a:	46f4      	mov	ip, lr
 800764c:	d815      	bhi.n	800767a <rshift+0x7e>
 800764e:	1a9a      	subs	r2, r3, r2
 8007650:	0092      	lsls	r2, r2, #2
 8007652:	3a04      	subs	r2, #4
 8007654:	3501      	adds	r5, #1
 8007656:	42ae      	cmp	r6, r5
 8007658:	bf38      	it	cc
 800765a:	2200      	movcc	r2, #0
 800765c:	18a3      	adds	r3, r4, r2
 800765e:	50a7      	str	r7, [r4, r2]
 8007660:	b107      	cbz	r7, 8007664 <rshift+0x68>
 8007662:	3304      	adds	r3, #4
 8007664:	1b1a      	subs	r2, r3, r4
 8007666:	42a3      	cmp	r3, r4
 8007668:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800766c:	bf08      	it	eq
 800766e:	2300      	moveq	r3, #0
 8007670:	6102      	str	r2, [r0, #16]
 8007672:	bf08      	it	eq
 8007674:	6143      	streq	r3, [r0, #20]
 8007676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800767a:	f8dc c000 	ldr.w	ip, [ip]
 800767e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007682:	ea4c 0707 	orr.w	r7, ip, r7
 8007686:	f849 7b04 	str.w	r7, [r9], #4
 800768a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800768e:	40cf      	lsrs	r7, r1
 8007690:	e7da      	b.n	8007648 <rshift+0x4c>
 8007692:	f851 cb04 	ldr.w	ip, [r1], #4
 8007696:	f847 cf04 	str.w	ip, [r7, #4]!
 800769a:	e7c3      	b.n	8007624 <rshift+0x28>
 800769c:	4623      	mov	r3, r4
 800769e:	e7e1      	b.n	8007664 <rshift+0x68>

080076a0 <__hexdig_fun>:
 80076a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	d802      	bhi.n	80076ae <__hexdig_fun+0xe>
 80076a8:	3820      	subs	r0, #32
 80076aa:	b2c0      	uxtb	r0, r0
 80076ac:	4770      	bx	lr
 80076ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d801      	bhi.n	80076ba <__hexdig_fun+0x1a>
 80076b6:	3847      	subs	r0, #71	; 0x47
 80076b8:	e7f7      	b.n	80076aa <__hexdig_fun+0xa>
 80076ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80076be:	2b05      	cmp	r3, #5
 80076c0:	d801      	bhi.n	80076c6 <__hexdig_fun+0x26>
 80076c2:	3827      	subs	r0, #39	; 0x27
 80076c4:	e7f1      	b.n	80076aa <__hexdig_fun+0xa>
 80076c6:	2000      	movs	r0, #0
 80076c8:	4770      	bx	lr
	...

080076cc <__gethex>:
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	ed2d 8b02 	vpush	{d8}
 80076d4:	b089      	sub	sp, #36	; 0x24
 80076d6:	ee08 0a10 	vmov	s16, r0
 80076da:	9304      	str	r3, [sp, #16]
 80076dc:	4bb4      	ldr	r3, [pc, #720]	; (80079b0 <__gethex+0x2e4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	4618      	mov	r0, r3
 80076e4:	468b      	mov	fp, r1
 80076e6:	4690      	mov	r8, r2
 80076e8:	f7f8 fd9a 	bl	8000220 <strlen>
 80076ec:	9b01      	ldr	r3, [sp, #4]
 80076ee:	f8db 2000 	ldr.w	r2, [fp]
 80076f2:	4403      	add	r3, r0
 80076f4:	4682      	mov	sl, r0
 80076f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	1c93      	adds	r3, r2, #2
 80076fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007702:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007706:	32fe      	adds	r2, #254	; 0xfe
 8007708:	18d1      	adds	r1, r2, r3
 800770a:	461f      	mov	r7, r3
 800770c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007710:	9100      	str	r1, [sp, #0]
 8007712:	2830      	cmp	r0, #48	; 0x30
 8007714:	d0f8      	beq.n	8007708 <__gethex+0x3c>
 8007716:	f7ff ffc3 	bl	80076a0 <__hexdig_fun>
 800771a:	4604      	mov	r4, r0
 800771c:	2800      	cmp	r0, #0
 800771e:	d13a      	bne.n	8007796 <__gethex+0xca>
 8007720:	9901      	ldr	r1, [sp, #4]
 8007722:	4652      	mov	r2, sl
 8007724:	4638      	mov	r0, r7
 8007726:	f7fe faa9 	bl	8005c7c <strncmp>
 800772a:	4605      	mov	r5, r0
 800772c:	2800      	cmp	r0, #0
 800772e:	d168      	bne.n	8007802 <__gethex+0x136>
 8007730:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007734:	eb07 060a 	add.w	r6, r7, sl
 8007738:	f7ff ffb2 	bl	80076a0 <__hexdig_fun>
 800773c:	2800      	cmp	r0, #0
 800773e:	d062      	beq.n	8007806 <__gethex+0x13a>
 8007740:	4633      	mov	r3, r6
 8007742:	7818      	ldrb	r0, [r3, #0]
 8007744:	2830      	cmp	r0, #48	; 0x30
 8007746:	461f      	mov	r7, r3
 8007748:	f103 0301 	add.w	r3, r3, #1
 800774c:	d0f9      	beq.n	8007742 <__gethex+0x76>
 800774e:	f7ff ffa7 	bl	80076a0 <__hexdig_fun>
 8007752:	2301      	movs	r3, #1
 8007754:	fab0 f480 	clz	r4, r0
 8007758:	0964      	lsrs	r4, r4, #5
 800775a:	4635      	mov	r5, r6
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	463a      	mov	r2, r7
 8007760:	4616      	mov	r6, r2
 8007762:	3201      	adds	r2, #1
 8007764:	7830      	ldrb	r0, [r6, #0]
 8007766:	f7ff ff9b 	bl	80076a0 <__hexdig_fun>
 800776a:	2800      	cmp	r0, #0
 800776c:	d1f8      	bne.n	8007760 <__gethex+0x94>
 800776e:	9901      	ldr	r1, [sp, #4]
 8007770:	4652      	mov	r2, sl
 8007772:	4630      	mov	r0, r6
 8007774:	f7fe fa82 	bl	8005c7c <strncmp>
 8007778:	b980      	cbnz	r0, 800779c <__gethex+0xd0>
 800777a:	b94d      	cbnz	r5, 8007790 <__gethex+0xc4>
 800777c:	eb06 050a 	add.w	r5, r6, sl
 8007780:	462a      	mov	r2, r5
 8007782:	4616      	mov	r6, r2
 8007784:	3201      	adds	r2, #1
 8007786:	7830      	ldrb	r0, [r6, #0]
 8007788:	f7ff ff8a 	bl	80076a0 <__hexdig_fun>
 800778c:	2800      	cmp	r0, #0
 800778e:	d1f8      	bne.n	8007782 <__gethex+0xb6>
 8007790:	1bad      	subs	r5, r5, r6
 8007792:	00ad      	lsls	r5, r5, #2
 8007794:	e004      	b.n	80077a0 <__gethex+0xd4>
 8007796:	2400      	movs	r4, #0
 8007798:	4625      	mov	r5, r4
 800779a:	e7e0      	b.n	800775e <__gethex+0x92>
 800779c:	2d00      	cmp	r5, #0
 800779e:	d1f7      	bne.n	8007790 <__gethex+0xc4>
 80077a0:	7833      	ldrb	r3, [r6, #0]
 80077a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077a6:	2b50      	cmp	r3, #80	; 0x50
 80077a8:	d13b      	bne.n	8007822 <__gethex+0x156>
 80077aa:	7873      	ldrb	r3, [r6, #1]
 80077ac:	2b2b      	cmp	r3, #43	; 0x2b
 80077ae:	d02c      	beq.n	800780a <__gethex+0x13e>
 80077b0:	2b2d      	cmp	r3, #45	; 0x2d
 80077b2:	d02e      	beq.n	8007812 <__gethex+0x146>
 80077b4:	1c71      	adds	r1, r6, #1
 80077b6:	f04f 0900 	mov.w	r9, #0
 80077ba:	7808      	ldrb	r0, [r1, #0]
 80077bc:	f7ff ff70 	bl	80076a0 <__hexdig_fun>
 80077c0:	1e43      	subs	r3, r0, #1
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b18      	cmp	r3, #24
 80077c6:	d82c      	bhi.n	8007822 <__gethex+0x156>
 80077c8:	f1a0 0210 	sub.w	r2, r0, #16
 80077cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80077d0:	f7ff ff66 	bl	80076a0 <__hexdig_fun>
 80077d4:	1e43      	subs	r3, r0, #1
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b18      	cmp	r3, #24
 80077da:	d91d      	bls.n	8007818 <__gethex+0x14c>
 80077dc:	f1b9 0f00 	cmp.w	r9, #0
 80077e0:	d000      	beq.n	80077e4 <__gethex+0x118>
 80077e2:	4252      	negs	r2, r2
 80077e4:	4415      	add	r5, r2
 80077e6:	f8cb 1000 	str.w	r1, [fp]
 80077ea:	b1e4      	cbz	r4, 8007826 <__gethex+0x15a>
 80077ec:	9b00      	ldr	r3, [sp, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bf14      	ite	ne
 80077f2:	2700      	movne	r7, #0
 80077f4:	2706      	moveq	r7, #6
 80077f6:	4638      	mov	r0, r7
 80077f8:	b009      	add	sp, #36	; 0x24
 80077fa:	ecbd 8b02 	vpop	{d8}
 80077fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007802:	463e      	mov	r6, r7
 8007804:	4625      	mov	r5, r4
 8007806:	2401      	movs	r4, #1
 8007808:	e7ca      	b.n	80077a0 <__gethex+0xd4>
 800780a:	f04f 0900 	mov.w	r9, #0
 800780e:	1cb1      	adds	r1, r6, #2
 8007810:	e7d3      	b.n	80077ba <__gethex+0xee>
 8007812:	f04f 0901 	mov.w	r9, #1
 8007816:	e7fa      	b.n	800780e <__gethex+0x142>
 8007818:	230a      	movs	r3, #10
 800781a:	fb03 0202 	mla	r2, r3, r2, r0
 800781e:	3a10      	subs	r2, #16
 8007820:	e7d4      	b.n	80077cc <__gethex+0x100>
 8007822:	4631      	mov	r1, r6
 8007824:	e7df      	b.n	80077e6 <__gethex+0x11a>
 8007826:	1bf3      	subs	r3, r6, r7
 8007828:	3b01      	subs	r3, #1
 800782a:	4621      	mov	r1, r4
 800782c:	2b07      	cmp	r3, #7
 800782e:	dc0b      	bgt.n	8007848 <__gethex+0x17c>
 8007830:	ee18 0a10 	vmov	r0, s16
 8007834:	f000 fa7e 	bl	8007d34 <_Balloc>
 8007838:	4604      	mov	r4, r0
 800783a:	b940      	cbnz	r0, 800784e <__gethex+0x182>
 800783c:	4b5d      	ldr	r3, [pc, #372]	; (80079b4 <__gethex+0x2e8>)
 800783e:	4602      	mov	r2, r0
 8007840:	21de      	movs	r1, #222	; 0xde
 8007842:	485d      	ldr	r0, [pc, #372]	; (80079b8 <__gethex+0x2ec>)
 8007844:	f001 f9b2 	bl	8008bac <__assert_func>
 8007848:	3101      	adds	r1, #1
 800784a:	105b      	asrs	r3, r3, #1
 800784c:	e7ee      	b.n	800782c <__gethex+0x160>
 800784e:	f100 0914 	add.w	r9, r0, #20
 8007852:	f04f 0b00 	mov.w	fp, #0
 8007856:	f1ca 0301 	rsb	r3, sl, #1
 800785a:	f8cd 9008 	str.w	r9, [sp, #8]
 800785e:	f8cd b000 	str.w	fp, [sp]
 8007862:	9306      	str	r3, [sp, #24]
 8007864:	42b7      	cmp	r7, r6
 8007866:	d340      	bcc.n	80078ea <__gethex+0x21e>
 8007868:	9802      	ldr	r0, [sp, #8]
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	f840 3b04 	str.w	r3, [r0], #4
 8007870:	eba0 0009 	sub.w	r0, r0, r9
 8007874:	1080      	asrs	r0, r0, #2
 8007876:	0146      	lsls	r6, r0, #5
 8007878:	6120      	str	r0, [r4, #16]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fb4c 	bl	8007f18 <__hi0bits>
 8007880:	1a30      	subs	r0, r6, r0
 8007882:	f8d8 6000 	ldr.w	r6, [r8]
 8007886:	42b0      	cmp	r0, r6
 8007888:	dd63      	ble.n	8007952 <__gethex+0x286>
 800788a:	1b87      	subs	r7, r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fef0 	bl	8008674 <__any_on>
 8007894:	4682      	mov	sl, r0
 8007896:	b1a8      	cbz	r0, 80078c4 <__gethex+0x1f8>
 8007898:	1e7b      	subs	r3, r7, #1
 800789a:	1159      	asrs	r1, r3, #5
 800789c:	f003 021f 	and.w	r2, r3, #31
 80078a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80078a4:	f04f 0a01 	mov.w	sl, #1
 80078a8:	fa0a f202 	lsl.w	r2, sl, r2
 80078ac:	420a      	tst	r2, r1
 80078ae:	d009      	beq.n	80078c4 <__gethex+0x1f8>
 80078b0:	4553      	cmp	r3, sl
 80078b2:	dd05      	ble.n	80078c0 <__gethex+0x1f4>
 80078b4:	1eb9      	subs	r1, r7, #2
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 fedc 	bl	8008674 <__any_on>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d145      	bne.n	800794c <__gethex+0x280>
 80078c0:	f04f 0a02 	mov.w	sl, #2
 80078c4:	4639      	mov	r1, r7
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7ff fe98 	bl	80075fc <rshift>
 80078cc:	443d      	add	r5, r7
 80078ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078d2:	42ab      	cmp	r3, r5
 80078d4:	da4c      	bge.n	8007970 <__gethex+0x2a4>
 80078d6:	ee18 0a10 	vmov	r0, s16
 80078da:	4621      	mov	r1, r4
 80078dc:	f000 fa6a 	bl	8007db4 <_Bfree>
 80078e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078e2:	2300      	movs	r3, #0
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	27a3      	movs	r7, #163	; 0xa3
 80078e8:	e785      	b.n	80077f6 <__gethex+0x12a>
 80078ea:	1e73      	subs	r3, r6, #1
 80078ec:	9a05      	ldr	r2, [sp, #20]
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d019      	beq.n	800792c <__gethex+0x260>
 80078f8:	f1bb 0f20 	cmp.w	fp, #32
 80078fc:	d107      	bne.n	800790e <__gethex+0x242>
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	9a00      	ldr	r2, [sp, #0]
 8007902:	f843 2b04 	str.w	r2, [r3], #4
 8007906:	9302      	str	r3, [sp, #8]
 8007908:	2300      	movs	r3, #0
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	469b      	mov	fp, r3
 800790e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007912:	f7ff fec5 	bl	80076a0 <__hexdig_fun>
 8007916:	9b00      	ldr	r3, [sp, #0]
 8007918:	f000 000f 	and.w	r0, r0, #15
 800791c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007920:	4303      	orrs	r3, r0
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	f10b 0b04 	add.w	fp, fp, #4
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	e00d      	b.n	8007948 <__gethex+0x27c>
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	9a06      	ldr	r2, [sp, #24]
 8007930:	4413      	add	r3, r2
 8007932:	42bb      	cmp	r3, r7
 8007934:	d3e0      	bcc.n	80078f8 <__gethex+0x22c>
 8007936:	4618      	mov	r0, r3
 8007938:	9901      	ldr	r1, [sp, #4]
 800793a:	9307      	str	r3, [sp, #28]
 800793c:	4652      	mov	r2, sl
 800793e:	f7fe f99d 	bl	8005c7c <strncmp>
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	2800      	cmp	r0, #0
 8007946:	d1d7      	bne.n	80078f8 <__gethex+0x22c>
 8007948:	461e      	mov	r6, r3
 800794a:	e78b      	b.n	8007864 <__gethex+0x198>
 800794c:	f04f 0a03 	mov.w	sl, #3
 8007950:	e7b8      	b.n	80078c4 <__gethex+0x1f8>
 8007952:	da0a      	bge.n	800796a <__gethex+0x29e>
 8007954:	1a37      	subs	r7, r6, r0
 8007956:	4621      	mov	r1, r4
 8007958:	ee18 0a10 	vmov	r0, s16
 800795c:	463a      	mov	r2, r7
 800795e:	f000 fc45 	bl	80081ec <__lshift>
 8007962:	1bed      	subs	r5, r5, r7
 8007964:	4604      	mov	r4, r0
 8007966:	f100 0914 	add.w	r9, r0, #20
 800796a:	f04f 0a00 	mov.w	sl, #0
 800796e:	e7ae      	b.n	80078ce <__gethex+0x202>
 8007970:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007974:	42a8      	cmp	r0, r5
 8007976:	dd72      	ble.n	8007a5e <__gethex+0x392>
 8007978:	1b45      	subs	r5, r0, r5
 800797a:	42ae      	cmp	r6, r5
 800797c:	dc36      	bgt.n	80079ec <__gethex+0x320>
 800797e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d02a      	beq.n	80079dc <__gethex+0x310>
 8007986:	2b03      	cmp	r3, #3
 8007988:	d02c      	beq.n	80079e4 <__gethex+0x318>
 800798a:	2b01      	cmp	r3, #1
 800798c:	d11c      	bne.n	80079c8 <__gethex+0x2fc>
 800798e:	42ae      	cmp	r6, r5
 8007990:	d11a      	bne.n	80079c8 <__gethex+0x2fc>
 8007992:	2e01      	cmp	r6, #1
 8007994:	d112      	bne.n	80079bc <__gethex+0x2f0>
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	2301      	movs	r3, #1
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	f8c9 3000 	str.w	r3, [r9]
 80079a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079a8:	2762      	movs	r7, #98	; 0x62
 80079aa:	601c      	str	r4, [r3, #0]
 80079ac:	e723      	b.n	80077f6 <__gethex+0x12a>
 80079ae:	bf00      	nop
 80079b0:	08009980 	.word	0x08009980
 80079b4:	08009907 	.word	0x08009907
 80079b8:	08009918 	.word	0x08009918
 80079bc:	1e71      	subs	r1, r6, #1
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 fe58 	bl	8008674 <__any_on>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d1e6      	bne.n	8007996 <__gethex+0x2ca>
 80079c8:	ee18 0a10 	vmov	r0, s16
 80079cc:	4621      	mov	r1, r4
 80079ce:	f000 f9f1 	bl	8007db4 <_Bfree>
 80079d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079d4:	2300      	movs	r3, #0
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	2750      	movs	r7, #80	; 0x50
 80079da:	e70c      	b.n	80077f6 <__gethex+0x12a>
 80079dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f2      	bne.n	80079c8 <__gethex+0x2fc>
 80079e2:	e7d8      	b.n	8007996 <__gethex+0x2ca>
 80079e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1d5      	bne.n	8007996 <__gethex+0x2ca>
 80079ea:	e7ed      	b.n	80079c8 <__gethex+0x2fc>
 80079ec:	1e6f      	subs	r7, r5, #1
 80079ee:	f1ba 0f00 	cmp.w	sl, #0
 80079f2:	d131      	bne.n	8007a58 <__gethex+0x38c>
 80079f4:	b127      	cbz	r7, 8007a00 <__gethex+0x334>
 80079f6:	4639      	mov	r1, r7
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fe3b 	bl	8008674 <__any_on>
 80079fe:	4682      	mov	sl, r0
 8007a00:	117b      	asrs	r3, r7, #5
 8007a02:	2101      	movs	r1, #1
 8007a04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007a08:	f007 071f 	and.w	r7, r7, #31
 8007a0c:	fa01 f707 	lsl.w	r7, r1, r7
 8007a10:	421f      	tst	r7, r3
 8007a12:	4629      	mov	r1, r5
 8007a14:	4620      	mov	r0, r4
 8007a16:	bf18      	it	ne
 8007a18:	f04a 0a02 	orrne.w	sl, sl, #2
 8007a1c:	1b76      	subs	r6, r6, r5
 8007a1e:	f7ff fded 	bl	80075fc <rshift>
 8007a22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a26:	2702      	movs	r7, #2
 8007a28:	f1ba 0f00 	cmp.w	sl, #0
 8007a2c:	d048      	beq.n	8007ac0 <__gethex+0x3f4>
 8007a2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d015      	beq.n	8007a62 <__gethex+0x396>
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d017      	beq.n	8007a6a <__gethex+0x39e>
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d109      	bne.n	8007a52 <__gethex+0x386>
 8007a3e:	f01a 0f02 	tst.w	sl, #2
 8007a42:	d006      	beq.n	8007a52 <__gethex+0x386>
 8007a44:	f8d9 0000 	ldr.w	r0, [r9]
 8007a48:	ea4a 0a00 	orr.w	sl, sl, r0
 8007a4c:	f01a 0f01 	tst.w	sl, #1
 8007a50:	d10e      	bne.n	8007a70 <__gethex+0x3a4>
 8007a52:	f047 0710 	orr.w	r7, r7, #16
 8007a56:	e033      	b.n	8007ac0 <__gethex+0x3f4>
 8007a58:	f04f 0a01 	mov.w	sl, #1
 8007a5c:	e7d0      	b.n	8007a00 <__gethex+0x334>
 8007a5e:	2701      	movs	r7, #1
 8007a60:	e7e2      	b.n	8007a28 <__gethex+0x35c>
 8007a62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a64:	f1c3 0301 	rsb	r3, r3, #1
 8007a68:	9315      	str	r3, [sp, #84]	; 0x54
 8007a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0f0      	beq.n	8007a52 <__gethex+0x386>
 8007a70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a74:	f104 0314 	add.w	r3, r4, #20
 8007a78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a80:	f04f 0c00 	mov.w	ip, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007a8e:	d01c      	beq.n	8007aca <__gethex+0x3fe>
 8007a90:	3201      	adds	r2, #1
 8007a92:	6002      	str	r2, [r0, #0]
 8007a94:	2f02      	cmp	r7, #2
 8007a96:	f104 0314 	add.w	r3, r4, #20
 8007a9a:	d13f      	bne.n	8007b1c <__gethex+0x450>
 8007a9c:	f8d8 2000 	ldr.w	r2, [r8]
 8007aa0:	3a01      	subs	r2, #1
 8007aa2:	42b2      	cmp	r2, r6
 8007aa4:	d10a      	bne.n	8007abc <__gethex+0x3f0>
 8007aa6:	1171      	asrs	r1, r6, #5
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007aae:	f006 061f 	and.w	r6, r6, #31
 8007ab2:	fa02 f606 	lsl.w	r6, r2, r6
 8007ab6:	421e      	tst	r6, r3
 8007ab8:	bf18      	it	ne
 8007aba:	4617      	movne	r7, r2
 8007abc:	f047 0720 	orr.w	r7, r7, #32
 8007ac0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ac2:	601c      	str	r4, [r3, #0]
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	601d      	str	r5, [r3, #0]
 8007ac8:	e695      	b.n	80077f6 <__gethex+0x12a>
 8007aca:	4299      	cmp	r1, r3
 8007acc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ad0:	d8d8      	bhi.n	8007a84 <__gethex+0x3b8>
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	459b      	cmp	fp, r3
 8007ad6:	db19      	blt.n	8007b0c <__gethex+0x440>
 8007ad8:	6861      	ldr	r1, [r4, #4]
 8007ada:	ee18 0a10 	vmov	r0, s16
 8007ade:	3101      	adds	r1, #1
 8007ae0:	f000 f928 	bl	8007d34 <_Balloc>
 8007ae4:	4681      	mov	r9, r0
 8007ae6:	b918      	cbnz	r0, 8007af0 <__gethex+0x424>
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <__gethex+0x488>)
 8007aea:	4602      	mov	r2, r0
 8007aec:	2184      	movs	r1, #132	; 0x84
 8007aee:	e6a8      	b.n	8007842 <__gethex+0x176>
 8007af0:	6922      	ldr	r2, [r4, #16]
 8007af2:	3202      	adds	r2, #2
 8007af4:	f104 010c 	add.w	r1, r4, #12
 8007af8:	0092      	lsls	r2, r2, #2
 8007afa:	300c      	adds	r0, #12
 8007afc:	f000 f90c 	bl	8007d18 <memcpy>
 8007b00:	4621      	mov	r1, r4
 8007b02:	ee18 0a10 	vmov	r0, s16
 8007b06:	f000 f955 	bl	8007db4 <_Bfree>
 8007b0a:	464c      	mov	r4, r9
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b14:	6122      	str	r2, [r4, #16]
 8007b16:	2201      	movs	r2, #1
 8007b18:	615a      	str	r2, [r3, #20]
 8007b1a:	e7bb      	b.n	8007a94 <__gethex+0x3c8>
 8007b1c:	6922      	ldr	r2, [r4, #16]
 8007b1e:	455a      	cmp	r2, fp
 8007b20:	dd0b      	ble.n	8007b3a <__gethex+0x46e>
 8007b22:	2101      	movs	r1, #1
 8007b24:	4620      	mov	r0, r4
 8007b26:	f7ff fd69 	bl	80075fc <rshift>
 8007b2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b2e:	3501      	adds	r5, #1
 8007b30:	42ab      	cmp	r3, r5
 8007b32:	f6ff aed0 	blt.w	80078d6 <__gethex+0x20a>
 8007b36:	2701      	movs	r7, #1
 8007b38:	e7c0      	b.n	8007abc <__gethex+0x3f0>
 8007b3a:	f016 061f 	ands.w	r6, r6, #31
 8007b3e:	d0fa      	beq.n	8007b36 <__gethex+0x46a>
 8007b40:	4453      	add	r3, sl
 8007b42:	f1c6 0620 	rsb	r6, r6, #32
 8007b46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007b4a:	f000 f9e5 	bl	8007f18 <__hi0bits>
 8007b4e:	42b0      	cmp	r0, r6
 8007b50:	dbe7      	blt.n	8007b22 <__gethex+0x456>
 8007b52:	e7f0      	b.n	8007b36 <__gethex+0x46a>
 8007b54:	08009907 	.word	0x08009907

08007b58 <L_shift>:
 8007b58:	f1c2 0208 	rsb	r2, r2, #8
 8007b5c:	0092      	lsls	r2, r2, #2
 8007b5e:	b570      	push	{r4, r5, r6, lr}
 8007b60:	f1c2 0620 	rsb	r6, r2, #32
 8007b64:	6843      	ldr	r3, [r0, #4]
 8007b66:	6804      	ldr	r4, [r0, #0]
 8007b68:	fa03 f506 	lsl.w	r5, r3, r6
 8007b6c:	432c      	orrs	r4, r5
 8007b6e:	40d3      	lsrs	r3, r2
 8007b70:	6004      	str	r4, [r0, #0]
 8007b72:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b76:	4288      	cmp	r0, r1
 8007b78:	d3f4      	bcc.n	8007b64 <L_shift+0xc>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}

08007b7c <__match>:
 8007b7c:	b530      	push	{r4, r5, lr}
 8007b7e:	6803      	ldr	r3, [r0, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b86:	b914      	cbnz	r4, 8007b8e <__match+0x12>
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	bd30      	pop	{r4, r5, pc}
 8007b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007b96:	2d19      	cmp	r5, #25
 8007b98:	bf98      	it	ls
 8007b9a:	3220      	addls	r2, #32
 8007b9c:	42a2      	cmp	r2, r4
 8007b9e:	d0f0      	beq.n	8007b82 <__match+0x6>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e7f3      	b.n	8007b8c <__match+0x10>

08007ba4 <__hexnan>:
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	680b      	ldr	r3, [r1, #0]
 8007baa:	115e      	asrs	r6, r3, #5
 8007bac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007bb0:	f013 031f 	ands.w	r3, r3, #31
 8007bb4:	b087      	sub	sp, #28
 8007bb6:	bf18      	it	ne
 8007bb8:	3604      	addne	r6, #4
 8007bba:	2500      	movs	r5, #0
 8007bbc:	1f37      	subs	r7, r6, #4
 8007bbe:	4690      	mov	r8, r2
 8007bc0:	6802      	ldr	r2, [r0, #0]
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8007bca:	46b9      	mov	r9, r7
 8007bcc:	463c      	mov	r4, r7
 8007bce:	9502      	str	r5, [sp, #8]
 8007bd0:	46ab      	mov	fp, r5
 8007bd2:	7851      	ldrb	r1, [r2, #1]
 8007bd4:	1c53      	adds	r3, r2, #1
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	b341      	cbz	r1, 8007c2c <__hexnan+0x88>
 8007bda:	4608      	mov	r0, r1
 8007bdc:	9205      	str	r2, [sp, #20]
 8007bde:	9104      	str	r1, [sp, #16]
 8007be0:	f7ff fd5e 	bl	80076a0 <__hexdig_fun>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d14f      	bne.n	8007c88 <__hexnan+0xe4>
 8007be8:	9904      	ldr	r1, [sp, #16]
 8007bea:	9a05      	ldr	r2, [sp, #20]
 8007bec:	2920      	cmp	r1, #32
 8007bee:	d818      	bhi.n	8007c22 <__hexnan+0x7e>
 8007bf0:	9b02      	ldr	r3, [sp, #8]
 8007bf2:	459b      	cmp	fp, r3
 8007bf4:	dd13      	ble.n	8007c1e <__hexnan+0x7a>
 8007bf6:	454c      	cmp	r4, r9
 8007bf8:	d206      	bcs.n	8007c08 <__hexnan+0x64>
 8007bfa:	2d07      	cmp	r5, #7
 8007bfc:	dc04      	bgt.n	8007c08 <__hexnan+0x64>
 8007bfe:	462a      	mov	r2, r5
 8007c00:	4649      	mov	r1, r9
 8007c02:	4620      	mov	r0, r4
 8007c04:	f7ff ffa8 	bl	8007b58 <L_shift>
 8007c08:	4544      	cmp	r4, r8
 8007c0a:	d950      	bls.n	8007cae <__hexnan+0x10a>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f1a4 0904 	sub.w	r9, r4, #4
 8007c12:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c16:	f8cd b008 	str.w	fp, [sp, #8]
 8007c1a:	464c      	mov	r4, r9
 8007c1c:	461d      	mov	r5, r3
 8007c1e:	9a03      	ldr	r2, [sp, #12]
 8007c20:	e7d7      	b.n	8007bd2 <__hexnan+0x2e>
 8007c22:	2929      	cmp	r1, #41	; 0x29
 8007c24:	d156      	bne.n	8007cd4 <__hexnan+0x130>
 8007c26:	3202      	adds	r2, #2
 8007c28:	f8ca 2000 	str.w	r2, [sl]
 8007c2c:	f1bb 0f00 	cmp.w	fp, #0
 8007c30:	d050      	beq.n	8007cd4 <__hexnan+0x130>
 8007c32:	454c      	cmp	r4, r9
 8007c34:	d206      	bcs.n	8007c44 <__hexnan+0xa0>
 8007c36:	2d07      	cmp	r5, #7
 8007c38:	dc04      	bgt.n	8007c44 <__hexnan+0xa0>
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7ff ff8a 	bl	8007b58 <L_shift>
 8007c44:	4544      	cmp	r4, r8
 8007c46:	d934      	bls.n	8007cb2 <__hexnan+0x10e>
 8007c48:	f1a8 0204 	sub.w	r2, r8, #4
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c52:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c56:	429f      	cmp	r7, r3
 8007c58:	d2f9      	bcs.n	8007c4e <__hexnan+0xaa>
 8007c5a:	1b3b      	subs	r3, r7, r4
 8007c5c:	f023 0303 	bic.w	r3, r3, #3
 8007c60:	3304      	adds	r3, #4
 8007c62:	3401      	adds	r4, #1
 8007c64:	3e03      	subs	r6, #3
 8007c66:	42b4      	cmp	r4, r6
 8007c68:	bf88      	it	hi
 8007c6a:	2304      	movhi	r3, #4
 8007c6c:	4443      	add	r3, r8
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f843 2b04 	str.w	r2, [r3], #4
 8007c74:	429f      	cmp	r7, r3
 8007c76:	d2fb      	bcs.n	8007c70 <__hexnan+0xcc>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	b91b      	cbnz	r3, 8007c84 <__hexnan+0xe0>
 8007c7c:	4547      	cmp	r7, r8
 8007c7e:	d127      	bne.n	8007cd0 <__hexnan+0x12c>
 8007c80:	2301      	movs	r3, #1
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	2005      	movs	r0, #5
 8007c86:	e026      	b.n	8007cd6 <__hexnan+0x132>
 8007c88:	3501      	adds	r5, #1
 8007c8a:	2d08      	cmp	r5, #8
 8007c8c:	f10b 0b01 	add.w	fp, fp, #1
 8007c90:	dd06      	ble.n	8007ca0 <__hexnan+0xfc>
 8007c92:	4544      	cmp	r4, r8
 8007c94:	d9c3      	bls.n	8007c1e <__hexnan+0x7a>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c9c:	2501      	movs	r5, #1
 8007c9e:	3c04      	subs	r4, #4
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	f000 000f 	and.w	r0, r0, #15
 8007ca6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007caa:	6022      	str	r2, [r4, #0]
 8007cac:	e7b7      	b.n	8007c1e <__hexnan+0x7a>
 8007cae:	2508      	movs	r5, #8
 8007cb0:	e7b5      	b.n	8007c1e <__hexnan+0x7a>
 8007cb2:	9b01      	ldr	r3, [sp, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0df      	beq.n	8007c78 <__hexnan+0xd4>
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cbc:	f1c3 0320 	rsb	r3, r3, #32
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007cc8:	401a      	ands	r2, r3
 8007cca:	f846 2c04 	str.w	r2, [r6, #-4]
 8007cce:	e7d3      	b.n	8007c78 <__hexnan+0xd4>
 8007cd0:	3f04      	subs	r7, #4
 8007cd2:	e7d1      	b.n	8007c78 <__hexnan+0xd4>
 8007cd4:	2004      	movs	r0, #4
 8007cd6:	b007      	add	sp, #28
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cdc <_localeconv_r>:
 8007cdc:	4800      	ldr	r0, [pc, #0]	; (8007ce0 <_localeconv_r+0x4>)
 8007cde:	4770      	bx	lr
 8007ce0:	20000174 	.word	0x20000174

08007ce4 <malloc>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <malloc+0xc>)
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f000 bd67 	b.w	80087bc <_malloc_r>
 8007cee:	bf00      	nop
 8007cf0:	2000001c 	.word	0x2000001c

08007cf4 <__ascii_mbtowc>:
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	b901      	cbnz	r1, 8007cfa <__ascii_mbtowc+0x6>
 8007cf8:	a901      	add	r1, sp, #4
 8007cfa:	b142      	cbz	r2, 8007d0e <__ascii_mbtowc+0x1a>
 8007cfc:	b14b      	cbz	r3, 8007d12 <__ascii_mbtowc+0x1e>
 8007cfe:	7813      	ldrb	r3, [r2, #0]
 8007d00:	600b      	str	r3, [r1, #0]
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	1e10      	subs	r0, r2, #0
 8007d06:	bf18      	it	ne
 8007d08:	2001      	movne	r0, #1
 8007d0a:	b002      	add	sp, #8
 8007d0c:	4770      	bx	lr
 8007d0e:	4610      	mov	r0, r2
 8007d10:	e7fb      	b.n	8007d0a <__ascii_mbtowc+0x16>
 8007d12:	f06f 0001 	mvn.w	r0, #1
 8007d16:	e7f8      	b.n	8007d0a <__ascii_mbtowc+0x16>

08007d18 <memcpy>:
 8007d18:	440a      	add	r2, r1
 8007d1a:	4291      	cmp	r1, r2
 8007d1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d20:	d100      	bne.n	8007d24 <memcpy+0xc>
 8007d22:	4770      	bx	lr
 8007d24:	b510      	push	{r4, lr}
 8007d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	d1f9      	bne.n	8007d26 <memcpy+0xe>
 8007d32:	bd10      	pop	{r4, pc}

08007d34 <_Balloc>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d38:	4604      	mov	r4, r0
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	b976      	cbnz	r6, 8007d5c <_Balloc+0x28>
 8007d3e:	2010      	movs	r0, #16
 8007d40:	f7ff ffd0 	bl	8007ce4 <malloc>
 8007d44:	4602      	mov	r2, r0
 8007d46:	6260      	str	r0, [r4, #36]	; 0x24
 8007d48:	b920      	cbnz	r0, 8007d54 <_Balloc+0x20>
 8007d4a:	4b18      	ldr	r3, [pc, #96]	; (8007dac <_Balloc+0x78>)
 8007d4c:	4818      	ldr	r0, [pc, #96]	; (8007db0 <_Balloc+0x7c>)
 8007d4e:	2166      	movs	r1, #102	; 0x66
 8007d50:	f000 ff2c 	bl	8008bac <__assert_func>
 8007d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d58:	6006      	str	r6, [r0, #0]
 8007d5a:	60c6      	str	r6, [r0, #12]
 8007d5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d5e:	68f3      	ldr	r3, [r6, #12]
 8007d60:	b183      	cbz	r3, 8007d84 <_Balloc+0x50>
 8007d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d6a:	b9b8      	cbnz	r0, 8007d9c <_Balloc+0x68>
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007d72:	1d72      	adds	r2, r6, #5
 8007d74:	0092      	lsls	r2, r2, #2
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fc9d 	bl	80086b6 <_calloc_r>
 8007d7c:	b160      	cbz	r0, 8007d98 <_Balloc+0x64>
 8007d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d82:	e00e      	b.n	8007da2 <_Balloc+0x6e>
 8007d84:	2221      	movs	r2, #33	; 0x21
 8007d86:	2104      	movs	r1, #4
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fc94 	bl	80086b6 <_calloc_r>
 8007d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d90:	60f0      	str	r0, [r6, #12]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e4      	bne.n	8007d62 <_Balloc+0x2e>
 8007d98:	2000      	movs	r0, #0
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	6802      	ldr	r2, [r0, #0]
 8007d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007da2:	2300      	movs	r3, #0
 8007da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007da8:	e7f7      	b.n	8007d9a <_Balloc+0x66>
 8007daa:	bf00      	nop
 8007dac:	08009895 	.word	0x08009895
 8007db0:	08009994 	.word	0x08009994

08007db4 <_Bfree>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007db8:	4605      	mov	r5, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	b976      	cbnz	r6, 8007ddc <_Bfree+0x28>
 8007dbe:	2010      	movs	r0, #16
 8007dc0:	f7ff ff90 	bl	8007ce4 <malloc>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6268      	str	r0, [r5, #36]	; 0x24
 8007dc8:	b920      	cbnz	r0, 8007dd4 <_Bfree+0x20>
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <_Bfree+0x3c>)
 8007dcc:	4809      	ldr	r0, [pc, #36]	; (8007df4 <_Bfree+0x40>)
 8007dce:	218a      	movs	r1, #138	; 0x8a
 8007dd0:	f000 feec 	bl	8008bac <__assert_func>
 8007dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dd8:	6006      	str	r6, [r0, #0]
 8007dda:	60c6      	str	r6, [r0, #12]
 8007ddc:	b13c      	cbz	r4, 8007dee <_Bfree+0x3a>
 8007dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007de0:	6862      	ldr	r2, [r4, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007de8:	6021      	str	r1, [r4, #0]
 8007dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	08009895 	.word	0x08009895
 8007df4:	08009994 	.word	0x08009994

08007df8 <__multadd>:
 8007df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfc:	690d      	ldr	r5, [r1, #16]
 8007dfe:	4607      	mov	r7, r0
 8007e00:	460c      	mov	r4, r1
 8007e02:	461e      	mov	r6, r3
 8007e04:	f101 0c14 	add.w	ip, r1, #20
 8007e08:	2000      	movs	r0, #0
 8007e0a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e0e:	b299      	uxth	r1, r3
 8007e10:	fb02 6101 	mla	r1, r2, r1, r6
 8007e14:	0c1e      	lsrs	r6, r3, #16
 8007e16:	0c0b      	lsrs	r3, r1, #16
 8007e18:	fb02 3306 	mla	r3, r2, r6, r3
 8007e1c:	b289      	uxth	r1, r1
 8007e1e:	3001      	adds	r0, #1
 8007e20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e24:	4285      	cmp	r5, r0
 8007e26:	f84c 1b04 	str.w	r1, [ip], #4
 8007e2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e2e:	dcec      	bgt.n	8007e0a <__multadd+0x12>
 8007e30:	b30e      	cbz	r6, 8007e76 <__multadd+0x7e>
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	42ab      	cmp	r3, r5
 8007e36:	dc19      	bgt.n	8007e6c <__multadd+0x74>
 8007e38:	6861      	ldr	r1, [r4, #4]
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	3101      	adds	r1, #1
 8007e3e:	f7ff ff79 	bl	8007d34 <_Balloc>
 8007e42:	4680      	mov	r8, r0
 8007e44:	b928      	cbnz	r0, 8007e52 <__multadd+0x5a>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <__multadd+0x84>)
 8007e4a:	480d      	ldr	r0, [pc, #52]	; (8007e80 <__multadd+0x88>)
 8007e4c:	21b5      	movs	r1, #181	; 0xb5
 8007e4e:	f000 fead 	bl	8008bac <__assert_func>
 8007e52:	6922      	ldr	r2, [r4, #16]
 8007e54:	3202      	adds	r2, #2
 8007e56:	f104 010c 	add.w	r1, r4, #12
 8007e5a:	0092      	lsls	r2, r2, #2
 8007e5c:	300c      	adds	r0, #12
 8007e5e:	f7ff ff5b 	bl	8007d18 <memcpy>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7ff ffa5 	bl	8007db4 <_Bfree>
 8007e6a:	4644      	mov	r4, r8
 8007e6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e70:	3501      	adds	r5, #1
 8007e72:	615e      	str	r6, [r3, #20]
 8007e74:	6125      	str	r5, [r4, #16]
 8007e76:	4620      	mov	r0, r4
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7c:	08009907 	.word	0x08009907
 8007e80:	08009994 	.word	0x08009994

08007e84 <__s2b>:
 8007e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e88:	460c      	mov	r4, r1
 8007e8a:	4615      	mov	r5, r2
 8007e8c:	461f      	mov	r7, r3
 8007e8e:	2209      	movs	r2, #9
 8007e90:	3308      	adds	r3, #8
 8007e92:	4606      	mov	r6, r0
 8007e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e98:	2100      	movs	r1, #0
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	db09      	blt.n	8007eb4 <__s2b+0x30>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff ff47 	bl	8007d34 <_Balloc>
 8007ea6:	b940      	cbnz	r0, 8007eba <__s2b+0x36>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <__s2b+0x8c>)
 8007eac:	4819      	ldr	r0, [pc, #100]	; (8007f14 <__s2b+0x90>)
 8007eae:	21ce      	movs	r1, #206	; 0xce
 8007eb0:	f000 fe7c 	bl	8008bac <__assert_func>
 8007eb4:	0052      	lsls	r2, r2, #1
 8007eb6:	3101      	adds	r1, #1
 8007eb8:	e7f0      	b.n	8007e9c <__s2b+0x18>
 8007eba:	9b08      	ldr	r3, [sp, #32]
 8007ebc:	6143      	str	r3, [r0, #20]
 8007ebe:	2d09      	cmp	r5, #9
 8007ec0:	f04f 0301 	mov.w	r3, #1
 8007ec4:	6103      	str	r3, [r0, #16]
 8007ec6:	dd16      	ble.n	8007ef6 <__s2b+0x72>
 8007ec8:	f104 0909 	add.w	r9, r4, #9
 8007ecc:	46c8      	mov	r8, r9
 8007ece:	442c      	add	r4, r5
 8007ed0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ed4:	4601      	mov	r1, r0
 8007ed6:	3b30      	subs	r3, #48	; 0x30
 8007ed8:	220a      	movs	r2, #10
 8007eda:	4630      	mov	r0, r6
 8007edc:	f7ff ff8c 	bl	8007df8 <__multadd>
 8007ee0:	45a0      	cmp	r8, r4
 8007ee2:	d1f5      	bne.n	8007ed0 <__s2b+0x4c>
 8007ee4:	f1a5 0408 	sub.w	r4, r5, #8
 8007ee8:	444c      	add	r4, r9
 8007eea:	1b2d      	subs	r5, r5, r4
 8007eec:	1963      	adds	r3, r4, r5
 8007eee:	42bb      	cmp	r3, r7
 8007ef0:	db04      	blt.n	8007efc <__s2b+0x78>
 8007ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef6:	340a      	adds	r4, #10
 8007ef8:	2509      	movs	r5, #9
 8007efa:	e7f6      	b.n	8007eea <__s2b+0x66>
 8007efc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f00:	4601      	mov	r1, r0
 8007f02:	3b30      	subs	r3, #48	; 0x30
 8007f04:	220a      	movs	r2, #10
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7ff ff76 	bl	8007df8 <__multadd>
 8007f0c:	e7ee      	b.n	8007eec <__s2b+0x68>
 8007f0e:	bf00      	nop
 8007f10:	08009907 	.word	0x08009907
 8007f14:	08009994 	.word	0x08009994

08007f18 <__hi0bits>:
 8007f18:	0c03      	lsrs	r3, r0, #16
 8007f1a:	041b      	lsls	r3, r3, #16
 8007f1c:	b9d3      	cbnz	r3, 8007f54 <__hi0bits+0x3c>
 8007f1e:	0400      	lsls	r0, r0, #16
 8007f20:	2310      	movs	r3, #16
 8007f22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f26:	bf04      	itt	eq
 8007f28:	0200      	lsleq	r0, r0, #8
 8007f2a:	3308      	addeq	r3, #8
 8007f2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f30:	bf04      	itt	eq
 8007f32:	0100      	lsleq	r0, r0, #4
 8007f34:	3304      	addeq	r3, #4
 8007f36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f3a:	bf04      	itt	eq
 8007f3c:	0080      	lsleq	r0, r0, #2
 8007f3e:	3302      	addeq	r3, #2
 8007f40:	2800      	cmp	r0, #0
 8007f42:	db05      	blt.n	8007f50 <__hi0bits+0x38>
 8007f44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f48:	f103 0301 	add.w	r3, r3, #1
 8007f4c:	bf08      	it	eq
 8007f4e:	2320      	moveq	r3, #32
 8007f50:	4618      	mov	r0, r3
 8007f52:	4770      	bx	lr
 8007f54:	2300      	movs	r3, #0
 8007f56:	e7e4      	b.n	8007f22 <__hi0bits+0xa>

08007f58 <__lo0bits>:
 8007f58:	6803      	ldr	r3, [r0, #0]
 8007f5a:	f013 0207 	ands.w	r2, r3, #7
 8007f5e:	4601      	mov	r1, r0
 8007f60:	d00b      	beq.n	8007f7a <__lo0bits+0x22>
 8007f62:	07da      	lsls	r2, r3, #31
 8007f64:	d423      	bmi.n	8007fae <__lo0bits+0x56>
 8007f66:	0798      	lsls	r0, r3, #30
 8007f68:	bf49      	itett	mi
 8007f6a:	085b      	lsrmi	r3, r3, #1
 8007f6c:	089b      	lsrpl	r3, r3, #2
 8007f6e:	2001      	movmi	r0, #1
 8007f70:	600b      	strmi	r3, [r1, #0]
 8007f72:	bf5c      	itt	pl
 8007f74:	600b      	strpl	r3, [r1, #0]
 8007f76:	2002      	movpl	r0, #2
 8007f78:	4770      	bx	lr
 8007f7a:	b298      	uxth	r0, r3
 8007f7c:	b9a8      	cbnz	r0, 8007faa <__lo0bits+0x52>
 8007f7e:	0c1b      	lsrs	r3, r3, #16
 8007f80:	2010      	movs	r0, #16
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	b90a      	cbnz	r2, 8007f8a <__lo0bits+0x32>
 8007f86:	3008      	adds	r0, #8
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	071a      	lsls	r2, r3, #28
 8007f8c:	bf04      	itt	eq
 8007f8e:	091b      	lsreq	r3, r3, #4
 8007f90:	3004      	addeq	r0, #4
 8007f92:	079a      	lsls	r2, r3, #30
 8007f94:	bf04      	itt	eq
 8007f96:	089b      	lsreq	r3, r3, #2
 8007f98:	3002      	addeq	r0, #2
 8007f9a:	07da      	lsls	r2, r3, #31
 8007f9c:	d403      	bmi.n	8007fa6 <__lo0bits+0x4e>
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	f100 0001 	add.w	r0, r0, #1
 8007fa4:	d005      	beq.n	8007fb2 <__lo0bits+0x5a>
 8007fa6:	600b      	str	r3, [r1, #0]
 8007fa8:	4770      	bx	lr
 8007faa:	4610      	mov	r0, r2
 8007fac:	e7e9      	b.n	8007f82 <__lo0bits+0x2a>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	4770      	bx	lr
 8007fb2:	2020      	movs	r0, #32
 8007fb4:	4770      	bx	lr
	...

08007fb8 <__i2b>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	460c      	mov	r4, r1
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	f7ff feb9 	bl	8007d34 <_Balloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	b928      	cbnz	r0, 8007fd2 <__i2b+0x1a>
 8007fc6:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <__i2b+0x24>)
 8007fc8:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <__i2b+0x28>)
 8007fca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fce:	f000 fded 	bl	8008bac <__assert_func>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	6144      	str	r4, [r0, #20]
 8007fd6:	6103      	str	r3, [r0, #16]
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	bf00      	nop
 8007fdc:	08009907 	.word	0x08009907
 8007fe0:	08009994 	.word	0x08009994

08007fe4 <__multiply>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	4691      	mov	r9, r2
 8007fea:	690a      	ldr	r2, [r1, #16]
 8007fec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	bfb8      	it	lt
 8007ff4:	460b      	movlt	r3, r1
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	bfbc      	itt	lt
 8007ffa:	464c      	movlt	r4, r9
 8007ffc:	4699      	movlt	r9, r3
 8007ffe:	6927      	ldr	r7, [r4, #16]
 8008000:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008004:	68a3      	ldr	r3, [r4, #8]
 8008006:	6861      	ldr	r1, [r4, #4]
 8008008:	eb07 060a 	add.w	r6, r7, sl
 800800c:	42b3      	cmp	r3, r6
 800800e:	b085      	sub	sp, #20
 8008010:	bfb8      	it	lt
 8008012:	3101      	addlt	r1, #1
 8008014:	f7ff fe8e 	bl	8007d34 <_Balloc>
 8008018:	b930      	cbnz	r0, 8008028 <__multiply+0x44>
 800801a:	4602      	mov	r2, r0
 800801c:	4b44      	ldr	r3, [pc, #272]	; (8008130 <__multiply+0x14c>)
 800801e:	4845      	ldr	r0, [pc, #276]	; (8008134 <__multiply+0x150>)
 8008020:	f240 115d 	movw	r1, #349	; 0x15d
 8008024:	f000 fdc2 	bl	8008bac <__assert_func>
 8008028:	f100 0514 	add.w	r5, r0, #20
 800802c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008030:	462b      	mov	r3, r5
 8008032:	2200      	movs	r2, #0
 8008034:	4543      	cmp	r3, r8
 8008036:	d321      	bcc.n	800807c <__multiply+0x98>
 8008038:	f104 0314 	add.w	r3, r4, #20
 800803c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008040:	f109 0314 	add.w	r3, r9, #20
 8008044:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008048:	9202      	str	r2, [sp, #8]
 800804a:	1b3a      	subs	r2, r7, r4
 800804c:	3a15      	subs	r2, #21
 800804e:	f022 0203 	bic.w	r2, r2, #3
 8008052:	3204      	adds	r2, #4
 8008054:	f104 0115 	add.w	r1, r4, #21
 8008058:	428f      	cmp	r7, r1
 800805a:	bf38      	it	cc
 800805c:	2204      	movcc	r2, #4
 800805e:	9201      	str	r2, [sp, #4]
 8008060:	9a02      	ldr	r2, [sp, #8]
 8008062:	9303      	str	r3, [sp, #12]
 8008064:	429a      	cmp	r2, r3
 8008066:	d80c      	bhi.n	8008082 <__multiply+0x9e>
 8008068:	2e00      	cmp	r6, #0
 800806a:	dd03      	ble.n	8008074 <__multiply+0x90>
 800806c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008070:	2b00      	cmp	r3, #0
 8008072:	d05a      	beq.n	800812a <__multiply+0x146>
 8008074:	6106      	str	r6, [r0, #16]
 8008076:	b005      	add	sp, #20
 8008078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807c:	f843 2b04 	str.w	r2, [r3], #4
 8008080:	e7d8      	b.n	8008034 <__multiply+0x50>
 8008082:	f8b3 a000 	ldrh.w	sl, [r3]
 8008086:	f1ba 0f00 	cmp.w	sl, #0
 800808a:	d024      	beq.n	80080d6 <__multiply+0xf2>
 800808c:	f104 0e14 	add.w	lr, r4, #20
 8008090:	46a9      	mov	r9, r5
 8008092:	f04f 0c00 	mov.w	ip, #0
 8008096:	f85e 2b04 	ldr.w	r2, [lr], #4
 800809a:	f8d9 1000 	ldr.w	r1, [r9]
 800809e:	fa1f fb82 	uxth.w	fp, r2
 80080a2:	b289      	uxth	r1, r1
 80080a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80080a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080ac:	f8d9 2000 	ldr.w	r2, [r9]
 80080b0:	4461      	add	r1, ip
 80080b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80080ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080be:	b289      	uxth	r1, r1
 80080c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080c4:	4577      	cmp	r7, lr
 80080c6:	f849 1b04 	str.w	r1, [r9], #4
 80080ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080ce:	d8e2      	bhi.n	8008096 <__multiply+0xb2>
 80080d0:	9a01      	ldr	r2, [sp, #4]
 80080d2:	f845 c002 	str.w	ip, [r5, r2]
 80080d6:	9a03      	ldr	r2, [sp, #12]
 80080d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080dc:	3304      	adds	r3, #4
 80080de:	f1b9 0f00 	cmp.w	r9, #0
 80080e2:	d020      	beq.n	8008126 <__multiply+0x142>
 80080e4:	6829      	ldr	r1, [r5, #0]
 80080e6:	f104 0c14 	add.w	ip, r4, #20
 80080ea:	46ae      	mov	lr, r5
 80080ec:	f04f 0a00 	mov.w	sl, #0
 80080f0:	f8bc b000 	ldrh.w	fp, [ip]
 80080f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080f8:	fb09 220b 	mla	r2, r9, fp, r2
 80080fc:	4492      	add	sl, r2
 80080fe:	b289      	uxth	r1, r1
 8008100:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008104:	f84e 1b04 	str.w	r1, [lr], #4
 8008108:	f85c 2b04 	ldr.w	r2, [ip], #4
 800810c:	f8be 1000 	ldrh.w	r1, [lr]
 8008110:	0c12      	lsrs	r2, r2, #16
 8008112:	fb09 1102 	mla	r1, r9, r2, r1
 8008116:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800811a:	4567      	cmp	r7, ip
 800811c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008120:	d8e6      	bhi.n	80080f0 <__multiply+0x10c>
 8008122:	9a01      	ldr	r2, [sp, #4]
 8008124:	50a9      	str	r1, [r5, r2]
 8008126:	3504      	adds	r5, #4
 8008128:	e79a      	b.n	8008060 <__multiply+0x7c>
 800812a:	3e01      	subs	r6, #1
 800812c:	e79c      	b.n	8008068 <__multiply+0x84>
 800812e:	bf00      	nop
 8008130:	08009907 	.word	0x08009907
 8008134:	08009994 	.word	0x08009994

08008138 <__pow5mult>:
 8008138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800813c:	4615      	mov	r5, r2
 800813e:	f012 0203 	ands.w	r2, r2, #3
 8008142:	4606      	mov	r6, r0
 8008144:	460f      	mov	r7, r1
 8008146:	d007      	beq.n	8008158 <__pow5mult+0x20>
 8008148:	4c25      	ldr	r4, [pc, #148]	; (80081e0 <__pow5mult+0xa8>)
 800814a:	3a01      	subs	r2, #1
 800814c:	2300      	movs	r3, #0
 800814e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008152:	f7ff fe51 	bl	8007df8 <__multadd>
 8008156:	4607      	mov	r7, r0
 8008158:	10ad      	asrs	r5, r5, #2
 800815a:	d03d      	beq.n	80081d8 <__pow5mult+0xa0>
 800815c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800815e:	b97c      	cbnz	r4, 8008180 <__pow5mult+0x48>
 8008160:	2010      	movs	r0, #16
 8008162:	f7ff fdbf 	bl	8007ce4 <malloc>
 8008166:	4602      	mov	r2, r0
 8008168:	6270      	str	r0, [r6, #36]	; 0x24
 800816a:	b928      	cbnz	r0, 8008178 <__pow5mult+0x40>
 800816c:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <__pow5mult+0xac>)
 800816e:	481e      	ldr	r0, [pc, #120]	; (80081e8 <__pow5mult+0xb0>)
 8008170:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008174:	f000 fd1a 	bl	8008bac <__assert_func>
 8008178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800817c:	6004      	str	r4, [r0, #0]
 800817e:	60c4      	str	r4, [r0, #12]
 8008180:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008188:	b94c      	cbnz	r4, 800819e <__pow5mult+0x66>
 800818a:	f240 2171 	movw	r1, #625	; 0x271
 800818e:	4630      	mov	r0, r6
 8008190:	f7ff ff12 	bl	8007fb8 <__i2b>
 8008194:	2300      	movs	r3, #0
 8008196:	f8c8 0008 	str.w	r0, [r8, #8]
 800819a:	4604      	mov	r4, r0
 800819c:	6003      	str	r3, [r0, #0]
 800819e:	f04f 0900 	mov.w	r9, #0
 80081a2:	07eb      	lsls	r3, r5, #31
 80081a4:	d50a      	bpl.n	80081bc <__pow5mult+0x84>
 80081a6:	4639      	mov	r1, r7
 80081a8:	4622      	mov	r2, r4
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ff1a 	bl	8007fe4 <__multiply>
 80081b0:	4639      	mov	r1, r7
 80081b2:	4680      	mov	r8, r0
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff fdfd 	bl	8007db4 <_Bfree>
 80081ba:	4647      	mov	r7, r8
 80081bc:	106d      	asrs	r5, r5, #1
 80081be:	d00b      	beq.n	80081d8 <__pow5mult+0xa0>
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	b938      	cbnz	r0, 80081d4 <__pow5mult+0x9c>
 80081c4:	4622      	mov	r2, r4
 80081c6:	4621      	mov	r1, r4
 80081c8:	4630      	mov	r0, r6
 80081ca:	f7ff ff0b 	bl	8007fe4 <__multiply>
 80081ce:	6020      	str	r0, [r4, #0]
 80081d0:	f8c0 9000 	str.w	r9, [r0]
 80081d4:	4604      	mov	r4, r0
 80081d6:	e7e4      	b.n	80081a2 <__pow5mult+0x6a>
 80081d8:	4638      	mov	r0, r7
 80081da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081de:	bf00      	nop
 80081e0:	08009ae0 	.word	0x08009ae0
 80081e4:	08009895 	.word	0x08009895
 80081e8:	08009994 	.word	0x08009994

080081ec <__lshift>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	460c      	mov	r4, r1
 80081f2:	6849      	ldr	r1, [r1, #4]
 80081f4:	6923      	ldr	r3, [r4, #16]
 80081f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	4607      	mov	r7, r0
 80081fe:	4691      	mov	r9, r2
 8008200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008204:	f108 0601 	add.w	r6, r8, #1
 8008208:	42b3      	cmp	r3, r6
 800820a:	db0b      	blt.n	8008224 <__lshift+0x38>
 800820c:	4638      	mov	r0, r7
 800820e:	f7ff fd91 	bl	8007d34 <_Balloc>
 8008212:	4605      	mov	r5, r0
 8008214:	b948      	cbnz	r0, 800822a <__lshift+0x3e>
 8008216:	4602      	mov	r2, r0
 8008218:	4b2a      	ldr	r3, [pc, #168]	; (80082c4 <__lshift+0xd8>)
 800821a:	482b      	ldr	r0, [pc, #172]	; (80082c8 <__lshift+0xdc>)
 800821c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008220:	f000 fcc4 	bl	8008bac <__assert_func>
 8008224:	3101      	adds	r1, #1
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	e7ee      	b.n	8008208 <__lshift+0x1c>
 800822a:	2300      	movs	r3, #0
 800822c:	f100 0114 	add.w	r1, r0, #20
 8008230:	f100 0210 	add.w	r2, r0, #16
 8008234:	4618      	mov	r0, r3
 8008236:	4553      	cmp	r3, sl
 8008238:	db37      	blt.n	80082aa <__lshift+0xbe>
 800823a:	6920      	ldr	r0, [r4, #16]
 800823c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008240:	f104 0314 	add.w	r3, r4, #20
 8008244:	f019 091f 	ands.w	r9, r9, #31
 8008248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800824c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008250:	d02f      	beq.n	80082b2 <__lshift+0xc6>
 8008252:	f1c9 0e20 	rsb	lr, r9, #32
 8008256:	468a      	mov	sl, r1
 8008258:	f04f 0c00 	mov.w	ip, #0
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	fa02 f209 	lsl.w	r2, r2, r9
 8008262:	ea42 020c 	orr.w	r2, r2, ip
 8008266:	f84a 2b04 	str.w	r2, [sl], #4
 800826a:	f853 2b04 	ldr.w	r2, [r3], #4
 800826e:	4298      	cmp	r0, r3
 8008270:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008274:	d8f2      	bhi.n	800825c <__lshift+0x70>
 8008276:	1b03      	subs	r3, r0, r4
 8008278:	3b15      	subs	r3, #21
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	3304      	adds	r3, #4
 8008280:	f104 0215 	add.w	r2, r4, #21
 8008284:	4290      	cmp	r0, r2
 8008286:	bf38      	it	cc
 8008288:	2304      	movcc	r3, #4
 800828a:	f841 c003 	str.w	ip, [r1, r3]
 800828e:	f1bc 0f00 	cmp.w	ip, #0
 8008292:	d001      	beq.n	8008298 <__lshift+0xac>
 8008294:	f108 0602 	add.w	r6, r8, #2
 8008298:	3e01      	subs	r6, #1
 800829a:	4638      	mov	r0, r7
 800829c:	612e      	str	r6, [r5, #16]
 800829e:	4621      	mov	r1, r4
 80082a0:	f7ff fd88 	bl	8007db4 <_Bfree>
 80082a4:	4628      	mov	r0, r5
 80082a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80082ae:	3301      	adds	r3, #1
 80082b0:	e7c1      	b.n	8008236 <__lshift+0x4a>
 80082b2:	3904      	subs	r1, #4
 80082b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80082bc:	4298      	cmp	r0, r3
 80082be:	d8f9      	bhi.n	80082b4 <__lshift+0xc8>
 80082c0:	e7ea      	b.n	8008298 <__lshift+0xac>
 80082c2:	bf00      	nop
 80082c4:	08009907 	.word	0x08009907
 80082c8:	08009994 	.word	0x08009994

080082cc <__mcmp>:
 80082cc:	b530      	push	{r4, r5, lr}
 80082ce:	6902      	ldr	r2, [r0, #16]
 80082d0:	690c      	ldr	r4, [r1, #16]
 80082d2:	1b12      	subs	r2, r2, r4
 80082d4:	d10e      	bne.n	80082f4 <__mcmp+0x28>
 80082d6:	f100 0314 	add.w	r3, r0, #20
 80082da:	3114      	adds	r1, #20
 80082dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082ec:	42a5      	cmp	r5, r4
 80082ee:	d003      	beq.n	80082f8 <__mcmp+0x2c>
 80082f0:	d305      	bcc.n	80082fe <__mcmp+0x32>
 80082f2:	2201      	movs	r2, #1
 80082f4:	4610      	mov	r0, r2
 80082f6:	bd30      	pop	{r4, r5, pc}
 80082f8:	4283      	cmp	r3, r0
 80082fa:	d3f3      	bcc.n	80082e4 <__mcmp+0x18>
 80082fc:	e7fa      	b.n	80082f4 <__mcmp+0x28>
 80082fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008302:	e7f7      	b.n	80082f4 <__mcmp+0x28>

08008304 <__mdiff>:
 8008304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008308:	460c      	mov	r4, r1
 800830a:	4606      	mov	r6, r0
 800830c:	4611      	mov	r1, r2
 800830e:	4620      	mov	r0, r4
 8008310:	4690      	mov	r8, r2
 8008312:	f7ff ffdb 	bl	80082cc <__mcmp>
 8008316:	1e05      	subs	r5, r0, #0
 8008318:	d110      	bne.n	800833c <__mdiff+0x38>
 800831a:	4629      	mov	r1, r5
 800831c:	4630      	mov	r0, r6
 800831e:	f7ff fd09 	bl	8007d34 <_Balloc>
 8008322:	b930      	cbnz	r0, 8008332 <__mdiff+0x2e>
 8008324:	4b3a      	ldr	r3, [pc, #232]	; (8008410 <__mdiff+0x10c>)
 8008326:	4602      	mov	r2, r0
 8008328:	f240 2132 	movw	r1, #562	; 0x232
 800832c:	4839      	ldr	r0, [pc, #228]	; (8008414 <__mdiff+0x110>)
 800832e:	f000 fc3d 	bl	8008bac <__assert_func>
 8008332:	2301      	movs	r3, #1
 8008334:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833c:	bfa4      	itt	ge
 800833e:	4643      	movge	r3, r8
 8008340:	46a0      	movge	r8, r4
 8008342:	4630      	mov	r0, r6
 8008344:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008348:	bfa6      	itte	ge
 800834a:	461c      	movge	r4, r3
 800834c:	2500      	movge	r5, #0
 800834e:	2501      	movlt	r5, #1
 8008350:	f7ff fcf0 	bl	8007d34 <_Balloc>
 8008354:	b920      	cbnz	r0, 8008360 <__mdiff+0x5c>
 8008356:	4b2e      	ldr	r3, [pc, #184]	; (8008410 <__mdiff+0x10c>)
 8008358:	4602      	mov	r2, r0
 800835a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800835e:	e7e5      	b.n	800832c <__mdiff+0x28>
 8008360:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008364:	6926      	ldr	r6, [r4, #16]
 8008366:	60c5      	str	r5, [r0, #12]
 8008368:	f104 0914 	add.w	r9, r4, #20
 800836c:	f108 0514 	add.w	r5, r8, #20
 8008370:	f100 0e14 	add.w	lr, r0, #20
 8008374:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008378:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800837c:	f108 0210 	add.w	r2, r8, #16
 8008380:	46f2      	mov	sl, lr
 8008382:	2100      	movs	r1, #0
 8008384:	f859 3b04 	ldr.w	r3, [r9], #4
 8008388:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800838c:	fa1f f883 	uxth.w	r8, r3
 8008390:	fa11 f18b 	uxtah	r1, r1, fp
 8008394:	0c1b      	lsrs	r3, r3, #16
 8008396:	eba1 0808 	sub.w	r8, r1, r8
 800839a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800839e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083a2:	fa1f f888 	uxth.w	r8, r8
 80083a6:	1419      	asrs	r1, r3, #16
 80083a8:	454e      	cmp	r6, r9
 80083aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083ae:	f84a 3b04 	str.w	r3, [sl], #4
 80083b2:	d8e7      	bhi.n	8008384 <__mdiff+0x80>
 80083b4:	1b33      	subs	r3, r6, r4
 80083b6:	3b15      	subs	r3, #21
 80083b8:	f023 0303 	bic.w	r3, r3, #3
 80083bc:	3304      	adds	r3, #4
 80083be:	3415      	adds	r4, #21
 80083c0:	42a6      	cmp	r6, r4
 80083c2:	bf38      	it	cc
 80083c4:	2304      	movcc	r3, #4
 80083c6:	441d      	add	r5, r3
 80083c8:	4473      	add	r3, lr
 80083ca:	469e      	mov	lr, r3
 80083cc:	462e      	mov	r6, r5
 80083ce:	4566      	cmp	r6, ip
 80083d0:	d30e      	bcc.n	80083f0 <__mdiff+0xec>
 80083d2:	f10c 0203 	add.w	r2, ip, #3
 80083d6:	1b52      	subs	r2, r2, r5
 80083d8:	f022 0203 	bic.w	r2, r2, #3
 80083dc:	3d03      	subs	r5, #3
 80083de:	45ac      	cmp	ip, r5
 80083e0:	bf38      	it	cc
 80083e2:	2200      	movcc	r2, #0
 80083e4:	441a      	add	r2, r3
 80083e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80083ea:	b17b      	cbz	r3, 800840c <__mdiff+0x108>
 80083ec:	6107      	str	r7, [r0, #16]
 80083ee:	e7a3      	b.n	8008338 <__mdiff+0x34>
 80083f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80083f4:	fa11 f288 	uxtah	r2, r1, r8
 80083f8:	1414      	asrs	r4, r2, #16
 80083fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083fe:	b292      	uxth	r2, r2
 8008400:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008404:	f84e 2b04 	str.w	r2, [lr], #4
 8008408:	1421      	asrs	r1, r4, #16
 800840a:	e7e0      	b.n	80083ce <__mdiff+0xca>
 800840c:	3f01      	subs	r7, #1
 800840e:	e7ea      	b.n	80083e6 <__mdiff+0xe2>
 8008410:	08009907 	.word	0x08009907
 8008414:	08009994 	.word	0x08009994

08008418 <__ulp>:
 8008418:	b082      	sub	sp, #8
 800841a:	ed8d 0b00 	vstr	d0, [sp]
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	4912      	ldr	r1, [pc, #72]	; (800846c <__ulp+0x54>)
 8008422:	4019      	ands	r1, r3
 8008424:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008428:	2900      	cmp	r1, #0
 800842a:	dd05      	ble.n	8008438 <__ulp+0x20>
 800842c:	2200      	movs	r2, #0
 800842e:	460b      	mov	r3, r1
 8008430:	ec43 2b10 	vmov	d0, r2, r3
 8008434:	b002      	add	sp, #8
 8008436:	4770      	bx	lr
 8008438:	4249      	negs	r1, r1
 800843a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800843e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	da04      	bge.n	8008456 <__ulp+0x3e>
 800844c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008450:	fa41 f300 	asr.w	r3, r1, r0
 8008454:	e7ec      	b.n	8008430 <__ulp+0x18>
 8008456:	f1a0 0114 	sub.w	r1, r0, #20
 800845a:	291e      	cmp	r1, #30
 800845c:	bfda      	itte	le
 800845e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008462:	fa20 f101 	lsrle.w	r1, r0, r1
 8008466:	2101      	movgt	r1, #1
 8008468:	460a      	mov	r2, r1
 800846a:	e7e1      	b.n	8008430 <__ulp+0x18>
 800846c:	7ff00000 	.word	0x7ff00000

08008470 <__b2d>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	6905      	ldr	r5, [r0, #16]
 8008474:	f100 0714 	add.w	r7, r0, #20
 8008478:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800847c:	1f2e      	subs	r6, r5, #4
 800847e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008482:	4620      	mov	r0, r4
 8008484:	f7ff fd48 	bl	8007f18 <__hi0bits>
 8008488:	f1c0 0320 	rsb	r3, r0, #32
 800848c:	280a      	cmp	r0, #10
 800848e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800850c <__b2d+0x9c>
 8008492:	600b      	str	r3, [r1, #0]
 8008494:	dc14      	bgt.n	80084c0 <__b2d+0x50>
 8008496:	f1c0 0e0b 	rsb	lr, r0, #11
 800849a:	fa24 f10e 	lsr.w	r1, r4, lr
 800849e:	42b7      	cmp	r7, r6
 80084a0:	ea41 030c 	orr.w	r3, r1, ip
 80084a4:	bf34      	ite	cc
 80084a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80084aa:	2100      	movcs	r1, #0
 80084ac:	3015      	adds	r0, #21
 80084ae:	fa04 f000 	lsl.w	r0, r4, r0
 80084b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80084b6:	ea40 0201 	orr.w	r2, r0, r1
 80084ba:	ec43 2b10 	vmov	d0, r2, r3
 80084be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c0:	42b7      	cmp	r7, r6
 80084c2:	bf3a      	itte	cc
 80084c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80084c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80084cc:	2100      	movcs	r1, #0
 80084ce:	380b      	subs	r0, #11
 80084d0:	d017      	beq.n	8008502 <__b2d+0x92>
 80084d2:	f1c0 0c20 	rsb	ip, r0, #32
 80084d6:	fa04 f500 	lsl.w	r5, r4, r0
 80084da:	42be      	cmp	r6, r7
 80084dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80084e0:	ea45 0504 	orr.w	r5, r5, r4
 80084e4:	bf8c      	ite	hi
 80084e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80084ea:	2400      	movls	r4, #0
 80084ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80084f0:	fa01 f000 	lsl.w	r0, r1, r0
 80084f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80084f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80084fc:	ea40 0204 	orr.w	r2, r0, r4
 8008500:	e7db      	b.n	80084ba <__b2d+0x4a>
 8008502:	ea44 030c 	orr.w	r3, r4, ip
 8008506:	460a      	mov	r2, r1
 8008508:	e7d7      	b.n	80084ba <__b2d+0x4a>
 800850a:	bf00      	nop
 800850c:	3ff00000 	.word	0x3ff00000

08008510 <__d2b>:
 8008510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008514:	4689      	mov	r9, r1
 8008516:	2101      	movs	r1, #1
 8008518:	ec57 6b10 	vmov	r6, r7, d0
 800851c:	4690      	mov	r8, r2
 800851e:	f7ff fc09 	bl	8007d34 <_Balloc>
 8008522:	4604      	mov	r4, r0
 8008524:	b930      	cbnz	r0, 8008534 <__d2b+0x24>
 8008526:	4602      	mov	r2, r0
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <__d2b+0xb0>)
 800852a:	4826      	ldr	r0, [pc, #152]	; (80085c4 <__d2b+0xb4>)
 800852c:	f240 310a 	movw	r1, #778	; 0x30a
 8008530:	f000 fb3c 	bl	8008bac <__assert_func>
 8008534:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800853c:	bb35      	cbnz	r5, 800858c <__d2b+0x7c>
 800853e:	2e00      	cmp	r6, #0
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	d028      	beq.n	8008596 <__d2b+0x86>
 8008544:	4668      	mov	r0, sp
 8008546:	9600      	str	r6, [sp, #0]
 8008548:	f7ff fd06 	bl	8007f58 <__lo0bits>
 800854c:	9900      	ldr	r1, [sp, #0]
 800854e:	b300      	cbz	r0, 8008592 <__d2b+0x82>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	f1c0 0320 	rsb	r3, r0, #32
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	430b      	orrs	r3, r1
 800855c:	40c2      	lsrs	r2, r0
 800855e:	6163      	str	r3, [r4, #20]
 8008560:	9201      	str	r2, [sp, #4]
 8008562:	9b01      	ldr	r3, [sp, #4]
 8008564:	61a3      	str	r3, [r4, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bf14      	ite	ne
 800856a:	2202      	movne	r2, #2
 800856c:	2201      	moveq	r2, #1
 800856e:	6122      	str	r2, [r4, #16]
 8008570:	b1d5      	cbz	r5, 80085a8 <__d2b+0x98>
 8008572:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008576:	4405      	add	r5, r0
 8008578:	f8c9 5000 	str.w	r5, [r9]
 800857c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008580:	f8c8 0000 	str.w	r0, [r8]
 8008584:	4620      	mov	r0, r4
 8008586:	b003      	add	sp, #12
 8008588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800858c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008590:	e7d5      	b.n	800853e <__d2b+0x2e>
 8008592:	6161      	str	r1, [r4, #20]
 8008594:	e7e5      	b.n	8008562 <__d2b+0x52>
 8008596:	a801      	add	r0, sp, #4
 8008598:	f7ff fcde 	bl	8007f58 <__lo0bits>
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	6163      	str	r3, [r4, #20]
 80085a0:	2201      	movs	r2, #1
 80085a2:	6122      	str	r2, [r4, #16]
 80085a4:	3020      	adds	r0, #32
 80085a6:	e7e3      	b.n	8008570 <__d2b+0x60>
 80085a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b0:	f8c9 0000 	str.w	r0, [r9]
 80085b4:	6918      	ldr	r0, [r3, #16]
 80085b6:	f7ff fcaf 	bl	8007f18 <__hi0bits>
 80085ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085be:	e7df      	b.n	8008580 <__d2b+0x70>
 80085c0:	08009907 	.word	0x08009907
 80085c4:	08009994 	.word	0x08009994

080085c8 <__ratio>:
 80085c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	4688      	mov	r8, r1
 80085ce:	4669      	mov	r1, sp
 80085d0:	4681      	mov	r9, r0
 80085d2:	f7ff ff4d 	bl	8008470 <__b2d>
 80085d6:	a901      	add	r1, sp, #4
 80085d8:	4640      	mov	r0, r8
 80085da:	ec55 4b10 	vmov	r4, r5, d0
 80085de:	f7ff ff47 	bl	8008470 <__b2d>
 80085e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80085ea:	eba3 0c02 	sub.w	ip, r3, r2
 80085ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085f2:	1a9b      	subs	r3, r3, r2
 80085f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80085f8:	ec51 0b10 	vmov	r0, r1, d0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfd6      	itet	le
 8008600:	460a      	movle	r2, r1
 8008602:	462a      	movgt	r2, r5
 8008604:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008608:	468b      	mov	fp, r1
 800860a:	462f      	mov	r7, r5
 800860c:	bfd4      	ite	le
 800860e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008612:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008616:	4620      	mov	r0, r4
 8008618:	ee10 2a10 	vmov	r2, s0
 800861c:	465b      	mov	r3, fp
 800861e:	4639      	mov	r1, r7
 8008620:	f7f8 f93c 	bl	800089c <__aeabi_ddiv>
 8008624:	ec41 0b10 	vmov	d0, r0, r1
 8008628:	b003      	add	sp, #12
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800862e <__copybits>:
 800862e:	3901      	subs	r1, #1
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	1149      	asrs	r1, r1, #5
 8008634:	6914      	ldr	r4, [r2, #16]
 8008636:	3101      	adds	r1, #1
 8008638:	f102 0314 	add.w	r3, r2, #20
 800863c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008640:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008644:	1f05      	subs	r5, r0, #4
 8008646:	42a3      	cmp	r3, r4
 8008648:	d30c      	bcc.n	8008664 <__copybits+0x36>
 800864a:	1aa3      	subs	r3, r4, r2
 800864c:	3b11      	subs	r3, #17
 800864e:	f023 0303 	bic.w	r3, r3, #3
 8008652:	3211      	adds	r2, #17
 8008654:	42a2      	cmp	r2, r4
 8008656:	bf88      	it	hi
 8008658:	2300      	movhi	r3, #0
 800865a:	4418      	add	r0, r3
 800865c:	2300      	movs	r3, #0
 800865e:	4288      	cmp	r0, r1
 8008660:	d305      	bcc.n	800866e <__copybits+0x40>
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	f853 6b04 	ldr.w	r6, [r3], #4
 8008668:	f845 6f04 	str.w	r6, [r5, #4]!
 800866c:	e7eb      	b.n	8008646 <__copybits+0x18>
 800866e:	f840 3b04 	str.w	r3, [r0], #4
 8008672:	e7f4      	b.n	800865e <__copybits+0x30>

08008674 <__any_on>:
 8008674:	f100 0214 	add.w	r2, r0, #20
 8008678:	6900      	ldr	r0, [r0, #16]
 800867a:	114b      	asrs	r3, r1, #5
 800867c:	4298      	cmp	r0, r3
 800867e:	b510      	push	{r4, lr}
 8008680:	db11      	blt.n	80086a6 <__any_on+0x32>
 8008682:	dd0a      	ble.n	800869a <__any_on+0x26>
 8008684:	f011 011f 	ands.w	r1, r1, #31
 8008688:	d007      	beq.n	800869a <__any_on+0x26>
 800868a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800868e:	fa24 f001 	lsr.w	r0, r4, r1
 8008692:	fa00 f101 	lsl.w	r1, r0, r1
 8008696:	428c      	cmp	r4, r1
 8008698:	d10b      	bne.n	80086b2 <__any_on+0x3e>
 800869a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800869e:	4293      	cmp	r3, r2
 80086a0:	d803      	bhi.n	80086aa <__any_on+0x36>
 80086a2:	2000      	movs	r0, #0
 80086a4:	bd10      	pop	{r4, pc}
 80086a6:	4603      	mov	r3, r0
 80086a8:	e7f7      	b.n	800869a <__any_on+0x26>
 80086aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086ae:	2900      	cmp	r1, #0
 80086b0:	d0f5      	beq.n	800869e <__any_on+0x2a>
 80086b2:	2001      	movs	r0, #1
 80086b4:	e7f6      	b.n	80086a4 <__any_on+0x30>

080086b6 <_calloc_r>:
 80086b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086b8:	fba1 2402 	umull	r2, r4, r1, r2
 80086bc:	b94c      	cbnz	r4, 80086d2 <_calloc_r+0x1c>
 80086be:	4611      	mov	r1, r2
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	f000 f87b 	bl	80087bc <_malloc_r>
 80086c6:	9a01      	ldr	r2, [sp, #4]
 80086c8:	4605      	mov	r5, r0
 80086ca:	b930      	cbnz	r0, 80086da <_calloc_r+0x24>
 80086cc:	4628      	mov	r0, r5
 80086ce:	b003      	add	sp, #12
 80086d0:	bd30      	pop	{r4, r5, pc}
 80086d2:	220c      	movs	r2, #12
 80086d4:	6002      	str	r2, [r0, #0]
 80086d6:	2500      	movs	r5, #0
 80086d8:	e7f8      	b.n	80086cc <_calloc_r+0x16>
 80086da:	4621      	mov	r1, r4
 80086dc:	f7fc fe3c 	bl	8005358 <memset>
 80086e0:	e7f4      	b.n	80086cc <_calloc_r+0x16>
	...

080086e4 <_free_r>:
 80086e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d044      	beq.n	8008774 <_free_r+0x90>
 80086ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ee:	9001      	str	r0, [sp, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f1a1 0404 	sub.w	r4, r1, #4
 80086f6:	bfb8      	it	lt
 80086f8:	18e4      	addlt	r4, r4, r3
 80086fa:	f000 faa1 	bl	8008c40 <__malloc_lock>
 80086fe:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <_free_r+0x94>)
 8008700:	9801      	ldr	r0, [sp, #4]
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	b933      	cbnz	r3, 8008714 <_free_r+0x30>
 8008706:	6063      	str	r3, [r4, #4]
 8008708:	6014      	str	r4, [r2, #0]
 800870a:	b003      	add	sp, #12
 800870c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008710:	f000 ba9c 	b.w	8008c4c <__malloc_unlock>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d908      	bls.n	800872a <_free_r+0x46>
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	1961      	adds	r1, r4, r5
 800871c:	428b      	cmp	r3, r1
 800871e:	bf01      	itttt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	1949      	addeq	r1, r1, r5
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	e7ed      	b.n	8008706 <_free_r+0x22>
 800872a:	461a      	mov	r2, r3
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b10b      	cbz	r3, 8008734 <_free_r+0x50>
 8008730:	42a3      	cmp	r3, r4
 8008732:	d9fa      	bls.n	800872a <_free_r+0x46>
 8008734:	6811      	ldr	r1, [r2, #0]
 8008736:	1855      	adds	r5, r2, r1
 8008738:	42a5      	cmp	r5, r4
 800873a:	d10b      	bne.n	8008754 <_free_r+0x70>
 800873c:	6824      	ldr	r4, [r4, #0]
 800873e:	4421      	add	r1, r4
 8008740:	1854      	adds	r4, r2, r1
 8008742:	42a3      	cmp	r3, r4
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	d1e0      	bne.n	800870a <_free_r+0x26>
 8008748:	681c      	ldr	r4, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	6053      	str	r3, [r2, #4]
 800874e:	4421      	add	r1, r4
 8008750:	6011      	str	r1, [r2, #0]
 8008752:	e7da      	b.n	800870a <_free_r+0x26>
 8008754:	d902      	bls.n	800875c <_free_r+0x78>
 8008756:	230c      	movs	r3, #12
 8008758:	6003      	str	r3, [r0, #0]
 800875a:	e7d6      	b.n	800870a <_free_r+0x26>
 800875c:	6825      	ldr	r5, [r4, #0]
 800875e:	1961      	adds	r1, r4, r5
 8008760:	428b      	cmp	r3, r1
 8008762:	bf04      	itt	eq
 8008764:	6819      	ldreq	r1, [r3, #0]
 8008766:	685b      	ldreq	r3, [r3, #4]
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	bf04      	itt	eq
 800876c:	1949      	addeq	r1, r1, r5
 800876e:	6021      	streq	r1, [r4, #0]
 8008770:	6054      	str	r4, [r2, #4]
 8008772:	e7ca      	b.n	800870a <_free_r+0x26>
 8008774:	b003      	add	sp, #12
 8008776:	bd30      	pop	{r4, r5, pc}
 8008778:	20000818 	.word	0x20000818

0800877c <sbrk_aligned>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4e0e      	ldr	r6, [pc, #56]	; (80087b8 <sbrk_aligned+0x3c>)
 8008780:	460c      	mov	r4, r1
 8008782:	6831      	ldr	r1, [r6, #0]
 8008784:	4605      	mov	r5, r0
 8008786:	b911      	cbnz	r1, 800878e <sbrk_aligned+0x12>
 8008788:	f000 f9f2 	bl	8008b70 <_sbrk_r>
 800878c:	6030      	str	r0, [r6, #0]
 800878e:	4621      	mov	r1, r4
 8008790:	4628      	mov	r0, r5
 8008792:	f000 f9ed 	bl	8008b70 <_sbrk_r>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	d00a      	beq.n	80087b0 <sbrk_aligned+0x34>
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d007      	beq.n	80087b4 <sbrk_aligned+0x38>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f9e2 	bl	8008b70 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d101      	bne.n	80087b4 <sbrk_aligned+0x38>
 80087b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80087b4:	4620      	mov	r0, r4
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	2000081c 	.word	0x2000081c

080087bc <_malloc_r>:
 80087bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c0:	1ccd      	adds	r5, r1, #3
 80087c2:	f025 0503 	bic.w	r5, r5, #3
 80087c6:	3508      	adds	r5, #8
 80087c8:	2d0c      	cmp	r5, #12
 80087ca:	bf38      	it	cc
 80087cc:	250c      	movcc	r5, #12
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	4607      	mov	r7, r0
 80087d2:	db01      	blt.n	80087d8 <_malloc_r+0x1c>
 80087d4:	42a9      	cmp	r1, r5
 80087d6:	d905      	bls.n	80087e4 <_malloc_r+0x28>
 80087d8:	230c      	movs	r3, #12
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	2600      	movs	r6, #0
 80087de:	4630      	mov	r0, r6
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e4:	4e2e      	ldr	r6, [pc, #184]	; (80088a0 <_malloc_r+0xe4>)
 80087e6:	f000 fa2b 	bl	8008c40 <__malloc_lock>
 80087ea:	6833      	ldr	r3, [r6, #0]
 80087ec:	461c      	mov	r4, r3
 80087ee:	bb34      	cbnz	r4, 800883e <_malloc_r+0x82>
 80087f0:	4629      	mov	r1, r5
 80087f2:	4638      	mov	r0, r7
 80087f4:	f7ff ffc2 	bl	800877c <sbrk_aligned>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	4604      	mov	r4, r0
 80087fc:	d14d      	bne.n	800889a <_malloc_r+0xde>
 80087fe:	6834      	ldr	r4, [r6, #0]
 8008800:	4626      	mov	r6, r4
 8008802:	2e00      	cmp	r6, #0
 8008804:	d140      	bne.n	8008888 <_malloc_r+0xcc>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	4631      	mov	r1, r6
 800880a:	4638      	mov	r0, r7
 800880c:	eb04 0803 	add.w	r8, r4, r3
 8008810:	f000 f9ae 	bl	8008b70 <_sbrk_r>
 8008814:	4580      	cmp	r8, r0
 8008816:	d13a      	bne.n	800888e <_malloc_r+0xd2>
 8008818:	6821      	ldr	r1, [r4, #0]
 800881a:	3503      	adds	r5, #3
 800881c:	1a6d      	subs	r5, r5, r1
 800881e:	f025 0503 	bic.w	r5, r5, #3
 8008822:	3508      	adds	r5, #8
 8008824:	2d0c      	cmp	r5, #12
 8008826:	bf38      	it	cc
 8008828:	250c      	movcc	r5, #12
 800882a:	4629      	mov	r1, r5
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff ffa5 	bl	800877c <sbrk_aligned>
 8008832:	3001      	adds	r0, #1
 8008834:	d02b      	beq.n	800888e <_malloc_r+0xd2>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	442b      	add	r3, r5
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	e00e      	b.n	800885c <_malloc_r+0xa0>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	1b52      	subs	r2, r2, r5
 8008842:	d41e      	bmi.n	8008882 <_malloc_r+0xc6>
 8008844:	2a0b      	cmp	r2, #11
 8008846:	d916      	bls.n	8008876 <_malloc_r+0xba>
 8008848:	1961      	adds	r1, r4, r5
 800884a:	42a3      	cmp	r3, r4
 800884c:	6025      	str	r5, [r4, #0]
 800884e:	bf18      	it	ne
 8008850:	6059      	strne	r1, [r3, #4]
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	bf08      	it	eq
 8008856:	6031      	streq	r1, [r6, #0]
 8008858:	5162      	str	r2, [r4, r5]
 800885a:	604b      	str	r3, [r1, #4]
 800885c:	4638      	mov	r0, r7
 800885e:	f104 060b 	add.w	r6, r4, #11
 8008862:	f000 f9f3 	bl	8008c4c <__malloc_unlock>
 8008866:	f026 0607 	bic.w	r6, r6, #7
 800886a:	1d23      	adds	r3, r4, #4
 800886c:	1af2      	subs	r2, r6, r3
 800886e:	d0b6      	beq.n	80087de <_malloc_r+0x22>
 8008870:	1b9b      	subs	r3, r3, r6
 8008872:	50a3      	str	r3, [r4, r2]
 8008874:	e7b3      	b.n	80087de <_malloc_r+0x22>
 8008876:	6862      	ldr	r2, [r4, #4]
 8008878:	42a3      	cmp	r3, r4
 800887a:	bf0c      	ite	eq
 800887c:	6032      	streq	r2, [r6, #0]
 800887e:	605a      	strne	r2, [r3, #4]
 8008880:	e7ec      	b.n	800885c <_malloc_r+0xa0>
 8008882:	4623      	mov	r3, r4
 8008884:	6864      	ldr	r4, [r4, #4]
 8008886:	e7b2      	b.n	80087ee <_malloc_r+0x32>
 8008888:	4634      	mov	r4, r6
 800888a:	6876      	ldr	r6, [r6, #4]
 800888c:	e7b9      	b.n	8008802 <_malloc_r+0x46>
 800888e:	230c      	movs	r3, #12
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	4638      	mov	r0, r7
 8008894:	f000 f9da 	bl	8008c4c <__malloc_unlock>
 8008898:	e7a1      	b.n	80087de <_malloc_r+0x22>
 800889a:	6025      	str	r5, [r4, #0]
 800889c:	e7de      	b.n	800885c <_malloc_r+0xa0>
 800889e:	bf00      	nop
 80088a0:	20000818 	.word	0x20000818

080088a4 <__ssputs_r>:
 80088a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	688e      	ldr	r6, [r1, #8]
 80088aa:	429e      	cmp	r6, r3
 80088ac:	4682      	mov	sl, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	4690      	mov	r8, r2
 80088b2:	461f      	mov	r7, r3
 80088b4:	d838      	bhi.n	8008928 <__ssputs_r+0x84>
 80088b6:	898a      	ldrh	r2, [r1, #12]
 80088b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088bc:	d032      	beq.n	8008924 <__ssputs_r+0x80>
 80088be:	6825      	ldr	r5, [r4, #0]
 80088c0:	6909      	ldr	r1, [r1, #16]
 80088c2:	eba5 0901 	sub.w	r9, r5, r1
 80088c6:	6965      	ldr	r5, [r4, #20]
 80088c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088d0:	3301      	adds	r3, #1
 80088d2:	444b      	add	r3, r9
 80088d4:	106d      	asrs	r5, r5, #1
 80088d6:	429d      	cmp	r5, r3
 80088d8:	bf38      	it	cc
 80088da:	461d      	movcc	r5, r3
 80088dc:	0553      	lsls	r3, r2, #21
 80088de:	d531      	bpl.n	8008944 <__ssputs_r+0xa0>
 80088e0:	4629      	mov	r1, r5
 80088e2:	f7ff ff6b 	bl	80087bc <_malloc_r>
 80088e6:	4606      	mov	r6, r0
 80088e8:	b950      	cbnz	r0, 8008900 <__ssputs_r+0x5c>
 80088ea:	230c      	movs	r3, #12
 80088ec:	f8ca 3000 	str.w	r3, [sl]
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	6921      	ldr	r1, [r4, #16]
 8008902:	464a      	mov	r2, r9
 8008904:	f7ff fa08 	bl	8007d18 <memcpy>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800890e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	6126      	str	r6, [r4, #16]
 8008916:	6165      	str	r5, [r4, #20]
 8008918:	444e      	add	r6, r9
 800891a:	eba5 0509 	sub.w	r5, r5, r9
 800891e:	6026      	str	r6, [r4, #0]
 8008920:	60a5      	str	r5, [r4, #8]
 8008922:	463e      	mov	r6, r7
 8008924:	42be      	cmp	r6, r7
 8008926:	d900      	bls.n	800892a <__ssputs_r+0x86>
 8008928:	463e      	mov	r6, r7
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	4632      	mov	r2, r6
 800892e:	4641      	mov	r1, r8
 8008930:	f000 f96c 	bl	8008c0c <memmove>
 8008934:	68a3      	ldr	r3, [r4, #8]
 8008936:	1b9b      	subs	r3, r3, r6
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4433      	add	r3, r6
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e7db      	b.n	80088fc <__ssputs_r+0x58>
 8008944:	462a      	mov	r2, r5
 8008946:	f000 f987 	bl	8008c58 <_realloc_r>
 800894a:	4606      	mov	r6, r0
 800894c:	2800      	cmp	r0, #0
 800894e:	d1e1      	bne.n	8008914 <__ssputs_r+0x70>
 8008950:	6921      	ldr	r1, [r4, #16]
 8008952:	4650      	mov	r0, sl
 8008954:	f7ff fec6 	bl	80086e4 <_free_r>
 8008958:	e7c7      	b.n	80088ea <__ssputs_r+0x46>
	...

0800895c <_svfiprintf_r>:
 800895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	4698      	mov	r8, r3
 8008962:	898b      	ldrh	r3, [r1, #12]
 8008964:	061b      	lsls	r3, r3, #24
 8008966:	b09d      	sub	sp, #116	; 0x74
 8008968:	4607      	mov	r7, r0
 800896a:	460d      	mov	r5, r1
 800896c:	4614      	mov	r4, r2
 800896e:	d50e      	bpl.n	800898e <_svfiprintf_r+0x32>
 8008970:	690b      	ldr	r3, [r1, #16]
 8008972:	b963      	cbnz	r3, 800898e <_svfiprintf_r+0x32>
 8008974:	2140      	movs	r1, #64	; 0x40
 8008976:	f7ff ff21 	bl	80087bc <_malloc_r>
 800897a:	6028      	str	r0, [r5, #0]
 800897c:	6128      	str	r0, [r5, #16]
 800897e:	b920      	cbnz	r0, 800898a <_svfiprintf_r+0x2e>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008988:	e0d1      	b.n	8008b2e <_svfiprintf_r+0x1d2>
 800898a:	2340      	movs	r3, #64	; 0x40
 800898c:	616b      	str	r3, [r5, #20]
 800898e:	2300      	movs	r3, #0
 8008990:	9309      	str	r3, [sp, #36]	; 0x24
 8008992:	2320      	movs	r3, #32
 8008994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008998:	f8cd 800c 	str.w	r8, [sp, #12]
 800899c:	2330      	movs	r3, #48	; 0x30
 800899e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b48 <_svfiprintf_r+0x1ec>
 80089a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089a6:	f04f 0901 	mov.w	r9, #1
 80089aa:	4623      	mov	r3, r4
 80089ac:	469a      	mov	sl, r3
 80089ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b2:	b10a      	cbz	r2, 80089b8 <_svfiprintf_r+0x5c>
 80089b4:	2a25      	cmp	r2, #37	; 0x25
 80089b6:	d1f9      	bne.n	80089ac <_svfiprintf_r+0x50>
 80089b8:	ebba 0b04 	subs.w	fp, sl, r4
 80089bc:	d00b      	beq.n	80089d6 <_svfiprintf_r+0x7a>
 80089be:	465b      	mov	r3, fp
 80089c0:	4622      	mov	r2, r4
 80089c2:	4629      	mov	r1, r5
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff ff6d 	bl	80088a4 <__ssputs_r>
 80089ca:	3001      	adds	r0, #1
 80089cc:	f000 80aa 	beq.w	8008b24 <_svfiprintf_r+0x1c8>
 80089d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d2:	445a      	add	r2, fp
 80089d4:	9209      	str	r2, [sp, #36]	; 0x24
 80089d6:	f89a 3000 	ldrb.w	r3, [sl]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 80a2 	beq.w	8008b24 <_svfiprintf_r+0x1c8>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ea:	f10a 0a01 	add.w	sl, sl, #1
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	9307      	str	r3, [sp, #28]
 80089f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089f6:	931a      	str	r3, [sp, #104]	; 0x68
 80089f8:	4654      	mov	r4, sl
 80089fa:	2205      	movs	r2, #5
 80089fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a00:	4851      	ldr	r0, [pc, #324]	; (8008b48 <_svfiprintf_r+0x1ec>)
 8008a02:	f7f7 fc15 	bl	8000230 <memchr>
 8008a06:	9a04      	ldr	r2, [sp, #16]
 8008a08:	b9d8      	cbnz	r0, 8008a42 <_svfiprintf_r+0xe6>
 8008a0a:	06d0      	lsls	r0, r2, #27
 8008a0c:	bf44      	itt	mi
 8008a0e:	2320      	movmi	r3, #32
 8008a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a14:	0711      	lsls	r1, r2, #28
 8008a16:	bf44      	itt	mi
 8008a18:	232b      	movmi	r3, #43	; 0x2b
 8008a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a22:	2b2a      	cmp	r3, #42	; 0x2a
 8008a24:	d015      	beq.n	8008a52 <_svfiprintf_r+0xf6>
 8008a26:	9a07      	ldr	r2, [sp, #28]
 8008a28:	4654      	mov	r4, sl
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f04f 0c0a 	mov.w	ip, #10
 8008a30:	4621      	mov	r1, r4
 8008a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a36:	3b30      	subs	r3, #48	; 0x30
 8008a38:	2b09      	cmp	r3, #9
 8008a3a:	d94e      	bls.n	8008ada <_svfiprintf_r+0x17e>
 8008a3c:	b1b0      	cbz	r0, 8008a6c <_svfiprintf_r+0x110>
 8008a3e:	9207      	str	r2, [sp, #28]
 8008a40:	e014      	b.n	8008a6c <_svfiprintf_r+0x110>
 8008a42:	eba0 0308 	sub.w	r3, r0, r8
 8008a46:	fa09 f303 	lsl.w	r3, r9, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	46a2      	mov	sl, r4
 8008a50:	e7d2      	b.n	80089f8 <_svfiprintf_r+0x9c>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	1d19      	adds	r1, r3, #4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	9103      	str	r1, [sp, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfbb      	ittet	lt
 8008a5e:	425b      	neglt	r3, r3
 8008a60:	f042 0202 	orrlt.w	r2, r2, #2
 8008a64:	9307      	strge	r3, [sp, #28]
 8008a66:	9307      	strlt	r3, [sp, #28]
 8008a68:	bfb8      	it	lt
 8008a6a:	9204      	strlt	r2, [sp, #16]
 8008a6c:	7823      	ldrb	r3, [r4, #0]
 8008a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a70:	d10c      	bne.n	8008a8c <_svfiprintf_r+0x130>
 8008a72:	7863      	ldrb	r3, [r4, #1]
 8008a74:	2b2a      	cmp	r3, #42	; 0x2a
 8008a76:	d135      	bne.n	8008ae4 <_svfiprintf_r+0x188>
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	1d1a      	adds	r2, r3, #4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	9203      	str	r2, [sp, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	bfb8      	it	lt
 8008a84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a88:	3402      	adds	r4, #2
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b58 <_svfiprintf_r+0x1fc>
 8008a90:	7821      	ldrb	r1, [r4, #0]
 8008a92:	2203      	movs	r2, #3
 8008a94:	4650      	mov	r0, sl
 8008a96:	f7f7 fbcb 	bl	8000230 <memchr>
 8008a9a:	b140      	cbz	r0, 8008aae <_svfiprintf_r+0x152>
 8008a9c:	2340      	movs	r3, #64	; 0x40
 8008a9e:	eba0 000a 	sub.w	r0, r0, sl
 8008aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8008aa6:	9b04      	ldr	r3, [sp, #16]
 8008aa8:	4303      	orrs	r3, r0
 8008aaa:	3401      	adds	r4, #1
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab2:	4826      	ldr	r0, [pc, #152]	; (8008b4c <_svfiprintf_r+0x1f0>)
 8008ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ab8:	2206      	movs	r2, #6
 8008aba:	f7f7 fbb9 	bl	8000230 <memchr>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d038      	beq.n	8008b34 <_svfiprintf_r+0x1d8>
 8008ac2:	4b23      	ldr	r3, [pc, #140]	; (8008b50 <_svfiprintf_r+0x1f4>)
 8008ac4:	bb1b      	cbnz	r3, 8008b0e <_svfiprintf_r+0x1b2>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	3307      	adds	r3, #7
 8008aca:	f023 0307 	bic.w	r3, r3, #7
 8008ace:	3308      	adds	r3, #8
 8008ad0:	9303      	str	r3, [sp, #12]
 8008ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad4:	4433      	add	r3, r6
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	e767      	b.n	80089aa <_svfiprintf_r+0x4e>
 8008ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ade:	460c      	mov	r4, r1
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	e7a5      	b.n	8008a30 <_svfiprintf_r+0xd4>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	3401      	adds	r4, #1
 8008ae8:	9305      	str	r3, [sp, #20]
 8008aea:	4619      	mov	r1, r3
 8008aec:	f04f 0c0a 	mov.w	ip, #10
 8008af0:	4620      	mov	r0, r4
 8008af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af6:	3a30      	subs	r2, #48	; 0x30
 8008af8:	2a09      	cmp	r2, #9
 8008afa:	d903      	bls.n	8008b04 <_svfiprintf_r+0x1a8>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0c5      	beq.n	8008a8c <_svfiprintf_r+0x130>
 8008b00:	9105      	str	r1, [sp, #20]
 8008b02:	e7c3      	b.n	8008a8c <_svfiprintf_r+0x130>
 8008b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b08:	4604      	mov	r4, r0
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e7f0      	b.n	8008af0 <_svfiprintf_r+0x194>
 8008b0e:	ab03      	add	r3, sp, #12
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	462a      	mov	r2, r5
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <_svfiprintf_r+0x1f8>)
 8008b16:	a904      	add	r1, sp, #16
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7fc fcc5 	bl	80054a8 <_printf_float>
 8008b1e:	1c42      	adds	r2, r0, #1
 8008b20:	4606      	mov	r6, r0
 8008b22:	d1d6      	bne.n	8008ad2 <_svfiprintf_r+0x176>
 8008b24:	89ab      	ldrh	r3, [r5, #12]
 8008b26:	065b      	lsls	r3, r3, #25
 8008b28:	f53f af2c 	bmi.w	8008984 <_svfiprintf_r+0x28>
 8008b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b2e:	b01d      	add	sp, #116	; 0x74
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	ab03      	add	r3, sp, #12
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	462a      	mov	r2, r5
 8008b3a:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <_svfiprintf_r+0x1f8>)
 8008b3c:	a904      	add	r1, sp, #16
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f7fc ff56 	bl	80059f0 <_printf_i>
 8008b44:	e7eb      	b.n	8008b1e <_svfiprintf_r+0x1c2>
 8008b46:	bf00      	nop
 8008b48:	08009aec 	.word	0x08009aec
 8008b4c:	08009af6 	.word	0x08009af6
 8008b50:	080054a9 	.word	0x080054a9
 8008b54:	080088a5 	.word	0x080088a5
 8008b58:	08009af2 	.word	0x08009af2
 8008b5c:	00000000 	.word	0x00000000

08008b60 <nan>:
 8008b60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b68 <nan+0x8>
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	00000000 	.word	0x00000000
 8008b6c:	7ff80000 	.word	0x7ff80000

08008b70 <_sbrk_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	; (8008b8c <_sbrk_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f8 ff54 	bl	8001a28 <_sbrk>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_sbrk_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_sbrk_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000820 	.word	0x20000820

08008b90 <__ascii_wctomb>:
 8008b90:	b149      	cbz	r1, 8008ba6 <__ascii_wctomb+0x16>
 8008b92:	2aff      	cmp	r2, #255	; 0xff
 8008b94:	bf85      	ittet	hi
 8008b96:	238a      	movhi	r3, #138	; 0x8a
 8008b98:	6003      	strhi	r3, [r0, #0]
 8008b9a:	700a      	strbls	r2, [r1, #0]
 8008b9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008ba0:	bf98      	it	ls
 8008ba2:	2001      	movls	r0, #1
 8008ba4:	4770      	bx	lr
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4770      	bx	lr
	...

08008bac <__assert_func>:
 8008bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bae:	4614      	mov	r4, r2
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <__assert_func+0x2c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	68d8      	ldr	r0, [r3, #12]
 8008bba:	b14c      	cbz	r4, 8008bd0 <__assert_func+0x24>
 8008bbc:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <__assert_func+0x30>)
 8008bbe:	9100      	str	r1, [sp, #0]
 8008bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bc4:	4906      	ldr	r1, [pc, #24]	; (8008be0 <__assert_func+0x34>)
 8008bc6:	462b      	mov	r3, r5
 8008bc8:	f000 f80e 	bl	8008be8 <fiprintf>
 8008bcc:	f000 fa8c 	bl	80090e8 <abort>
 8008bd0:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <__assert_func+0x38>)
 8008bd2:	461c      	mov	r4, r3
 8008bd4:	e7f3      	b.n	8008bbe <__assert_func+0x12>
 8008bd6:	bf00      	nop
 8008bd8:	2000001c 	.word	0x2000001c
 8008bdc:	08009afd 	.word	0x08009afd
 8008be0:	08009b0a 	.word	0x08009b0a
 8008be4:	08009b38 	.word	0x08009b38

08008be8 <fiprintf>:
 8008be8:	b40e      	push	{r1, r2, r3}
 8008bea:	b503      	push	{r0, r1, lr}
 8008bec:	4601      	mov	r1, r0
 8008bee:	ab03      	add	r3, sp, #12
 8008bf0:	4805      	ldr	r0, [pc, #20]	; (8008c08 <fiprintf+0x20>)
 8008bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf6:	6800      	ldr	r0, [r0, #0]
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	f000 f885 	bl	8008d08 <_vfiprintf_r>
 8008bfe:	b002      	add	sp, #8
 8008c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c04:	b003      	add	sp, #12
 8008c06:	4770      	bx	lr
 8008c08:	2000001c 	.word	0x2000001c

08008c0c <memmove>:
 8008c0c:	4288      	cmp	r0, r1
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	eb01 0402 	add.w	r4, r1, r2
 8008c14:	d902      	bls.n	8008c1c <memmove+0x10>
 8008c16:	4284      	cmp	r4, r0
 8008c18:	4623      	mov	r3, r4
 8008c1a:	d807      	bhi.n	8008c2c <memmove+0x20>
 8008c1c:	1e43      	subs	r3, r0, #1
 8008c1e:	42a1      	cmp	r1, r4
 8008c20:	d008      	beq.n	8008c34 <memmove+0x28>
 8008c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c2a:	e7f8      	b.n	8008c1e <memmove+0x12>
 8008c2c:	4402      	add	r2, r0
 8008c2e:	4601      	mov	r1, r0
 8008c30:	428a      	cmp	r2, r1
 8008c32:	d100      	bne.n	8008c36 <memmove+0x2a>
 8008c34:	bd10      	pop	{r4, pc}
 8008c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c3e:	e7f7      	b.n	8008c30 <memmove+0x24>

08008c40 <__malloc_lock>:
 8008c40:	4801      	ldr	r0, [pc, #4]	; (8008c48 <__malloc_lock+0x8>)
 8008c42:	f000 bc11 	b.w	8009468 <__retarget_lock_acquire_recursive>
 8008c46:	bf00      	nop
 8008c48:	20000824 	.word	0x20000824

08008c4c <__malloc_unlock>:
 8008c4c:	4801      	ldr	r0, [pc, #4]	; (8008c54 <__malloc_unlock+0x8>)
 8008c4e:	f000 bc0c 	b.w	800946a <__retarget_lock_release_recursive>
 8008c52:	bf00      	nop
 8008c54:	20000824 	.word	0x20000824

08008c58 <_realloc_r>:
 8008c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	4614      	mov	r4, r2
 8008c60:	460e      	mov	r6, r1
 8008c62:	b921      	cbnz	r1, 8008c6e <_realloc_r+0x16>
 8008c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c68:	4611      	mov	r1, r2
 8008c6a:	f7ff bda7 	b.w	80087bc <_malloc_r>
 8008c6e:	b92a      	cbnz	r2, 8008c7c <_realloc_r+0x24>
 8008c70:	f7ff fd38 	bl	80086e4 <_free_r>
 8008c74:	4625      	mov	r5, r4
 8008c76:	4628      	mov	r0, r5
 8008c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7c:	f000 fc5c 	bl	8009538 <_malloc_usable_size_r>
 8008c80:	4284      	cmp	r4, r0
 8008c82:	4607      	mov	r7, r0
 8008c84:	d802      	bhi.n	8008c8c <_realloc_r+0x34>
 8008c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c8a:	d812      	bhi.n	8008cb2 <_realloc_r+0x5a>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7ff fd94 	bl	80087bc <_malloc_r>
 8008c94:	4605      	mov	r5, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0ed      	beq.n	8008c76 <_realloc_r+0x1e>
 8008c9a:	42bc      	cmp	r4, r7
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	bf28      	it	cs
 8008ca2:	463a      	movcs	r2, r7
 8008ca4:	f7ff f838 	bl	8007d18 <memcpy>
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4640      	mov	r0, r8
 8008cac:	f7ff fd1a 	bl	80086e4 <_free_r>
 8008cb0:	e7e1      	b.n	8008c76 <_realloc_r+0x1e>
 8008cb2:	4635      	mov	r5, r6
 8008cb4:	e7df      	b.n	8008c76 <_realloc_r+0x1e>

08008cb6 <__sfputc_r>:
 8008cb6:	6893      	ldr	r3, [r2, #8]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	b410      	push	{r4}
 8008cbe:	6093      	str	r3, [r2, #8]
 8008cc0:	da08      	bge.n	8008cd4 <__sfputc_r+0x1e>
 8008cc2:	6994      	ldr	r4, [r2, #24]
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	db01      	blt.n	8008ccc <__sfputc_r+0x16>
 8008cc8:	290a      	cmp	r1, #10
 8008cca:	d103      	bne.n	8008cd4 <__sfputc_r+0x1e>
 8008ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd0:	f000 b94a 	b.w	8008f68 <__swbuf_r>
 8008cd4:	6813      	ldr	r3, [r2, #0]
 8008cd6:	1c58      	adds	r0, r3, #1
 8008cd8:	6010      	str	r0, [r2, #0]
 8008cda:	7019      	strb	r1, [r3, #0]
 8008cdc:	4608      	mov	r0, r1
 8008cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <__sfputs_r>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	460f      	mov	r7, r1
 8008cea:	4614      	mov	r4, r2
 8008cec:	18d5      	adds	r5, r2, r3
 8008cee:	42ac      	cmp	r4, r5
 8008cf0:	d101      	bne.n	8008cf6 <__sfputs_r+0x12>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e007      	b.n	8008d06 <__sfputs_r+0x22>
 8008cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfa:	463a      	mov	r2, r7
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7ff ffda 	bl	8008cb6 <__sfputc_r>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	d1f3      	bne.n	8008cee <__sfputs_r+0xa>
 8008d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d08 <_vfiprintf_r>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	460d      	mov	r5, r1
 8008d0e:	b09d      	sub	sp, #116	; 0x74
 8008d10:	4614      	mov	r4, r2
 8008d12:	4698      	mov	r8, r3
 8008d14:	4606      	mov	r6, r0
 8008d16:	b118      	cbz	r0, 8008d20 <_vfiprintf_r+0x18>
 8008d18:	6983      	ldr	r3, [r0, #24]
 8008d1a:	b90b      	cbnz	r3, 8008d20 <_vfiprintf_r+0x18>
 8008d1c:	f000 fb06 	bl	800932c <__sinit>
 8008d20:	4b89      	ldr	r3, [pc, #548]	; (8008f48 <_vfiprintf_r+0x240>)
 8008d22:	429d      	cmp	r5, r3
 8008d24:	d11b      	bne.n	8008d5e <_vfiprintf_r+0x56>
 8008d26:	6875      	ldr	r5, [r6, #4]
 8008d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d2a:	07d9      	lsls	r1, r3, #31
 8008d2c:	d405      	bmi.n	8008d3a <_vfiprintf_r+0x32>
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	059a      	lsls	r2, r3, #22
 8008d32:	d402      	bmi.n	8008d3a <_vfiprintf_r+0x32>
 8008d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d36:	f000 fb97 	bl	8009468 <__retarget_lock_acquire_recursive>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	071b      	lsls	r3, r3, #28
 8008d3e:	d501      	bpl.n	8008d44 <_vfiprintf_r+0x3c>
 8008d40:	692b      	ldr	r3, [r5, #16]
 8008d42:	b9eb      	cbnz	r3, 8008d80 <_vfiprintf_r+0x78>
 8008d44:	4629      	mov	r1, r5
 8008d46:	4630      	mov	r0, r6
 8008d48:	f000 f960 	bl	800900c <__swsetup_r>
 8008d4c:	b1c0      	cbz	r0, 8008d80 <_vfiprintf_r+0x78>
 8008d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d50:	07dc      	lsls	r4, r3, #31
 8008d52:	d50e      	bpl.n	8008d72 <_vfiprintf_r+0x6a>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d58:	b01d      	add	sp, #116	; 0x74
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	4b7b      	ldr	r3, [pc, #492]	; (8008f4c <_vfiprintf_r+0x244>)
 8008d60:	429d      	cmp	r5, r3
 8008d62:	d101      	bne.n	8008d68 <_vfiprintf_r+0x60>
 8008d64:	68b5      	ldr	r5, [r6, #8]
 8008d66:	e7df      	b.n	8008d28 <_vfiprintf_r+0x20>
 8008d68:	4b79      	ldr	r3, [pc, #484]	; (8008f50 <_vfiprintf_r+0x248>)
 8008d6a:	429d      	cmp	r5, r3
 8008d6c:	bf08      	it	eq
 8008d6e:	68f5      	ldreq	r5, [r6, #12]
 8008d70:	e7da      	b.n	8008d28 <_vfiprintf_r+0x20>
 8008d72:	89ab      	ldrh	r3, [r5, #12]
 8008d74:	0598      	lsls	r0, r3, #22
 8008d76:	d4ed      	bmi.n	8008d54 <_vfiprintf_r+0x4c>
 8008d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d7a:	f000 fb76 	bl	800946a <__retarget_lock_release_recursive>
 8008d7e:	e7e9      	b.n	8008d54 <_vfiprintf_r+0x4c>
 8008d80:	2300      	movs	r3, #0
 8008d82:	9309      	str	r3, [sp, #36]	; 0x24
 8008d84:	2320      	movs	r3, #32
 8008d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d8e:	2330      	movs	r3, #48	; 0x30
 8008d90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f54 <_vfiprintf_r+0x24c>
 8008d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d98:	f04f 0901 	mov.w	r9, #1
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	469a      	mov	sl, r3
 8008da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008da4:	b10a      	cbz	r2, 8008daa <_vfiprintf_r+0xa2>
 8008da6:	2a25      	cmp	r2, #37	; 0x25
 8008da8:	d1f9      	bne.n	8008d9e <_vfiprintf_r+0x96>
 8008daa:	ebba 0b04 	subs.w	fp, sl, r4
 8008dae:	d00b      	beq.n	8008dc8 <_vfiprintf_r+0xc0>
 8008db0:	465b      	mov	r3, fp
 8008db2:	4622      	mov	r2, r4
 8008db4:	4629      	mov	r1, r5
 8008db6:	4630      	mov	r0, r6
 8008db8:	f7ff ff94 	bl	8008ce4 <__sfputs_r>
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	f000 80aa 	beq.w	8008f16 <_vfiprintf_r+0x20e>
 8008dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dc4:	445a      	add	r2, fp
 8008dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80a2 	beq.w	8008f16 <_vfiprintf_r+0x20e>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ddc:	f10a 0a01 	add.w	sl, sl, #1
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	9307      	str	r3, [sp, #28]
 8008de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008de8:	931a      	str	r3, [sp, #104]	; 0x68
 8008dea:	4654      	mov	r4, sl
 8008dec:	2205      	movs	r2, #5
 8008dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df2:	4858      	ldr	r0, [pc, #352]	; (8008f54 <_vfiprintf_r+0x24c>)
 8008df4:	f7f7 fa1c 	bl	8000230 <memchr>
 8008df8:	9a04      	ldr	r2, [sp, #16]
 8008dfa:	b9d8      	cbnz	r0, 8008e34 <_vfiprintf_r+0x12c>
 8008dfc:	06d1      	lsls	r1, r2, #27
 8008dfe:	bf44      	itt	mi
 8008e00:	2320      	movmi	r3, #32
 8008e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e06:	0713      	lsls	r3, r2, #28
 8008e08:	bf44      	itt	mi
 8008e0a:	232b      	movmi	r3, #43	; 0x2b
 8008e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e10:	f89a 3000 	ldrb.w	r3, [sl]
 8008e14:	2b2a      	cmp	r3, #42	; 0x2a
 8008e16:	d015      	beq.n	8008e44 <_vfiprintf_r+0x13c>
 8008e18:	9a07      	ldr	r2, [sp, #28]
 8008e1a:	4654      	mov	r4, sl
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4621      	mov	r1, r4
 8008e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e28:	3b30      	subs	r3, #48	; 0x30
 8008e2a:	2b09      	cmp	r3, #9
 8008e2c:	d94e      	bls.n	8008ecc <_vfiprintf_r+0x1c4>
 8008e2e:	b1b0      	cbz	r0, 8008e5e <_vfiprintf_r+0x156>
 8008e30:	9207      	str	r2, [sp, #28]
 8008e32:	e014      	b.n	8008e5e <_vfiprintf_r+0x156>
 8008e34:	eba0 0308 	sub.w	r3, r0, r8
 8008e38:	fa09 f303 	lsl.w	r3, r9, r3
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	9304      	str	r3, [sp, #16]
 8008e40:	46a2      	mov	sl, r4
 8008e42:	e7d2      	b.n	8008dea <_vfiprintf_r+0xe2>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	1d19      	adds	r1, r3, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	9103      	str	r1, [sp, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bfbb      	ittet	lt
 8008e50:	425b      	neglt	r3, r3
 8008e52:	f042 0202 	orrlt.w	r2, r2, #2
 8008e56:	9307      	strge	r3, [sp, #28]
 8008e58:	9307      	strlt	r3, [sp, #28]
 8008e5a:	bfb8      	it	lt
 8008e5c:	9204      	strlt	r2, [sp, #16]
 8008e5e:	7823      	ldrb	r3, [r4, #0]
 8008e60:	2b2e      	cmp	r3, #46	; 0x2e
 8008e62:	d10c      	bne.n	8008e7e <_vfiprintf_r+0x176>
 8008e64:	7863      	ldrb	r3, [r4, #1]
 8008e66:	2b2a      	cmp	r3, #42	; 0x2a
 8008e68:	d135      	bne.n	8008ed6 <_vfiprintf_r+0x1ce>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	1d1a      	adds	r2, r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	9203      	str	r2, [sp, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bfb8      	it	lt
 8008e76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e7a:	3402      	adds	r4, #2
 8008e7c:	9305      	str	r3, [sp, #20]
 8008e7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f64 <_vfiprintf_r+0x25c>
 8008e82:	7821      	ldrb	r1, [r4, #0]
 8008e84:	2203      	movs	r2, #3
 8008e86:	4650      	mov	r0, sl
 8008e88:	f7f7 f9d2 	bl	8000230 <memchr>
 8008e8c:	b140      	cbz	r0, 8008ea0 <_vfiprintf_r+0x198>
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	eba0 000a 	sub.w	r0, r0, sl
 8008e94:	fa03 f000 	lsl.w	r0, r3, r0
 8008e98:	9b04      	ldr	r3, [sp, #16]
 8008e9a:	4303      	orrs	r3, r0
 8008e9c:	3401      	adds	r4, #1
 8008e9e:	9304      	str	r3, [sp, #16]
 8008ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea4:	482c      	ldr	r0, [pc, #176]	; (8008f58 <_vfiprintf_r+0x250>)
 8008ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eaa:	2206      	movs	r2, #6
 8008eac:	f7f7 f9c0 	bl	8000230 <memchr>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d03f      	beq.n	8008f34 <_vfiprintf_r+0x22c>
 8008eb4:	4b29      	ldr	r3, [pc, #164]	; (8008f5c <_vfiprintf_r+0x254>)
 8008eb6:	bb1b      	cbnz	r3, 8008f00 <_vfiprintf_r+0x1f8>
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	3307      	adds	r3, #7
 8008ebc:	f023 0307 	bic.w	r3, r3, #7
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	9303      	str	r3, [sp, #12]
 8008ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec6:	443b      	add	r3, r7
 8008ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eca:	e767      	b.n	8008d9c <_vfiprintf_r+0x94>
 8008ecc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	e7a5      	b.n	8008e22 <_vfiprintf_r+0x11a>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	3401      	adds	r4, #1
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	4619      	mov	r1, r3
 8008ede:	f04f 0c0a 	mov.w	ip, #10
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ee8:	3a30      	subs	r2, #48	; 0x30
 8008eea:	2a09      	cmp	r2, #9
 8008eec:	d903      	bls.n	8008ef6 <_vfiprintf_r+0x1ee>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0c5      	beq.n	8008e7e <_vfiprintf_r+0x176>
 8008ef2:	9105      	str	r1, [sp, #20]
 8008ef4:	e7c3      	b.n	8008e7e <_vfiprintf_r+0x176>
 8008ef6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008efa:	4604      	mov	r4, r0
 8008efc:	2301      	movs	r3, #1
 8008efe:	e7f0      	b.n	8008ee2 <_vfiprintf_r+0x1da>
 8008f00:	ab03      	add	r3, sp, #12
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	462a      	mov	r2, r5
 8008f06:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <_vfiprintf_r+0x258>)
 8008f08:	a904      	add	r1, sp, #16
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7fc facc 	bl	80054a8 <_printf_float>
 8008f10:	4607      	mov	r7, r0
 8008f12:	1c78      	adds	r0, r7, #1
 8008f14:	d1d6      	bne.n	8008ec4 <_vfiprintf_r+0x1bc>
 8008f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f18:	07d9      	lsls	r1, r3, #31
 8008f1a:	d405      	bmi.n	8008f28 <_vfiprintf_r+0x220>
 8008f1c:	89ab      	ldrh	r3, [r5, #12]
 8008f1e:	059a      	lsls	r2, r3, #22
 8008f20:	d402      	bmi.n	8008f28 <_vfiprintf_r+0x220>
 8008f22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f24:	f000 faa1 	bl	800946a <__retarget_lock_release_recursive>
 8008f28:	89ab      	ldrh	r3, [r5, #12]
 8008f2a:	065b      	lsls	r3, r3, #25
 8008f2c:	f53f af12 	bmi.w	8008d54 <_vfiprintf_r+0x4c>
 8008f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f32:	e711      	b.n	8008d58 <_vfiprintf_r+0x50>
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <_vfiprintf_r+0x258>)
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7fc fd56 	bl	80059f0 <_printf_i>
 8008f44:	e7e4      	b.n	8008f10 <_vfiprintf_r+0x208>
 8008f46:	bf00      	nop
 8008f48:	08009c5c 	.word	0x08009c5c
 8008f4c:	08009c7c 	.word	0x08009c7c
 8008f50:	08009c3c 	.word	0x08009c3c
 8008f54:	08009aec 	.word	0x08009aec
 8008f58:	08009af6 	.word	0x08009af6
 8008f5c:	080054a9 	.word	0x080054a9
 8008f60:	08008ce5 	.word	0x08008ce5
 8008f64:	08009af2 	.word	0x08009af2

08008f68 <__swbuf_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	460e      	mov	r6, r1
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	4605      	mov	r5, r0
 8008f70:	b118      	cbz	r0, 8008f7a <__swbuf_r+0x12>
 8008f72:	6983      	ldr	r3, [r0, #24]
 8008f74:	b90b      	cbnz	r3, 8008f7a <__swbuf_r+0x12>
 8008f76:	f000 f9d9 	bl	800932c <__sinit>
 8008f7a:	4b21      	ldr	r3, [pc, #132]	; (8009000 <__swbuf_r+0x98>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d12b      	bne.n	8008fd8 <__swbuf_r+0x70>
 8008f80:	686c      	ldr	r4, [r5, #4]
 8008f82:	69a3      	ldr	r3, [r4, #24]
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	071a      	lsls	r2, r3, #28
 8008f8a:	d52f      	bpl.n	8008fec <__swbuf_r+0x84>
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	b36b      	cbz	r3, 8008fec <__swbuf_r+0x84>
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	6820      	ldr	r0, [r4, #0]
 8008f94:	1ac0      	subs	r0, r0, r3
 8008f96:	6963      	ldr	r3, [r4, #20]
 8008f98:	b2f6      	uxtb	r6, r6
 8008f9a:	4283      	cmp	r3, r0
 8008f9c:	4637      	mov	r7, r6
 8008f9e:	dc04      	bgt.n	8008faa <__swbuf_r+0x42>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 f92e 	bl	8009204 <_fflush_r>
 8008fa8:	bb30      	cbnz	r0, 8008ff8 <__swbuf_r+0x90>
 8008faa:	68a3      	ldr	r3, [r4, #8]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	60a3      	str	r3, [r4, #8]
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	6022      	str	r2, [r4, #0]
 8008fb6:	701e      	strb	r6, [r3, #0]
 8008fb8:	6963      	ldr	r3, [r4, #20]
 8008fba:	3001      	adds	r0, #1
 8008fbc:	4283      	cmp	r3, r0
 8008fbe:	d004      	beq.n	8008fca <__swbuf_r+0x62>
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	07db      	lsls	r3, r3, #31
 8008fc4:	d506      	bpl.n	8008fd4 <__swbuf_r+0x6c>
 8008fc6:	2e0a      	cmp	r6, #10
 8008fc8:	d104      	bne.n	8008fd4 <__swbuf_r+0x6c>
 8008fca:	4621      	mov	r1, r4
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f000 f919 	bl	8009204 <_fflush_r>
 8008fd2:	b988      	cbnz	r0, 8008ff8 <__swbuf_r+0x90>
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <__swbuf_r+0x9c>)
 8008fda:	429c      	cmp	r4, r3
 8008fdc:	d101      	bne.n	8008fe2 <__swbuf_r+0x7a>
 8008fde:	68ac      	ldr	r4, [r5, #8]
 8008fe0:	e7cf      	b.n	8008f82 <__swbuf_r+0x1a>
 8008fe2:	4b09      	ldr	r3, [pc, #36]	; (8009008 <__swbuf_r+0xa0>)
 8008fe4:	429c      	cmp	r4, r3
 8008fe6:	bf08      	it	eq
 8008fe8:	68ec      	ldreq	r4, [r5, #12]
 8008fea:	e7ca      	b.n	8008f82 <__swbuf_r+0x1a>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 f80c 	bl	800900c <__swsetup_r>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d0cb      	beq.n	8008f90 <__swbuf_r+0x28>
 8008ff8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ffc:	e7ea      	b.n	8008fd4 <__swbuf_r+0x6c>
 8008ffe:	bf00      	nop
 8009000:	08009c5c 	.word	0x08009c5c
 8009004:	08009c7c 	.word	0x08009c7c
 8009008:	08009c3c 	.word	0x08009c3c

0800900c <__swsetup_r>:
 800900c:	4b32      	ldr	r3, [pc, #200]	; (80090d8 <__swsetup_r+0xcc>)
 800900e:	b570      	push	{r4, r5, r6, lr}
 8009010:	681d      	ldr	r5, [r3, #0]
 8009012:	4606      	mov	r6, r0
 8009014:	460c      	mov	r4, r1
 8009016:	b125      	cbz	r5, 8009022 <__swsetup_r+0x16>
 8009018:	69ab      	ldr	r3, [r5, #24]
 800901a:	b913      	cbnz	r3, 8009022 <__swsetup_r+0x16>
 800901c:	4628      	mov	r0, r5
 800901e:	f000 f985 	bl	800932c <__sinit>
 8009022:	4b2e      	ldr	r3, [pc, #184]	; (80090dc <__swsetup_r+0xd0>)
 8009024:	429c      	cmp	r4, r3
 8009026:	d10f      	bne.n	8009048 <__swsetup_r+0x3c>
 8009028:	686c      	ldr	r4, [r5, #4]
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009030:	0719      	lsls	r1, r3, #28
 8009032:	d42c      	bmi.n	800908e <__swsetup_r+0x82>
 8009034:	06dd      	lsls	r5, r3, #27
 8009036:	d411      	bmi.n	800905c <__swsetup_r+0x50>
 8009038:	2309      	movs	r3, #9
 800903a:	6033      	str	r3, [r6, #0]
 800903c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009046:	e03e      	b.n	80090c6 <__swsetup_r+0xba>
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <__swsetup_r+0xd4>)
 800904a:	429c      	cmp	r4, r3
 800904c:	d101      	bne.n	8009052 <__swsetup_r+0x46>
 800904e:	68ac      	ldr	r4, [r5, #8]
 8009050:	e7eb      	b.n	800902a <__swsetup_r+0x1e>
 8009052:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <__swsetup_r+0xd8>)
 8009054:	429c      	cmp	r4, r3
 8009056:	bf08      	it	eq
 8009058:	68ec      	ldreq	r4, [r5, #12]
 800905a:	e7e6      	b.n	800902a <__swsetup_r+0x1e>
 800905c:	0758      	lsls	r0, r3, #29
 800905e:	d512      	bpl.n	8009086 <__swsetup_r+0x7a>
 8009060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009062:	b141      	cbz	r1, 8009076 <__swsetup_r+0x6a>
 8009064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009068:	4299      	cmp	r1, r3
 800906a:	d002      	beq.n	8009072 <__swsetup_r+0x66>
 800906c:	4630      	mov	r0, r6
 800906e:	f7ff fb39 	bl	80086e4 <_free_r>
 8009072:	2300      	movs	r3, #0
 8009074:	6363      	str	r3, [r4, #52]	; 0x34
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	2300      	movs	r3, #0
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	6923      	ldr	r3, [r4, #16]
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f043 0308 	orr.w	r3, r3, #8
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	b94b      	cbnz	r3, 80090a6 <__swsetup_r+0x9a>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909c:	d003      	beq.n	80090a6 <__swsetup_r+0x9a>
 800909e:	4621      	mov	r1, r4
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 fa09 	bl	80094b8 <__smakebuf_r>
 80090a6:	89a0      	ldrh	r0, [r4, #12]
 80090a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ac:	f010 0301 	ands.w	r3, r0, #1
 80090b0:	d00a      	beq.n	80090c8 <__swsetup_r+0xbc>
 80090b2:	2300      	movs	r3, #0
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	6963      	ldr	r3, [r4, #20]
 80090b8:	425b      	negs	r3, r3
 80090ba:	61a3      	str	r3, [r4, #24]
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b943      	cbnz	r3, 80090d2 <__swsetup_r+0xc6>
 80090c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090c4:	d1ba      	bne.n	800903c <__swsetup_r+0x30>
 80090c6:	bd70      	pop	{r4, r5, r6, pc}
 80090c8:	0781      	lsls	r1, r0, #30
 80090ca:	bf58      	it	pl
 80090cc:	6963      	ldrpl	r3, [r4, #20]
 80090ce:	60a3      	str	r3, [r4, #8]
 80090d0:	e7f4      	b.n	80090bc <__swsetup_r+0xb0>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e7f7      	b.n	80090c6 <__swsetup_r+0xba>
 80090d6:	bf00      	nop
 80090d8:	2000001c 	.word	0x2000001c
 80090dc:	08009c5c 	.word	0x08009c5c
 80090e0:	08009c7c 	.word	0x08009c7c
 80090e4:	08009c3c 	.word	0x08009c3c

080090e8 <abort>:
 80090e8:	b508      	push	{r3, lr}
 80090ea:	2006      	movs	r0, #6
 80090ec:	f000 fa54 	bl	8009598 <raise>
 80090f0:	2001      	movs	r0, #1
 80090f2:	f7f8 fc21 	bl	8001938 <_exit>
	...

080090f8 <__sflush_r>:
 80090f8:	898a      	ldrh	r2, [r1, #12]
 80090fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fe:	4605      	mov	r5, r0
 8009100:	0710      	lsls	r0, r2, #28
 8009102:	460c      	mov	r4, r1
 8009104:	d458      	bmi.n	80091b8 <__sflush_r+0xc0>
 8009106:	684b      	ldr	r3, [r1, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc05      	bgt.n	8009118 <__sflush_r+0x20>
 800910c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	dc02      	bgt.n	8009118 <__sflush_r+0x20>
 8009112:	2000      	movs	r0, #0
 8009114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800911a:	2e00      	cmp	r6, #0
 800911c:	d0f9      	beq.n	8009112 <__sflush_r+0x1a>
 800911e:	2300      	movs	r3, #0
 8009120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009124:	682f      	ldr	r7, [r5, #0]
 8009126:	602b      	str	r3, [r5, #0]
 8009128:	d032      	beq.n	8009190 <__sflush_r+0x98>
 800912a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	075a      	lsls	r2, r3, #29
 8009130:	d505      	bpl.n	800913e <__sflush_r+0x46>
 8009132:	6863      	ldr	r3, [r4, #4]
 8009134:	1ac0      	subs	r0, r0, r3
 8009136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009138:	b10b      	cbz	r3, 800913e <__sflush_r+0x46>
 800913a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800913c:	1ac0      	subs	r0, r0, r3
 800913e:	2300      	movs	r3, #0
 8009140:	4602      	mov	r2, r0
 8009142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009144:	6a21      	ldr	r1, [r4, #32]
 8009146:	4628      	mov	r0, r5
 8009148:	47b0      	blx	r6
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	d106      	bne.n	800915e <__sflush_r+0x66>
 8009150:	6829      	ldr	r1, [r5, #0]
 8009152:	291d      	cmp	r1, #29
 8009154:	d82c      	bhi.n	80091b0 <__sflush_r+0xb8>
 8009156:	4a2a      	ldr	r2, [pc, #168]	; (8009200 <__sflush_r+0x108>)
 8009158:	40ca      	lsrs	r2, r1
 800915a:	07d6      	lsls	r6, r2, #31
 800915c:	d528      	bpl.n	80091b0 <__sflush_r+0xb8>
 800915e:	2200      	movs	r2, #0
 8009160:	6062      	str	r2, [r4, #4]
 8009162:	04d9      	lsls	r1, r3, #19
 8009164:	6922      	ldr	r2, [r4, #16]
 8009166:	6022      	str	r2, [r4, #0]
 8009168:	d504      	bpl.n	8009174 <__sflush_r+0x7c>
 800916a:	1c42      	adds	r2, r0, #1
 800916c:	d101      	bne.n	8009172 <__sflush_r+0x7a>
 800916e:	682b      	ldr	r3, [r5, #0]
 8009170:	b903      	cbnz	r3, 8009174 <__sflush_r+0x7c>
 8009172:	6560      	str	r0, [r4, #84]	; 0x54
 8009174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009176:	602f      	str	r7, [r5, #0]
 8009178:	2900      	cmp	r1, #0
 800917a:	d0ca      	beq.n	8009112 <__sflush_r+0x1a>
 800917c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009180:	4299      	cmp	r1, r3
 8009182:	d002      	beq.n	800918a <__sflush_r+0x92>
 8009184:	4628      	mov	r0, r5
 8009186:	f7ff faad 	bl	80086e4 <_free_r>
 800918a:	2000      	movs	r0, #0
 800918c:	6360      	str	r0, [r4, #52]	; 0x34
 800918e:	e7c1      	b.n	8009114 <__sflush_r+0x1c>
 8009190:	6a21      	ldr	r1, [r4, #32]
 8009192:	2301      	movs	r3, #1
 8009194:	4628      	mov	r0, r5
 8009196:	47b0      	blx	r6
 8009198:	1c41      	adds	r1, r0, #1
 800919a:	d1c7      	bne.n	800912c <__sflush_r+0x34>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0c4      	beq.n	800912c <__sflush_r+0x34>
 80091a2:	2b1d      	cmp	r3, #29
 80091a4:	d001      	beq.n	80091aa <__sflush_r+0xb2>
 80091a6:	2b16      	cmp	r3, #22
 80091a8:	d101      	bne.n	80091ae <__sflush_r+0xb6>
 80091aa:	602f      	str	r7, [r5, #0]
 80091ac:	e7b1      	b.n	8009112 <__sflush_r+0x1a>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	e7ad      	b.n	8009114 <__sflush_r+0x1c>
 80091b8:	690f      	ldr	r7, [r1, #16]
 80091ba:	2f00      	cmp	r7, #0
 80091bc:	d0a9      	beq.n	8009112 <__sflush_r+0x1a>
 80091be:	0793      	lsls	r3, r2, #30
 80091c0:	680e      	ldr	r6, [r1, #0]
 80091c2:	bf08      	it	eq
 80091c4:	694b      	ldreq	r3, [r1, #20]
 80091c6:	600f      	str	r7, [r1, #0]
 80091c8:	bf18      	it	ne
 80091ca:	2300      	movne	r3, #0
 80091cc:	eba6 0807 	sub.w	r8, r6, r7
 80091d0:	608b      	str	r3, [r1, #8]
 80091d2:	f1b8 0f00 	cmp.w	r8, #0
 80091d6:	dd9c      	ble.n	8009112 <__sflush_r+0x1a>
 80091d8:	6a21      	ldr	r1, [r4, #32]
 80091da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091dc:	4643      	mov	r3, r8
 80091de:	463a      	mov	r2, r7
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b0      	blx	r6
 80091e4:	2800      	cmp	r0, #0
 80091e6:	dc06      	bgt.n	80091f6 <__sflush_r+0xfe>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091f4:	e78e      	b.n	8009114 <__sflush_r+0x1c>
 80091f6:	4407      	add	r7, r0
 80091f8:	eba8 0800 	sub.w	r8, r8, r0
 80091fc:	e7e9      	b.n	80091d2 <__sflush_r+0xda>
 80091fe:	bf00      	nop
 8009200:	20400001 	.word	0x20400001

08009204 <_fflush_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	690b      	ldr	r3, [r1, #16]
 8009208:	4605      	mov	r5, r0
 800920a:	460c      	mov	r4, r1
 800920c:	b913      	cbnz	r3, 8009214 <_fflush_r+0x10>
 800920e:	2500      	movs	r5, #0
 8009210:	4628      	mov	r0, r5
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	b118      	cbz	r0, 800921e <_fflush_r+0x1a>
 8009216:	6983      	ldr	r3, [r0, #24]
 8009218:	b90b      	cbnz	r3, 800921e <_fflush_r+0x1a>
 800921a:	f000 f887 	bl	800932c <__sinit>
 800921e:	4b14      	ldr	r3, [pc, #80]	; (8009270 <_fflush_r+0x6c>)
 8009220:	429c      	cmp	r4, r3
 8009222:	d11b      	bne.n	800925c <_fflush_r+0x58>
 8009224:	686c      	ldr	r4, [r5, #4]
 8009226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0ef      	beq.n	800920e <_fflush_r+0xa>
 800922e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009230:	07d0      	lsls	r0, r2, #31
 8009232:	d404      	bmi.n	800923e <_fflush_r+0x3a>
 8009234:	0599      	lsls	r1, r3, #22
 8009236:	d402      	bmi.n	800923e <_fflush_r+0x3a>
 8009238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800923a:	f000 f915 	bl	8009468 <__retarget_lock_acquire_recursive>
 800923e:	4628      	mov	r0, r5
 8009240:	4621      	mov	r1, r4
 8009242:	f7ff ff59 	bl	80090f8 <__sflush_r>
 8009246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009248:	07da      	lsls	r2, r3, #31
 800924a:	4605      	mov	r5, r0
 800924c:	d4e0      	bmi.n	8009210 <_fflush_r+0xc>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	059b      	lsls	r3, r3, #22
 8009252:	d4dd      	bmi.n	8009210 <_fflush_r+0xc>
 8009254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009256:	f000 f908 	bl	800946a <__retarget_lock_release_recursive>
 800925a:	e7d9      	b.n	8009210 <_fflush_r+0xc>
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <_fflush_r+0x70>)
 800925e:	429c      	cmp	r4, r3
 8009260:	d101      	bne.n	8009266 <_fflush_r+0x62>
 8009262:	68ac      	ldr	r4, [r5, #8]
 8009264:	e7df      	b.n	8009226 <_fflush_r+0x22>
 8009266:	4b04      	ldr	r3, [pc, #16]	; (8009278 <_fflush_r+0x74>)
 8009268:	429c      	cmp	r4, r3
 800926a:	bf08      	it	eq
 800926c:	68ec      	ldreq	r4, [r5, #12]
 800926e:	e7da      	b.n	8009226 <_fflush_r+0x22>
 8009270:	08009c5c 	.word	0x08009c5c
 8009274:	08009c7c 	.word	0x08009c7c
 8009278:	08009c3c 	.word	0x08009c3c

0800927c <std>:
 800927c:	2300      	movs	r3, #0
 800927e:	b510      	push	{r4, lr}
 8009280:	4604      	mov	r4, r0
 8009282:	e9c0 3300 	strd	r3, r3, [r0]
 8009286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800928a:	6083      	str	r3, [r0, #8]
 800928c:	8181      	strh	r1, [r0, #12]
 800928e:	6643      	str	r3, [r0, #100]	; 0x64
 8009290:	81c2      	strh	r2, [r0, #14]
 8009292:	6183      	str	r3, [r0, #24]
 8009294:	4619      	mov	r1, r3
 8009296:	2208      	movs	r2, #8
 8009298:	305c      	adds	r0, #92	; 0x5c
 800929a:	f7fc f85d 	bl	8005358 <memset>
 800929e:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <std+0x38>)
 80092a0:	6263      	str	r3, [r4, #36]	; 0x24
 80092a2:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <std+0x3c>)
 80092a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <std+0x40>)
 80092a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <std+0x44>)
 80092ac:	6224      	str	r4, [r4, #32]
 80092ae:	6323      	str	r3, [r4, #48]	; 0x30
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	bf00      	nop
 80092b4:	080095d1 	.word	0x080095d1
 80092b8:	080095f3 	.word	0x080095f3
 80092bc:	0800962b 	.word	0x0800962b
 80092c0:	0800964f 	.word	0x0800964f

080092c4 <_cleanup_r>:
 80092c4:	4901      	ldr	r1, [pc, #4]	; (80092cc <_cleanup_r+0x8>)
 80092c6:	f000 b8af 	b.w	8009428 <_fwalk_reent>
 80092ca:	bf00      	nop
 80092cc:	08009205 	.word	0x08009205

080092d0 <__sfmoreglue>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	2268      	movs	r2, #104	; 0x68
 80092d4:	1e4d      	subs	r5, r1, #1
 80092d6:	4355      	muls	r5, r2
 80092d8:	460e      	mov	r6, r1
 80092da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092de:	f7ff fa6d 	bl	80087bc <_malloc_r>
 80092e2:	4604      	mov	r4, r0
 80092e4:	b140      	cbz	r0, 80092f8 <__sfmoreglue+0x28>
 80092e6:	2100      	movs	r1, #0
 80092e8:	e9c0 1600 	strd	r1, r6, [r0]
 80092ec:	300c      	adds	r0, #12
 80092ee:	60a0      	str	r0, [r4, #8]
 80092f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092f4:	f7fc f830 	bl	8005358 <memset>
 80092f8:	4620      	mov	r0, r4
 80092fa:	bd70      	pop	{r4, r5, r6, pc}

080092fc <__sfp_lock_acquire>:
 80092fc:	4801      	ldr	r0, [pc, #4]	; (8009304 <__sfp_lock_acquire+0x8>)
 80092fe:	f000 b8b3 	b.w	8009468 <__retarget_lock_acquire_recursive>
 8009302:	bf00      	nop
 8009304:	20000825 	.word	0x20000825

08009308 <__sfp_lock_release>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__sfp_lock_release+0x8>)
 800930a:	f000 b8ae 	b.w	800946a <__retarget_lock_release_recursive>
 800930e:	bf00      	nop
 8009310:	20000825 	.word	0x20000825

08009314 <__sinit_lock_acquire>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__sinit_lock_acquire+0x8>)
 8009316:	f000 b8a7 	b.w	8009468 <__retarget_lock_acquire_recursive>
 800931a:	bf00      	nop
 800931c:	20000826 	.word	0x20000826

08009320 <__sinit_lock_release>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__sinit_lock_release+0x8>)
 8009322:	f000 b8a2 	b.w	800946a <__retarget_lock_release_recursive>
 8009326:	bf00      	nop
 8009328:	20000826 	.word	0x20000826

0800932c <__sinit>:
 800932c:	b510      	push	{r4, lr}
 800932e:	4604      	mov	r4, r0
 8009330:	f7ff fff0 	bl	8009314 <__sinit_lock_acquire>
 8009334:	69a3      	ldr	r3, [r4, #24]
 8009336:	b11b      	cbz	r3, 8009340 <__sinit+0x14>
 8009338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933c:	f7ff bff0 	b.w	8009320 <__sinit_lock_release>
 8009340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009344:	6523      	str	r3, [r4, #80]	; 0x50
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <__sinit+0x68>)
 8009348:	4a13      	ldr	r2, [pc, #76]	; (8009398 <__sinit+0x6c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	62a2      	str	r2, [r4, #40]	; 0x28
 800934e:	42a3      	cmp	r3, r4
 8009350:	bf04      	itt	eq
 8009352:	2301      	moveq	r3, #1
 8009354:	61a3      	streq	r3, [r4, #24]
 8009356:	4620      	mov	r0, r4
 8009358:	f000 f820 	bl	800939c <__sfp>
 800935c:	6060      	str	r0, [r4, #4]
 800935e:	4620      	mov	r0, r4
 8009360:	f000 f81c 	bl	800939c <__sfp>
 8009364:	60a0      	str	r0, [r4, #8]
 8009366:	4620      	mov	r0, r4
 8009368:	f000 f818 	bl	800939c <__sfp>
 800936c:	2200      	movs	r2, #0
 800936e:	60e0      	str	r0, [r4, #12]
 8009370:	2104      	movs	r1, #4
 8009372:	6860      	ldr	r0, [r4, #4]
 8009374:	f7ff ff82 	bl	800927c <std>
 8009378:	68a0      	ldr	r0, [r4, #8]
 800937a:	2201      	movs	r2, #1
 800937c:	2109      	movs	r1, #9
 800937e:	f7ff ff7d 	bl	800927c <std>
 8009382:	68e0      	ldr	r0, [r4, #12]
 8009384:	2202      	movs	r2, #2
 8009386:	2112      	movs	r1, #18
 8009388:	f7ff ff78 	bl	800927c <std>
 800938c:	2301      	movs	r3, #1
 800938e:	61a3      	str	r3, [r4, #24]
 8009390:	e7d2      	b.n	8009338 <__sinit+0xc>
 8009392:	bf00      	nop
 8009394:	080097fc 	.word	0x080097fc
 8009398:	080092c5 	.word	0x080092c5

0800939c <__sfp>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	4607      	mov	r7, r0
 80093a0:	f7ff ffac 	bl	80092fc <__sfp_lock_acquire>
 80093a4:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <__sfp+0x84>)
 80093a6:	681e      	ldr	r6, [r3, #0]
 80093a8:	69b3      	ldr	r3, [r6, #24]
 80093aa:	b913      	cbnz	r3, 80093b2 <__sfp+0x16>
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff ffbd 	bl	800932c <__sinit>
 80093b2:	3648      	adds	r6, #72	; 0x48
 80093b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	d503      	bpl.n	80093c4 <__sfp+0x28>
 80093bc:	6833      	ldr	r3, [r6, #0]
 80093be:	b30b      	cbz	r3, 8009404 <__sfp+0x68>
 80093c0:	6836      	ldr	r6, [r6, #0]
 80093c2:	e7f7      	b.n	80093b4 <__sfp+0x18>
 80093c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093c8:	b9d5      	cbnz	r5, 8009400 <__sfp+0x64>
 80093ca:	4b16      	ldr	r3, [pc, #88]	; (8009424 <__sfp+0x88>)
 80093cc:	60e3      	str	r3, [r4, #12]
 80093ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093d2:	6665      	str	r5, [r4, #100]	; 0x64
 80093d4:	f000 f847 	bl	8009466 <__retarget_lock_init_recursive>
 80093d8:	f7ff ff96 	bl	8009308 <__sfp_lock_release>
 80093dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093e4:	6025      	str	r5, [r4, #0]
 80093e6:	61a5      	str	r5, [r4, #24]
 80093e8:	2208      	movs	r2, #8
 80093ea:	4629      	mov	r1, r5
 80093ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093f0:	f7fb ffb2 	bl	8005358 <memset>
 80093f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093fc:	4620      	mov	r0, r4
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009400:	3468      	adds	r4, #104	; 0x68
 8009402:	e7d9      	b.n	80093b8 <__sfp+0x1c>
 8009404:	2104      	movs	r1, #4
 8009406:	4638      	mov	r0, r7
 8009408:	f7ff ff62 	bl	80092d0 <__sfmoreglue>
 800940c:	4604      	mov	r4, r0
 800940e:	6030      	str	r0, [r6, #0]
 8009410:	2800      	cmp	r0, #0
 8009412:	d1d5      	bne.n	80093c0 <__sfp+0x24>
 8009414:	f7ff ff78 	bl	8009308 <__sfp_lock_release>
 8009418:	230c      	movs	r3, #12
 800941a:	603b      	str	r3, [r7, #0]
 800941c:	e7ee      	b.n	80093fc <__sfp+0x60>
 800941e:	bf00      	nop
 8009420:	080097fc 	.word	0x080097fc
 8009424:	ffff0001 	.word	0xffff0001

08009428 <_fwalk_reent>:
 8009428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800942c:	4606      	mov	r6, r0
 800942e:	4688      	mov	r8, r1
 8009430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009434:	2700      	movs	r7, #0
 8009436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800943a:	f1b9 0901 	subs.w	r9, r9, #1
 800943e:	d505      	bpl.n	800944c <_fwalk_reent+0x24>
 8009440:	6824      	ldr	r4, [r4, #0]
 8009442:	2c00      	cmp	r4, #0
 8009444:	d1f7      	bne.n	8009436 <_fwalk_reent+0xe>
 8009446:	4638      	mov	r0, r7
 8009448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944c:	89ab      	ldrh	r3, [r5, #12]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d907      	bls.n	8009462 <_fwalk_reent+0x3a>
 8009452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009456:	3301      	adds	r3, #1
 8009458:	d003      	beq.n	8009462 <_fwalk_reent+0x3a>
 800945a:	4629      	mov	r1, r5
 800945c:	4630      	mov	r0, r6
 800945e:	47c0      	blx	r8
 8009460:	4307      	orrs	r7, r0
 8009462:	3568      	adds	r5, #104	; 0x68
 8009464:	e7e9      	b.n	800943a <_fwalk_reent+0x12>

08009466 <__retarget_lock_init_recursive>:
 8009466:	4770      	bx	lr

08009468 <__retarget_lock_acquire_recursive>:
 8009468:	4770      	bx	lr

0800946a <__retarget_lock_release_recursive>:
 800946a:	4770      	bx	lr

0800946c <__swhatbuf_r>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	460e      	mov	r6, r1
 8009470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009474:	2900      	cmp	r1, #0
 8009476:	b096      	sub	sp, #88	; 0x58
 8009478:	4614      	mov	r4, r2
 800947a:	461d      	mov	r5, r3
 800947c:	da08      	bge.n	8009490 <__swhatbuf_r+0x24>
 800947e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	602a      	str	r2, [r5, #0]
 8009486:	061a      	lsls	r2, r3, #24
 8009488:	d410      	bmi.n	80094ac <__swhatbuf_r+0x40>
 800948a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800948e:	e00e      	b.n	80094ae <__swhatbuf_r+0x42>
 8009490:	466a      	mov	r2, sp
 8009492:	f000 f903 	bl	800969c <_fstat_r>
 8009496:	2800      	cmp	r0, #0
 8009498:	dbf1      	blt.n	800947e <__swhatbuf_r+0x12>
 800949a:	9a01      	ldr	r2, [sp, #4]
 800949c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094a4:	425a      	negs	r2, r3
 80094a6:	415a      	adcs	r2, r3
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	e7ee      	b.n	800948a <__swhatbuf_r+0x1e>
 80094ac:	2340      	movs	r3, #64	; 0x40
 80094ae:	2000      	movs	r0, #0
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	b016      	add	sp, #88	; 0x58
 80094b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080094b8 <__smakebuf_r>:
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094bc:	079d      	lsls	r5, r3, #30
 80094be:	4606      	mov	r6, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	d507      	bpl.n	80094d4 <__smakebuf_r+0x1c>
 80094c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	2301      	movs	r3, #1
 80094ce:	6163      	str	r3, [r4, #20]
 80094d0:	b002      	add	sp, #8
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	ab01      	add	r3, sp, #4
 80094d6:	466a      	mov	r2, sp
 80094d8:	f7ff ffc8 	bl	800946c <__swhatbuf_r>
 80094dc:	9900      	ldr	r1, [sp, #0]
 80094de:	4605      	mov	r5, r0
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7ff f96b 	bl	80087bc <_malloc_r>
 80094e6:	b948      	cbnz	r0, 80094fc <__smakebuf_r+0x44>
 80094e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ec:	059a      	lsls	r2, r3, #22
 80094ee:	d4ef      	bmi.n	80094d0 <__smakebuf_r+0x18>
 80094f0:	f023 0303 	bic.w	r3, r3, #3
 80094f4:	f043 0302 	orr.w	r3, r3, #2
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	e7e3      	b.n	80094c4 <__smakebuf_r+0xc>
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <__smakebuf_r+0x7c>)
 80094fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	6020      	str	r0, [r4, #0]
 8009504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009508:	81a3      	strh	r3, [r4, #12]
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	6163      	str	r3, [r4, #20]
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	6120      	str	r0, [r4, #16]
 8009512:	b15b      	cbz	r3, 800952c <__smakebuf_r+0x74>
 8009514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009518:	4630      	mov	r0, r6
 800951a:	f000 f8d1 	bl	80096c0 <_isatty_r>
 800951e:	b128      	cbz	r0, 800952c <__smakebuf_r+0x74>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	89a0      	ldrh	r0, [r4, #12]
 800952e:	4305      	orrs	r5, r0
 8009530:	81a5      	strh	r5, [r4, #12]
 8009532:	e7cd      	b.n	80094d0 <__smakebuf_r+0x18>
 8009534:	080092c5 	.word	0x080092c5

08009538 <_malloc_usable_size_r>:
 8009538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953c:	1f18      	subs	r0, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	bfbc      	itt	lt
 8009542:	580b      	ldrlt	r3, [r1, r0]
 8009544:	18c0      	addlt	r0, r0, r3
 8009546:	4770      	bx	lr

08009548 <_raise_r>:
 8009548:	291f      	cmp	r1, #31
 800954a:	b538      	push	{r3, r4, r5, lr}
 800954c:	4604      	mov	r4, r0
 800954e:	460d      	mov	r5, r1
 8009550:	d904      	bls.n	800955c <_raise_r+0x14>
 8009552:	2316      	movs	r3, #22
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800955e:	b112      	cbz	r2, 8009566 <_raise_r+0x1e>
 8009560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009564:	b94b      	cbnz	r3, 800957a <_raise_r+0x32>
 8009566:	4620      	mov	r0, r4
 8009568:	f000 f830 	bl	80095cc <_getpid_r>
 800956c:	462a      	mov	r2, r5
 800956e:	4601      	mov	r1, r0
 8009570:	4620      	mov	r0, r4
 8009572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009576:	f000 b817 	b.w	80095a8 <_kill_r>
 800957a:	2b01      	cmp	r3, #1
 800957c:	d00a      	beq.n	8009594 <_raise_r+0x4c>
 800957e:	1c59      	adds	r1, r3, #1
 8009580:	d103      	bne.n	800958a <_raise_r+0x42>
 8009582:	2316      	movs	r3, #22
 8009584:	6003      	str	r3, [r0, #0]
 8009586:	2001      	movs	r0, #1
 8009588:	e7e7      	b.n	800955a <_raise_r+0x12>
 800958a:	2400      	movs	r4, #0
 800958c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009590:	4628      	mov	r0, r5
 8009592:	4798      	blx	r3
 8009594:	2000      	movs	r0, #0
 8009596:	e7e0      	b.n	800955a <_raise_r+0x12>

08009598 <raise>:
 8009598:	4b02      	ldr	r3, [pc, #8]	; (80095a4 <raise+0xc>)
 800959a:	4601      	mov	r1, r0
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	f7ff bfd3 	b.w	8009548 <_raise_r>
 80095a2:	bf00      	nop
 80095a4:	2000001c 	.word	0x2000001c

080095a8 <_kill_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d07      	ldr	r5, [pc, #28]	; (80095c8 <_kill_r+0x20>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	f7f8 f9af 	bl	8001918 <_kill>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d102      	bne.n	80095c4 <_kill_r+0x1c>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b103      	cbz	r3, 80095c4 <_kill_r+0x1c>
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	bf00      	nop
 80095c8:	20000820 	.word	0x20000820

080095cc <_getpid_r>:
 80095cc:	f7f8 b99c 	b.w	8001908 <_getpid>

080095d0 <__sread>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	460c      	mov	r4, r1
 80095d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d8:	f000 f894 	bl	8009704 <_read_r>
 80095dc:	2800      	cmp	r0, #0
 80095de:	bfab      	itete	ge
 80095e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095e2:	89a3      	ldrhlt	r3, [r4, #12]
 80095e4:	181b      	addge	r3, r3, r0
 80095e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ea:	bfac      	ite	ge
 80095ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ee:	81a3      	strhlt	r3, [r4, #12]
 80095f0:	bd10      	pop	{r4, pc}

080095f2 <__swrite>:
 80095f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f6:	461f      	mov	r7, r3
 80095f8:	898b      	ldrh	r3, [r1, #12]
 80095fa:	05db      	lsls	r3, r3, #23
 80095fc:	4605      	mov	r5, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	4616      	mov	r6, r2
 8009602:	d505      	bpl.n	8009610 <__swrite+0x1e>
 8009604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009608:	2302      	movs	r3, #2
 800960a:	2200      	movs	r2, #0
 800960c:	f000 f868 	bl	80096e0 <_lseek_r>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	4632      	mov	r2, r6
 800961e:	463b      	mov	r3, r7
 8009620:	4628      	mov	r0, r5
 8009622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	f000 b817 	b.w	8009658 <_write_r>

0800962a <__sseek>:
 800962a:	b510      	push	{r4, lr}
 800962c:	460c      	mov	r4, r1
 800962e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009632:	f000 f855 	bl	80096e0 <_lseek_r>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	bf15      	itete	ne
 800963c:	6560      	strne	r0, [r4, #84]	; 0x54
 800963e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009646:	81a3      	strheq	r3, [r4, #12]
 8009648:	bf18      	it	ne
 800964a:	81a3      	strhne	r3, [r4, #12]
 800964c:	bd10      	pop	{r4, pc}

0800964e <__sclose>:
 800964e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009652:	f000 b813 	b.w	800967c <_close_r>
	...

08009658 <_write_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d07      	ldr	r5, [pc, #28]	; (8009678 <_write_r+0x20>)
 800965c:	4604      	mov	r4, r0
 800965e:	4608      	mov	r0, r1
 8009660:	4611      	mov	r1, r2
 8009662:	2200      	movs	r2, #0
 8009664:	602a      	str	r2, [r5, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	f7f8 f98d 	bl	8001986 <_write>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_write_r+0x1e>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_write_r+0x1e>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	20000820 	.word	0x20000820

0800967c <_close_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d06      	ldr	r5, [pc, #24]	; (8009698 <_close_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f8 f999 	bl	80019be <_close>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_close_r+0x1a>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_close_r+0x1a>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	20000820 	.word	0x20000820

0800969c <_fstat_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d07      	ldr	r5, [pc, #28]	; (80096bc <_fstat_r+0x20>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	4611      	mov	r1, r2
 80096a8:	602b      	str	r3, [r5, #0]
 80096aa:	f7f8 f994 	bl	80019d6 <_fstat>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	d102      	bne.n	80096b8 <_fstat_r+0x1c>
 80096b2:	682b      	ldr	r3, [r5, #0]
 80096b4:	b103      	cbz	r3, 80096b8 <_fstat_r+0x1c>
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	20000820 	.word	0x20000820

080096c0 <_isatty_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	; (80096dc <_isatty_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f8 f993 	bl	80019f6 <_isatty>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_isatty_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_isatty_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20000820 	.word	0x20000820

080096e0 <_lseek_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4d07      	ldr	r5, [pc, #28]	; (8009700 <_lseek_r+0x20>)
 80096e4:	4604      	mov	r4, r0
 80096e6:	4608      	mov	r0, r1
 80096e8:	4611      	mov	r1, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	602a      	str	r2, [r5, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f7f8 f98c 	bl	8001a0c <_lseek>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_lseek_r+0x1e>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_lseek_r+0x1e>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20000820 	.word	0x20000820

08009704 <_read_r>:
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4d07      	ldr	r5, [pc, #28]	; (8009724 <_read_r+0x20>)
 8009708:	4604      	mov	r4, r0
 800970a:	4608      	mov	r0, r1
 800970c:	4611      	mov	r1, r2
 800970e:	2200      	movs	r2, #0
 8009710:	602a      	str	r2, [r5, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	f7f8 f91a 	bl	800194c <_read>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_read_r+0x1e>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_read_r+0x1e>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	20000820 	.word	0x20000820

08009728 <_init>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	bf00      	nop
 800972c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972e:	bc08      	pop	{r3}
 8009730:	469e      	mov	lr, r3
 8009732:	4770      	bx	lr

08009734 <_fini>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	bf00      	nop
 8009738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973a:	bc08      	pop	{r3}
 800973c:	469e      	mov	lr, r3
 800973e:	4770      	bx	lr
